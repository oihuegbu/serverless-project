"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.determineAllowCrossAccountAssetPublishing = determineAllowCrossAccountAssetPublishing;
exports.getBootstrapStackInfo = getBootstrapStackInfo;
const logging_1 = require("../../logging");
async function determineAllowCrossAccountAssetPublishing(sdk, customStackName) {
    try {
        const stackName = customStackName || 'CDKToolkit';
        const stackInfo = await getBootstrapStackInfo(sdk, stackName);
        if (!stackInfo.hasStagingBucket) {
            // indicates an intentional cross account setup
            return true;
        }
        if (stackInfo.bootstrapVersion >= 21) {
            // bootstrap stack version 21 contains a fix that will prevent cross
            // account publishing on the IAM level
            // https://github.com/aws/aws-cdk/pull/30823
            return true;
        }
        // If there is a staging bucket AND the bootstrap version is old, then we want to protect
        // against accidental cross-account publishing.
        return false;
    }
    catch (e) {
        // You would think we would need to fail closed here, but the reality is
        // that we get here if we couldn't find the bootstrap stack: that is
        // completely valid, and many large organizations may have their own method
        // of creating bootstrap resources. If they do, there's nothing for us to validate,
        // but we can't use that as a reason to disallow cross-account publishing. We'll just
        // have to trust they did their due diligence. So we fail open.
        (0, logging_1.debug)(`Error determining cross account asset publishing: ${e}`);
        (0, logging_1.debug)('Defaulting to allowing cross account asset publishing');
        return true;
    }
}
async function getBootstrapStackInfo(sdk, stackName) {
    try {
        const cfn = sdk.cloudFormation();
        const stackResponse = await cfn.describeStacks({ StackName: stackName }).promise();
        if (!stackResponse.Stacks || stackResponse.Stacks.length === 0) {
            throw new Error(`Toolkit stack ${stackName} not found`);
        }
        const stack = stackResponse.Stacks[0];
        const versionOutput = stack.Outputs?.find(output => output.OutputKey === 'BootstrapVersion');
        if (!versionOutput?.OutputValue) {
            throw new Error(`Unable to find BootstrapVersion output in the toolkit stack ${stackName}`);
        }
        const bootstrapVersion = parseInt(versionOutput.OutputValue);
        if (isNaN(bootstrapVersion)) {
            throw new Error(`Invalid BootstrapVersion value: ${versionOutput.OutputValue}`);
        }
        // try to get bucketname from the logical resource id. If there is no
        // bucketname, or the value doesn't look like an S3 bucket name, we assume
        // the bucket doesn't exist (this is for the case where a template customizer did
        // not dare to remove the Output, but put a dummy value there like '' or '-' or '***').
        //
        // We would have preferred to look at the stack resources here, but
        // unfortunately the deploy role doesn't have permissions call DescribeStackResources.
        const bucketName = stack.Outputs?.find(output => output.OutputKey === 'BucketName')?.OutputValue;
        // Must begin and end with letter or number.
        const hasStagingBucket = !!(bucketName && bucketName.match(/^[a-z0-9]/) && bucketName.match(/[a-z0-9]$/));
        return {
            hasStagingBucket,
            bootstrapVersion,
        };
    }
    catch (e) {
        throw new Error(`Error retrieving toolkit stack info: ${e}`);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hlY2tzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiY2hlY2tzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBR0EsOEZBK0JDO0FBT0Qsc0RBdUNDO0FBaEZELDJDQUFzQztBQUcvQixLQUFLLFVBQVUseUNBQXlDLENBQUMsR0FBUyxFQUFFLGVBQXdCO0lBQ2pHLElBQUksQ0FBQztRQUNILE1BQU0sU0FBUyxHQUFHLGVBQWUsSUFBSSxZQUFZLENBQUM7UUFDbEQsTUFBTSxTQUFTLEdBQUcsTUFBTSxxQkFBcUIsQ0FBQyxHQUFHLEVBQUUsU0FBUyxDQUFDLENBQUM7UUFFOUQsSUFBSSxDQUFDLFNBQVMsQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDO1lBQ2hDLCtDQUErQztZQUMvQyxPQUFPLElBQUksQ0FBQztRQUNkLENBQUM7UUFFRCxJQUFJLFNBQVMsQ0FBQyxnQkFBZ0IsSUFBSSxFQUFFLEVBQUUsQ0FBQztZQUNyQyxvRUFBb0U7WUFDcEUsc0NBQXNDO1lBQ3RDLDRDQUE0QztZQUM1QyxPQUFPLElBQUksQ0FBQztRQUNkLENBQUM7UUFFRCx5RkFBeUY7UUFDekYsK0NBQStDO1FBQy9DLE9BQU8sS0FBSyxDQUFDO0lBQ2YsQ0FBQztJQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUM7UUFDWCx3RUFBd0U7UUFDeEUsb0VBQW9FO1FBQ3BFLDJFQUEyRTtRQUMzRSxtRkFBbUY7UUFDbkYscUZBQXFGO1FBQ3JGLCtEQUErRDtRQUMvRCxJQUFBLGVBQUssRUFBQyxxREFBcUQsQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUNoRSxJQUFBLGVBQUssRUFBQyx1REFBdUQsQ0FBQyxDQUFDO1FBQy9ELE9BQU8sSUFBSSxDQUFDO0lBQ2QsQ0FBQztBQUNILENBQUM7QUFPTSxLQUFLLFVBQVUscUJBQXFCLENBQUMsR0FBUyxFQUFFLFNBQWlCO0lBQ3RFLElBQUksQ0FBQztRQUNILE1BQU0sR0FBRyxHQUFHLEdBQUcsQ0FBQyxjQUFjLEVBQUUsQ0FBQztRQUNqQyxNQUFNLGFBQWEsR0FBRyxNQUFNLEdBQUcsQ0FBQyxjQUFjLENBQUMsRUFBRSxTQUFTLEVBQUUsU0FBUyxFQUFFLENBQUMsQ0FBQyxPQUFPLEVBQUUsQ0FBQztRQUVuRixJQUFJLENBQUMsYUFBYSxDQUFDLE1BQU0sSUFBSSxhQUFhLENBQUMsTUFBTSxDQUFDLE1BQU0sS0FBSyxDQUFDLEVBQUUsQ0FBQztZQUMvRCxNQUFNLElBQUksS0FBSyxDQUFDLGlCQUFpQixTQUFTLFlBQVksQ0FBQyxDQUFDO1FBQzFELENBQUM7UUFFRCxNQUFNLEtBQUssR0FBRyxhQUFhLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3RDLE1BQU0sYUFBYSxHQUFHLEtBQUssQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsTUFBTSxDQUFDLFNBQVMsS0FBSyxrQkFBa0IsQ0FBQyxDQUFDO1FBRTdGLElBQUksQ0FBQyxhQUFhLEVBQUUsV0FBVyxFQUFFLENBQUM7WUFDaEMsTUFBTSxJQUFJLEtBQUssQ0FBQywrREFBK0QsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUM5RixDQUFDO1FBRUQsTUFBTSxnQkFBZ0IsR0FBRyxRQUFRLENBQUMsYUFBYSxDQUFDLFdBQVcsQ0FBQyxDQUFDO1FBQzdELElBQUksS0FBSyxDQUFDLGdCQUFnQixDQUFDLEVBQUUsQ0FBQztZQUM1QixNQUFNLElBQUksS0FBSyxDQUFDLG1DQUFtQyxhQUFhLENBQUMsV0FBVyxFQUFFLENBQUMsQ0FBQztRQUNsRixDQUFDO1FBRUQscUVBQXFFO1FBQ3JFLDBFQUEwRTtRQUMxRSxpRkFBaUY7UUFDakYsdUZBQXVGO1FBQ3ZGLEVBQUU7UUFDRixtRUFBbUU7UUFDbkUsc0ZBQXNGO1FBQ3RGLE1BQU0sVUFBVSxHQUFHLEtBQUssQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsTUFBTSxDQUFDLFNBQVMsS0FBSyxZQUFZLENBQUMsRUFBRSxXQUFXLENBQUM7UUFDakcsNENBQTRDO1FBQzVDLE1BQU0sZ0JBQWdCLEdBQUcsQ0FBQyxDQUFDLENBQUMsVUFBVSxJQUFJLFVBQVUsQ0FBQyxLQUFLLENBQUMsV0FBVyxDQUFDLElBQUksVUFBVSxDQUFDLEtBQUssQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDO1FBRTFHLE9BQU87WUFDTCxnQkFBZ0I7WUFDaEIsZ0JBQWdCO1NBQ2pCLENBQUM7SUFDSixDQUFDO0lBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQztRQUNYLE1BQU0sSUFBSSxLQUFLLENBQUMsd0NBQXdDLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDL0QsQ0FBQztBQUNILENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBkZWJ1ZyB9IGZyb20gJy4uLy4uL2xvZ2dpbmcnO1xuaW1wb3J0IHsgSVNESyB9IGZyb20gJy4uL2F3cy1hdXRoL3Nkayc7XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBkZXRlcm1pbmVBbGxvd0Nyb3NzQWNjb3VudEFzc2V0UHVibGlzaGluZyhzZGs6IElTREssIGN1c3RvbVN0YWNrTmFtZT86IHN0cmluZyk6IFByb21pc2U8Ym9vbGVhbj4ge1xuICB0cnkge1xuICAgIGNvbnN0IHN0YWNrTmFtZSA9IGN1c3RvbVN0YWNrTmFtZSB8fCAnQ0RLVG9vbGtpdCc7XG4gICAgY29uc3Qgc3RhY2tJbmZvID0gYXdhaXQgZ2V0Qm9vdHN0cmFwU3RhY2tJbmZvKHNkaywgc3RhY2tOYW1lKTtcblxuICAgIGlmICghc3RhY2tJbmZvLmhhc1N0YWdpbmdCdWNrZXQpIHtcbiAgICAgIC8vIGluZGljYXRlcyBhbiBpbnRlbnRpb25hbCBjcm9zcyBhY2NvdW50IHNldHVwXG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICBpZiAoc3RhY2tJbmZvLmJvb3RzdHJhcFZlcnNpb24gPj0gMjEpIHtcbiAgICAgIC8vIGJvb3RzdHJhcCBzdGFjayB2ZXJzaW9uIDIxIGNvbnRhaW5zIGEgZml4IHRoYXQgd2lsbCBwcmV2ZW50IGNyb3NzXG4gICAgICAvLyBhY2NvdW50IHB1Ymxpc2hpbmcgb24gdGhlIElBTSBsZXZlbFxuICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL2F3cy9hd3MtY2RrL3B1bGwvMzA4MjNcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIC8vIElmIHRoZXJlIGlzIGEgc3RhZ2luZyBidWNrZXQgQU5EIHRoZSBib290c3RyYXAgdmVyc2lvbiBpcyBvbGQsIHRoZW4gd2Ugd2FudCB0byBwcm90ZWN0XG4gICAgLy8gYWdhaW5zdCBhY2NpZGVudGFsIGNyb3NzLWFjY291bnQgcHVibGlzaGluZy5cbiAgICByZXR1cm4gZmFsc2U7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICAvLyBZb3Ugd291bGQgdGhpbmsgd2Ugd291bGQgbmVlZCB0byBmYWlsIGNsb3NlZCBoZXJlLCBidXQgdGhlIHJlYWxpdHkgaXNcbiAgICAvLyB0aGF0IHdlIGdldCBoZXJlIGlmIHdlIGNvdWxkbid0IGZpbmQgdGhlIGJvb3RzdHJhcCBzdGFjazogdGhhdCBpc1xuICAgIC8vIGNvbXBsZXRlbHkgdmFsaWQsIGFuZCBtYW55IGxhcmdlIG9yZ2FuaXphdGlvbnMgbWF5IGhhdmUgdGhlaXIgb3duIG1ldGhvZFxuICAgIC8vIG9mIGNyZWF0aW5nIGJvb3RzdHJhcCByZXNvdXJjZXMuIElmIHRoZXkgZG8sIHRoZXJlJ3Mgbm90aGluZyBmb3IgdXMgdG8gdmFsaWRhdGUsXG4gICAgLy8gYnV0IHdlIGNhbid0IHVzZSB0aGF0IGFzIGEgcmVhc29uIHRvIGRpc2FsbG93IGNyb3NzLWFjY291bnQgcHVibGlzaGluZy4gV2UnbGwganVzdFxuICAgIC8vIGhhdmUgdG8gdHJ1c3QgdGhleSBkaWQgdGhlaXIgZHVlIGRpbGlnZW5jZS4gU28gd2UgZmFpbCBvcGVuLlxuICAgIGRlYnVnKGBFcnJvciBkZXRlcm1pbmluZyBjcm9zcyBhY2NvdW50IGFzc2V0IHB1Ymxpc2hpbmc6ICR7ZX1gKTtcbiAgICBkZWJ1ZygnRGVmYXVsdGluZyB0byBhbGxvd2luZyBjcm9zcyBhY2NvdW50IGFzc2V0IHB1Ymxpc2hpbmcnKTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxufVxuXG5pbnRlcmZhY2UgQm9vdHN0cmFwU3RhY2tJbmZvIHtcbiAgaGFzU3RhZ2luZ0J1Y2tldDogYm9vbGVhbjtcbiAgYm9vdHN0cmFwVmVyc2lvbjogbnVtYmVyO1xufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZ2V0Qm9vdHN0cmFwU3RhY2tJbmZvKHNkazogSVNESywgc3RhY2tOYW1lOiBzdHJpbmcpOiBQcm9taXNlPEJvb3RzdHJhcFN0YWNrSW5mbz4ge1xuICB0cnkge1xuICAgIGNvbnN0IGNmbiA9IHNkay5jbG91ZEZvcm1hdGlvbigpO1xuICAgIGNvbnN0IHN0YWNrUmVzcG9uc2UgPSBhd2FpdCBjZm4uZGVzY3JpYmVTdGFja3MoeyBTdGFja05hbWU6IHN0YWNrTmFtZSB9KS5wcm9taXNlKCk7XG5cbiAgICBpZiAoIXN0YWNrUmVzcG9uc2UuU3RhY2tzIHx8IHN0YWNrUmVzcG9uc2UuU3RhY2tzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBUb29sa2l0IHN0YWNrICR7c3RhY2tOYW1lfSBub3QgZm91bmRgKTtcbiAgICB9XG5cbiAgICBjb25zdCBzdGFjayA9IHN0YWNrUmVzcG9uc2UuU3RhY2tzWzBdO1xuICAgIGNvbnN0IHZlcnNpb25PdXRwdXQgPSBzdGFjay5PdXRwdXRzPy5maW5kKG91dHB1dCA9PiBvdXRwdXQuT3V0cHV0S2V5ID09PSAnQm9vdHN0cmFwVmVyc2lvbicpO1xuXG4gICAgaWYgKCF2ZXJzaW9uT3V0cHV0Py5PdXRwdXRWYWx1ZSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBVbmFibGUgdG8gZmluZCBCb290c3RyYXBWZXJzaW9uIG91dHB1dCBpbiB0aGUgdG9vbGtpdCBzdGFjayAke3N0YWNrTmFtZX1gKTtcbiAgICB9XG5cbiAgICBjb25zdCBib290c3RyYXBWZXJzaW9uID0gcGFyc2VJbnQodmVyc2lvbk91dHB1dC5PdXRwdXRWYWx1ZSk7XG4gICAgaWYgKGlzTmFOKGJvb3RzdHJhcFZlcnNpb24pKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYEludmFsaWQgQm9vdHN0cmFwVmVyc2lvbiB2YWx1ZTogJHt2ZXJzaW9uT3V0cHV0Lk91dHB1dFZhbHVlfWApO1xuICAgIH1cblxuICAgIC8vIHRyeSB0byBnZXQgYnVja2V0bmFtZSBmcm9tIHRoZSBsb2dpY2FsIHJlc291cmNlIGlkLiBJZiB0aGVyZSBpcyBub1xuICAgIC8vIGJ1Y2tldG5hbWUsIG9yIHRoZSB2YWx1ZSBkb2Vzbid0IGxvb2sgbGlrZSBhbiBTMyBidWNrZXQgbmFtZSwgd2UgYXNzdW1lXG4gICAgLy8gdGhlIGJ1Y2tldCBkb2Vzbid0IGV4aXN0ICh0aGlzIGlzIGZvciB0aGUgY2FzZSB3aGVyZSBhIHRlbXBsYXRlIGN1c3RvbWl6ZXIgZGlkXG4gICAgLy8gbm90IGRhcmUgdG8gcmVtb3ZlIHRoZSBPdXRwdXQsIGJ1dCBwdXQgYSBkdW1teSB2YWx1ZSB0aGVyZSBsaWtlICcnIG9yICctJyBvciAnKioqJykuXG4gICAgLy9cbiAgICAvLyBXZSB3b3VsZCBoYXZlIHByZWZlcnJlZCB0byBsb29rIGF0IHRoZSBzdGFjayByZXNvdXJjZXMgaGVyZSwgYnV0XG4gICAgLy8gdW5mb3J0dW5hdGVseSB0aGUgZGVwbG95IHJvbGUgZG9lc24ndCBoYXZlIHBlcm1pc3Npb25zIGNhbGwgRGVzY3JpYmVTdGFja1Jlc291cmNlcy5cbiAgICBjb25zdCBidWNrZXROYW1lID0gc3RhY2suT3V0cHV0cz8uZmluZChvdXRwdXQgPT4gb3V0cHV0Lk91dHB1dEtleSA9PT0gJ0J1Y2tldE5hbWUnKT8uT3V0cHV0VmFsdWU7XG4gICAgLy8gTXVzdCBiZWdpbiBhbmQgZW5kIHdpdGggbGV0dGVyIG9yIG51bWJlci5cbiAgICBjb25zdCBoYXNTdGFnaW5nQnVja2V0ID0gISEoYnVja2V0TmFtZSAmJiBidWNrZXROYW1lLm1hdGNoKC9eW2EtejAtOV0vKSAmJiBidWNrZXROYW1lLm1hdGNoKC9bYS16MC05XSQvKSk7XG5cbiAgICByZXR1cm4ge1xuICAgICAgaGFzU3RhZ2luZ0J1Y2tldCxcbiAgICAgIGJvb3RzdHJhcFZlcnNpb24sXG4gICAgfTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHRocm93IG5ldyBFcnJvcihgRXJyb3IgcmV0cmlldmluZyB0b29sa2l0IHN0YWNrIGluZm86ICR7ZX1gKTtcbiAgfVxufSJdfQ==