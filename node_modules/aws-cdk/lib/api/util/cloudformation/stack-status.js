"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RollbackChoice = exports.StackStatus = void 0;
/**
 * A utility class to inspect CloudFormation stack statuses.
 *
 * @see https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-cfn-describing-stacks.html
 */
class StackStatus {
    static fromStackDescription(description) {
        return new StackStatus(description.StackStatus, description.StackStatusReason);
    }
    constructor(name, reason) {
        this.name = name;
        this.reason = reason;
    }
    get isCreationFailure() {
        return this.name === 'ROLLBACK_COMPLETE'
            || this.name === 'ROLLBACK_FAILED';
    }
    get isDeleted() {
        return this.name.startsWith('DELETE_');
    }
    get isFailure() {
        return this.name.endsWith('FAILED');
    }
    get isInProgress() {
        return this.name.endsWith('_IN_PROGRESS') && !this.isReviewInProgress;
    }
    get isReviewInProgress() {
        return this.name === 'REVIEW_IN_PROGRESS';
    }
    get isNotFound() {
        return this.name === 'NOT_FOUND';
    }
    get isDeploySuccess() {
        return !this.isNotFound && (this.name === 'CREATE_COMPLETE' || this.name === 'UPDATE_COMPLETE' || this.name === 'IMPORT_COMPLETE');
    }
    get isRollbackSuccess() {
        return this.name === 'ROLLBACK_COMPLETE'
            || this.name === 'UPDATE_ROLLBACK_COMPLETE';
    }
    /**
     * Whether the stack is in a paused state due to `--no-rollback`.
     *
     * The possible actions here are retrying a new `--no-rollback` deployment, or initiating a rollback.
     */
    get rollbackChoice() {
        switch (this.name) {
            case 'CREATE_FAILED':
            case 'UPDATE_FAILED':
                return RollbackChoice.START_ROLLBACK;
            case 'UPDATE_ROLLBACK_FAILED':
                return RollbackChoice.CONTINUE_UPDATE_ROLLBACK;
            case 'ROLLBACK_FAILED':
                // Unfortunately there is no option to continue a failed rollback without
                // a stable target state.
                return RollbackChoice.ROLLBACK_FAILED;
            default:
                return RollbackChoice.NONE;
        }
    }
    get isRollbackable() {
        return [RollbackChoice.START_ROLLBACK, RollbackChoice.CONTINUE_UPDATE_ROLLBACK].includes(this.rollbackChoice);
    }
    toString() {
        return this.name + (this.reason ? ` (${this.reason})` : '');
    }
}
exports.StackStatus = StackStatus;
/**
 * Describe the current rollback options for this state
 */
var RollbackChoice;
(function (RollbackChoice) {
    RollbackChoice[RollbackChoice["START_ROLLBACK"] = 0] = "START_ROLLBACK";
    RollbackChoice[RollbackChoice["CONTINUE_UPDATE_ROLLBACK"] = 1] = "CONTINUE_UPDATE_ROLLBACK";
    /**
     * A sign that stack creation AND its rollback have failed.
     *
     * There is no way to recover from this, other than recreating the stack.
     */
    RollbackChoice[RollbackChoice["ROLLBACK_FAILED"] = 2] = "ROLLBACK_FAILED";
    RollbackChoice[RollbackChoice["NONE"] = 3] = "NONE";
})(RollbackChoice || (exports.RollbackChoice = RollbackChoice = {}));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RhY2stc3RhdHVzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsic3RhY2stc3RhdHVzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUVBOzs7O0dBSUc7QUFDSCxNQUFhLFdBQVc7SUFDZixNQUFNLENBQUMsb0JBQW9CLENBQUMsV0FBcUM7UUFDdEUsT0FBTyxJQUFJLFdBQVcsQ0FBQyxXQUFXLENBQUMsV0FBVyxFQUFFLFdBQVcsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO0lBQ2pGLENBQUM7SUFFRCxZQUE0QixJQUFZLEVBQWtCLE1BQWU7UUFBN0MsU0FBSSxHQUFKLElBQUksQ0FBUTtRQUFrQixXQUFNLEdBQU4sTUFBTSxDQUFTO0lBQUcsQ0FBQztJQUU3RSxJQUFJLGlCQUFpQjtRQUNuQixPQUFPLElBQUksQ0FBQyxJQUFJLEtBQUssbUJBQW1CO2VBQ25DLElBQUksQ0FBQyxJQUFJLEtBQUssaUJBQWlCLENBQUM7SUFDdkMsQ0FBQztJQUVELElBQUksU0FBUztRQUNYLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsU0FBUyxDQUFDLENBQUM7SUFDekMsQ0FBQztJQUVELElBQUksU0FBUztRQUNYLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLENBQUM7SUFDdEMsQ0FBQztJQUVELElBQUksWUFBWTtRQUNkLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsa0JBQWtCLENBQUM7SUFDeEUsQ0FBQztJQUVELElBQUksa0JBQWtCO1FBQ3BCLE9BQU8sSUFBSSxDQUFDLElBQUksS0FBSyxvQkFBb0IsQ0FBQztJQUM1QyxDQUFDO0lBRUQsSUFBSSxVQUFVO1FBQ1osT0FBTyxJQUFJLENBQUMsSUFBSSxLQUFLLFdBQVcsQ0FBQztJQUNuQyxDQUFDO0lBRUQsSUFBSSxlQUFlO1FBQ2pCLE9BQU8sQ0FBQyxJQUFJLENBQUMsVUFBVSxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksS0FBSyxpQkFBaUIsSUFBSSxJQUFJLENBQUMsSUFBSSxLQUFLLGlCQUFpQixJQUFJLElBQUksQ0FBQyxJQUFJLEtBQUssaUJBQWlCLENBQUMsQ0FBQztJQUNySSxDQUFDO0lBRUQsSUFBSSxpQkFBaUI7UUFDbkIsT0FBTyxJQUFJLENBQUMsSUFBSSxLQUFLLG1CQUFtQjtlQUNuQyxJQUFJLENBQUMsSUFBSSxLQUFLLDBCQUEwQixDQUFDO0lBQ2hELENBQUM7SUFFRDs7OztPQUlHO0lBQ0gsSUFBSSxjQUFjO1FBQ2hCLFFBQVEsSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDO1lBQ2xCLEtBQUssZUFBZSxDQUFDO1lBQ3JCLEtBQUssZUFBZTtnQkFDbEIsT0FBTyxjQUFjLENBQUMsY0FBYyxDQUFDO1lBQ3ZDLEtBQUssd0JBQXdCO2dCQUMzQixPQUFPLGNBQWMsQ0FBQyx3QkFBd0IsQ0FBQztZQUNqRCxLQUFLLGlCQUFpQjtnQkFDcEIseUVBQXlFO2dCQUN6RSx5QkFBeUI7Z0JBQ3pCLE9BQU8sY0FBYyxDQUFDLGVBQWUsQ0FBQztZQUN4QztnQkFDRSxPQUFPLGNBQWMsQ0FBQyxJQUFJLENBQUM7UUFDL0IsQ0FBQztJQUNILENBQUM7SUFFRCxJQUFJLGNBQWM7UUFDaEIsT0FBTyxDQUFDLGNBQWMsQ0FBQyxjQUFjLEVBQUUsY0FBYyxDQUFDLHdCQUF3QixDQUFDLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsQ0FBQztJQUNoSCxDQUFDO0lBRU0sUUFBUTtRQUNiLE9BQU8sSUFBSSxDQUFDLElBQUksR0FBRyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEtBQUssSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUM5RCxDQUFDO0NBQ0Y7QUFyRUQsa0NBcUVDO0FBRUQ7O0dBRUc7QUFDSCxJQUFZLGNBVVg7QUFWRCxXQUFZLGNBQWM7SUFDeEIsdUVBQWMsQ0FBQTtJQUNkLDJGQUF3QixDQUFBO0lBQ3hCOzs7O09BSUc7SUFDSCx5RUFBZSxDQUFBO0lBQ2YsbURBQUksQ0FBQTtBQUNOLENBQUMsRUFWVyxjQUFjLDhCQUFkLGNBQWMsUUFVekIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBBV1MgZnJvbSAnYXdzLXNkayc7XG5cbi8qKlxuICogQSB1dGlsaXR5IGNsYXNzIHRvIGluc3BlY3QgQ2xvdWRGb3JtYXRpb24gc3RhY2sgc3RhdHVzZXMuXG4gKlxuICogQHNlZSBodHRwczovL2RvY3MuYXdzLmFtYXpvbi5jb20vQVdTQ2xvdWRGb3JtYXRpb24vbGF0ZXN0L1VzZXJHdWlkZS91c2luZy1jZm4tZGVzY3JpYmluZy1zdGFja3MuaHRtbFxuICovXG5leHBvcnQgY2xhc3MgU3RhY2tTdGF0dXMge1xuICBwdWJsaWMgc3RhdGljIGZyb21TdGFja0Rlc2NyaXB0aW9uKGRlc2NyaXB0aW9uOiBBV1MuQ2xvdWRGb3JtYXRpb24uU3RhY2spIHtcbiAgICByZXR1cm4gbmV3IFN0YWNrU3RhdHVzKGRlc2NyaXB0aW9uLlN0YWNrU3RhdHVzLCBkZXNjcmlwdGlvbi5TdGFja1N0YXR1c1JlYXNvbik7XG4gIH1cblxuICBjb25zdHJ1Y3RvcihwdWJsaWMgcmVhZG9ubHkgbmFtZTogc3RyaW5nLCBwdWJsaWMgcmVhZG9ubHkgcmVhc29uPzogc3RyaW5nKSB7fVxuXG4gIGdldCBpc0NyZWF0aW9uRmFpbHVyZSgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5uYW1lID09PSAnUk9MTEJBQ0tfQ09NUExFVEUnXG4gICAgICB8fCB0aGlzLm5hbWUgPT09ICdST0xMQkFDS19GQUlMRUQnO1xuICB9XG5cbiAgZ2V0IGlzRGVsZXRlZCgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5uYW1lLnN0YXJ0c1dpdGgoJ0RFTEVURV8nKTtcbiAgfVxuXG4gIGdldCBpc0ZhaWx1cmUoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMubmFtZS5lbmRzV2l0aCgnRkFJTEVEJyk7XG4gIH1cblxuICBnZXQgaXNJblByb2dyZXNzKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLm5hbWUuZW5kc1dpdGgoJ19JTl9QUk9HUkVTUycpICYmICF0aGlzLmlzUmV2aWV3SW5Qcm9ncmVzcztcbiAgfVxuXG4gIGdldCBpc1Jldmlld0luUHJvZ3Jlc3MoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMubmFtZSA9PT0gJ1JFVklFV19JTl9QUk9HUkVTUyc7XG4gIH1cblxuICBnZXQgaXNOb3RGb3VuZCgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5uYW1lID09PSAnTk9UX0ZPVU5EJztcbiAgfVxuXG4gIGdldCBpc0RlcGxveVN1Y2Nlc3MoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuICF0aGlzLmlzTm90Rm91bmQgJiYgKHRoaXMubmFtZSA9PT0gJ0NSRUFURV9DT01QTEVURScgfHwgdGhpcy5uYW1lID09PSAnVVBEQVRFX0NPTVBMRVRFJyB8fCB0aGlzLm5hbWUgPT09ICdJTVBPUlRfQ09NUExFVEUnKTtcbiAgfVxuXG4gIGdldCBpc1JvbGxiYWNrU3VjY2VzcygpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5uYW1lID09PSAnUk9MTEJBQ0tfQ09NUExFVEUnXG4gICAgICB8fCB0aGlzLm5hbWUgPT09ICdVUERBVEVfUk9MTEJBQ0tfQ09NUExFVEUnO1xuICB9XG5cbiAgLyoqXG4gICAqIFdoZXRoZXIgdGhlIHN0YWNrIGlzIGluIGEgcGF1c2VkIHN0YXRlIGR1ZSB0byBgLS1uby1yb2xsYmFja2AuXG4gICAqXG4gICAqIFRoZSBwb3NzaWJsZSBhY3Rpb25zIGhlcmUgYXJlIHJldHJ5aW5nIGEgbmV3IGAtLW5vLXJvbGxiYWNrYCBkZXBsb3ltZW50LCBvciBpbml0aWF0aW5nIGEgcm9sbGJhY2suXG4gICAqL1xuICBnZXQgcm9sbGJhY2tDaG9pY2UoKTogUm9sbGJhY2tDaG9pY2Uge1xuICAgIHN3aXRjaCAodGhpcy5uYW1lKSB7XG4gICAgICBjYXNlICdDUkVBVEVfRkFJTEVEJzpcbiAgICAgIGNhc2UgJ1VQREFURV9GQUlMRUQnOlxuICAgICAgICByZXR1cm4gUm9sbGJhY2tDaG9pY2UuU1RBUlRfUk9MTEJBQ0s7XG4gICAgICBjYXNlICdVUERBVEVfUk9MTEJBQ0tfRkFJTEVEJzpcbiAgICAgICAgcmV0dXJuIFJvbGxiYWNrQ2hvaWNlLkNPTlRJTlVFX1VQREFURV9ST0xMQkFDSztcbiAgICAgIGNhc2UgJ1JPTExCQUNLX0ZBSUxFRCc6XG4gICAgICAgIC8vIFVuZm9ydHVuYXRlbHkgdGhlcmUgaXMgbm8gb3B0aW9uIHRvIGNvbnRpbnVlIGEgZmFpbGVkIHJvbGxiYWNrIHdpdGhvdXRcbiAgICAgICAgLy8gYSBzdGFibGUgdGFyZ2V0IHN0YXRlLlxuICAgICAgICByZXR1cm4gUm9sbGJhY2tDaG9pY2UuUk9MTEJBQ0tfRkFJTEVEO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIFJvbGxiYWNrQ2hvaWNlLk5PTkU7XG4gICAgfVxuICB9XG5cbiAgZ2V0IGlzUm9sbGJhY2thYmxlKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiBbUm9sbGJhY2tDaG9pY2UuU1RBUlRfUk9MTEJBQ0ssIFJvbGxiYWNrQ2hvaWNlLkNPTlRJTlVFX1VQREFURV9ST0xMQkFDS10uaW5jbHVkZXModGhpcy5yb2xsYmFja0Nob2ljZSk7XG4gIH1cblxuICBwdWJsaWMgdG9TdHJpbmcoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gdGhpcy5uYW1lICsgKHRoaXMucmVhc29uID8gYCAoJHt0aGlzLnJlYXNvbn0pYCA6ICcnKTtcbiAgfVxufVxuXG4vKipcbiAqIERlc2NyaWJlIHRoZSBjdXJyZW50IHJvbGxiYWNrIG9wdGlvbnMgZm9yIHRoaXMgc3RhdGVcbiAqL1xuZXhwb3J0IGVudW0gUm9sbGJhY2tDaG9pY2Uge1xuICBTVEFSVF9ST0xMQkFDSyxcbiAgQ09OVElOVUVfVVBEQVRFX1JPTExCQUNLLFxuICAvKipcbiAgICogQSBzaWduIHRoYXQgc3RhY2sgY3JlYXRpb24gQU5EIGl0cyByb2xsYmFjayBoYXZlIGZhaWxlZC5cbiAgICpcbiAgICogVGhlcmUgaXMgbm8gd2F5IHRvIHJlY292ZXIgZnJvbSB0aGlzLCBvdGhlciB0aGFuIHJlY3JlYXRpbmcgdGhlIHN0YWNrLlxuICAgKi9cbiAgUk9MTEJBQ0tfRkFJTEVELFxuICBOT05FLFxufSJdfQ==