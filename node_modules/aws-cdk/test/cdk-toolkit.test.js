"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
// We need to mock the chokidar library, used by 'cdk watch'
const mockChokidarWatcherOn = jest.fn();
const fakeChokidarWatcher = {
    on: mockChokidarWatcherOn,
};
const fakeChokidarWatcherOn = {
    get readyCallback() {
        expect(mockChokidarWatcherOn.mock.calls.length).toBeGreaterThanOrEqual(1);
        // The call to the first 'watcher.on()' in the production code is the one we actually want here.
        // This is a pretty fragile, but at least with this helper class,
        // we would have to change it only in one place if it ever breaks
        const firstCall = mockChokidarWatcherOn.mock.calls[0];
        // let's make sure the first argument is the 'ready' event,
        // just to be double safe
        expect(firstCall[0]).toBe('ready');
        // the second argument is the callback
        return firstCall[1];
    },
    get fileEventCallback() {
        expect(mockChokidarWatcherOn.mock.calls.length).toBeGreaterThanOrEqual(2);
        const secondCall = mockChokidarWatcherOn.mock.calls[1];
        // let's make sure the first argument is not the 'ready' event,
        // just to be double safe
        expect(secondCall[0]).not.toBe('ready');
        // the second argument is the callback
        return secondCall[1];
    },
};
const mockChokidarWatch = jest.fn();
jest.mock('chokidar', () => ({
    watch: mockChokidarWatch,
}));
const fakeChokidarWatch = {
    get includeArgs() {
        expect(mockChokidarWatch.mock.calls.length).toBe(1);
        // the include args are the first parameter to the 'watch()' call
        return mockChokidarWatch.mock.calls[0][0];
    },
    get excludeArgs() {
        expect(mockChokidarWatch.mock.calls.length).toBe(1);
        // the ignore args are a property of the second parameter to the 'watch()' call
        const chokidarWatchOpts = mockChokidarWatch.mock.calls[0][1];
        return chokidarWatchOpts.ignored;
    },
};
const mockData = jest.fn();
jest.mock('../lib/logging', () => ({
    ...jest.requireActual('../lib/logging'),
    data: mockData,
}));
jest.setTimeout(30000);
const os = require("os");
const path = require("path");
const cxschema = require("@aws-cdk/cloud-assembly-schema");
const cloud_assembly_schema_1 = require("@aws-cdk/cloud-assembly-schema");
const cxapi = require("@aws-cdk/cx-api");
const fs = require("fs-extra");
const promptly = require("promptly");
const util_1 = require("./util");
const mock_sdk_1 = require("./util/mock-sdk");
const bootstrap_1 = require("../lib/api/bootstrap");
const deployments_1 = require("../lib/api/deployments");
const common_1 = require("../lib/api/hotswap/common");
const cdk_toolkit_1 = require("../lib/cdk-toolkit");
const diff_1 = require("../lib/diff");
const settings_1 = require("../lib/settings");
const util_2 = require("../lib/util");
(0, cdk_toolkit_1.markTesting)();
process.env.CXAPI_DISABLE_SELECT_BY_ID = '1';
let cloudExecutable;
let bootstrapper;
let stderrMock;
beforeEach(() => {
    jest.resetAllMocks();
    mockChokidarWatch.mockReturnValue(fakeChokidarWatcher);
    // on() in chokidar's Watcher returns 'this'
    mockChokidarWatcherOn.mockReturnValue(fakeChokidarWatcher);
    bootstrapper = (0, util_1.instanceMockFrom)(bootstrap_1.Bootstrapper);
    bootstrapper.bootstrapEnvironment.mockResolvedValue({ noOp: false, outputs: {} });
    cloudExecutable = new util_1.MockCloudExecutable({
        stacks: [
            MockStack.MOCK_STACK_A,
            MockStack.MOCK_STACK_B,
        ],
        nestedAssemblies: [{
                stacks: [MockStack.MOCK_STACK_C],
            }],
    });
    stderrMock = jest.spyOn(process.stderr, 'write').mockImplementation(() => { return true; });
});
function defaultToolkitSetup() {
    return new cdk_toolkit_1.CdkToolkit({
        cloudExecutable,
        configuration: cloudExecutable.configuration,
        sdkProvider: cloudExecutable.sdkProvider,
        deployments: new FakeCloudFormation({
            'Test-Stack-A': { Foo: 'Bar' },
            'Test-Stack-B': { Baz: 'Zinga!' },
            'Test-Stack-C': { Baz: 'Zinga!' },
        }),
    });
}
describe('readCurrentTemplate', () => {
    let template;
    let mockForEnvironment = jest.fn();
    let mockCloudExecutable;
    beforeEach(() => {
        template = {
            Resources: {
                Func: {
                    Type: 'AWS::Lambda::Function',
                    Properties: {
                        Key: 'Value',
                    },
                },
            },
        };
        mockCloudExecutable = new util_1.MockCloudExecutable({
            stacks: [
                {
                    stackName: 'Test-Stack-C',
                    template,
                    properties: {
                        assumeRoleArn: 'bloop:${AWS::Region}:${AWS::AccountId}',
                        lookupRole: {
                            arn: 'bloop-lookup:${AWS::Region}:${AWS::AccountId}',
                            requiresBootstrapStackVersion: 5,
                            bootstrapStackVersionSsmParameter: '/bootstrap/parameter',
                        },
                    },
                },
                {
                    stackName: 'Test-Stack-A',
                    template,
                    properties: {
                        assumeRoleArn: 'bloop:${AWS::Region}:${AWS::AccountId}',
                    },
                },
            ],
        });
        mockForEnvironment = jest.fn().mockImplementation(() => {
            return { sdk: mockCloudExecutable.sdkProvider.sdk, didAssumeRole: true };
        });
        mockCloudExecutable.sdkProvider.forEnvironment = mockForEnvironment;
        mockCloudExecutable.sdkProvider.stubCloudFormation({
            getTemplate() {
                return {
                    TemplateBody: JSON.stringify(template),
                };
            },
            describeStacks() {
                return {
                    Stacks: [
                        {
                            StackName: 'Test-Stack-C',
                            StackStatus: 'CREATE_COMPLETE',
                            CreationTime: new Date(),
                        },
                        {
                            StackName: 'Test-Stack-A',
                            StackStatus: 'CREATE_COMPLETE',
                            CreationTime: new Date(),
                        },
                    ],
                };
            },
        });
    });
    test('lookup role is used', async () => {
        // GIVEN
        let requestedParameterName;
        mockCloudExecutable.sdkProvider.stubSSM({
            getParameter(request) {
                requestedParameterName = request.Name;
                return {
                    Parameter: {
                        Value: '6',
                    },
                };
            },
        });
        const cdkToolkit = new cdk_toolkit_1.CdkToolkit({
            cloudExecutable: mockCloudExecutable,
            configuration: mockCloudExecutable.configuration,
            sdkProvider: mockCloudExecutable.sdkProvider,
            deployments: new deployments_1.Deployments({ sdkProvider: mockCloudExecutable.sdkProvider }),
        });
        // WHEN
        await cdkToolkit.deploy({
            selector: { patterns: ['Test-Stack-C'] },
            hotswap: common_1.HotswapMode.FULL_DEPLOYMENT,
        });
        // THEN
        expect(requestedParameterName).toEqual('/bootstrap/parameter');
        expect(mockForEnvironment.mock.calls.length).toEqual(2);
        expect(mockForEnvironment.mock.calls[0][2]).toEqual({
            assumeRoleArn: 'bloop-lookup:here:123456789012',
        });
    });
    test('fallback to deploy role if bootstrap stack version is not valid', async () => {
        // GIVEN
        let requestedParameterName;
        mockCloudExecutable.sdkProvider.stubSSM({
            getParameter(request) {
                requestedParameterName = request.Name;
                return {
                    Parameter: {
                        Value: '1',
                    },
                };
            },
        });
        const cdkToolkit = new cdk_toolkit_1.CdkToolkit({
            cloudExecutable: mockCloudExecutable,
            configuration: mockCloudExecutable.configuration,
            sdkProvider: mockCloudExecutable.sdkProvider,
            deployments: new deployments_1.Deployments({ sdkProvider: mockCloudExecutable.sdkProvider }),
        });
        // WHEN
        await cdkToolkit.deploy({
            selector: { patterns: ['Test-Stack-C'] },
            hotswap: common_1.HotswapMode.FULL_DEPLOYMENT,
        });
        // THEN
        expect((0, util_2.flatten)(stderrMock.mock.calls)).toEqual(expect.arrayContaining([
            expect.stringContaining("Bootstrap stack version '5' is required, found version '1'. To get rid of this error, please upgrade to bootstrap version >= 5"),
        ]));
        expect(requestedParameterName).toEqual('/bootstrap/parameter');
        expect(mockForEnvironment.mock.calls.length).toEqual(3);
        expect(mockForEnvironment.mock.calls[0][2]).toEqual({
            assumeRoleArn: 'bloop-lookup:here:123456789012',
        });
        expect(mockForEnvironment.mock.calls[1][2]).toEqual({
            assumeRoleArn: 'bloop:here:123456789012',
        });
    });
    test('fallback to deploy role if bootstrap version parameter not found', async () => {
        // GIVEN
        mockCloudExecutable.sdkProvider.stubSSM({
            getParameter() {
                const e = new Error('not found');
                e.code = e.name = 'ParameterNotFound';
                throw e;
            },
        });
        const cdkToolkit = new cdk_toolkit_1.CdkToolkit({
            cloudExecutable: mockCloudExecutable,
            configuration: mockCloudExecutable.configuration,
            sdkProvider: mockCloudExecutable.sdkProvider,
            deployments: new deployments_1.Deployments({ sdkProvider: mockCloudExecutable.sdkProvider }),
        });
        // WHEN
        await cdkToolkit.deploy({
            selector: { patterns: ['Test-Stack-C'] },
            hotswap: common_1.HotswapMode.FULL_DEPLOYMENT,
        });
        // THEN
        expect((0, util_2.flatten)(stderrMock.mock.calls)).toEqual(expect.arrayContaining([
            expect.stringMatching(/SSM parameter.*not found./),
        ]));
        expect(mockForEnvironment.mock.calls.length).toEqual(3);
        expect(mockForEnvironment.mock.calls[0][2]).toEqual({
            assumeRoleArn: 'bloop-lookup:here:123456789012',
        });
        expect(mockForEnvironment.mock.calls[1][2]).toEqual({
            assumeRoleArn: 'bloop:here:123456789012',
        });
    });
    test('fallback to deploy role if forEnvironment throws', async () => {
        // GIVEN
        // throw error first for the 'prepareSdkWithLookupRoleFor' call and succeed for the rest
        mockForEnvironment = jest.fn().mockImplementationOnce(() => { throw new Error('TheErrorThatGetsThrown'); })
            .mockImplementation(() => { return { sdk: mockCloudExecutable.sdkProvider.sdk, didAssumeRole: true }; });
        mockCloudExecutable.sdkProvider.forEnvironment = mockForEnvironment;
        mockCloudExecutable.sdkProvider.stubSSM({
            getParameter() {
                return {};
            },
        });
        const cdkToolkit = new cdk_toolkit_1.CdkToolkit({
            cloudExecutable: mockCloudExecutable,
            configuration: mockCloudExecutable.configuration,
            sdkProvider: mockCloudExecutable.sdkProvider,
            deployments: new deployments_1.Deployments({ sdkProvider: mockCloudExecutable.sdkProvider }),
        });
        // WHEN
        await cdkToolkit.deploy({
            selector: { patterns: ['Test-Stack-C'] },
            hotswap: common_1.HotswapMode.FULL_DEPLOYMENT,
        });
        // THEN
        expect(mockCloudExecutable.sdkProvider.sdk.ssm).not.toHaveBeenCalled();
        expect((0, util_2.flatten)(stderrMock.mock.calls)).toEqual(expect.arrayContaining([
            expect.stringMatching(/TheErrorThatGetsThrown/),
        ]));
        expect(mockForEnvironment.mock.calls.length).toEqual(3);
        expect(mockForEnvironment.mock.calls[0][2]).toEqual({
            assumeRoleArn: 'bloop-lookup:here:123456789012',
        });
        expect(mockForEnvironment.mock.calls[1][2]).toEqual({
            assumeRoleArn: 'bloop:here:123456789012',
        });
    });
    test('dont lookup bootstrap version parameter if default credentials are used', async () => {
        // GIVEN
        mockForEnvironment = jest.fn().mockImplementation(() => { return { sdk: mockCloudExecutable.sdkProvider.sdk, didAssumeRole: false }; });
        mockCloudExecutable.sdkProvider.forEnvironment = mockForEnvironment;
        const cdkToolkit = new cdk_toolkit_1.CdkToolkit({
            cloudExecutable: mockCloudExecutable,
            configuration: mockCloudExecutable.configuration,
            sdkProvider: mockCloudExecutable.sdkProvider,
            deployments: new deployments_1.Deployments({ sdkProvider: mockCloudExecutable.sdkProvider }),
        });
        mockCloudExecutable.sdkProvider.stubSSM({
            getParameter() {
                return {};
            },
        });
        // WHEN
        await cdkToolkit.deploy({
            selector: { patterns: ['Test-Stack-C'] },
            hotswap: common_1.HotswapMode.FULL_DEPLOYMENT,
        });
        // THEN
        expect((0, util_2.flatten)(stderrMock.mock.calls)).toEqual(expect.arrayContaining([
            expect.stringMatching(/Lookup role.*was not assumed. Proceeding with default credentials./),
        ]));
        expect(mockCloudExecutable.sdkProvider.sdk.ssm).not.toHaveBeenCalled();
        expect(mockForEnvironment.mock.calls[0][2]).toEqual({
            assumeRoleArn: 'bloop-lookup:here:123456789012',
        });
        expect(mockForEnvironment.mock.calls[1][2]).toEqual({
            assumeRoleArn: 'bloop:here:123456789012',
        });
    });
    test('do not print warnings if lookup role not provided in stack artifact', async () => {
        // GIVEN
        mockCloudExecutable.sdkProvider.stubSSM({
            getParameter() {
                return {};
            },
        });
        const cdkToolkit = new cdk_toolkit_1.CdkToolkit({
            cloudExecutable: mockCloudExecutable,
            configuration: mockCloudExecutable.configuration,
            sdkProvider: mockCloudExecutable.sdkProvider,
            deployments: new deployments_1.Deployments({ sdkProvider: mockCloudExecutable.sdkProvider }),
        });
        // WHEN
        await cdkToolkit.deploy({
            selector: { patterns: ['Test-Stack-A'] },
            hotswap: common_1.HotswapMode.FULL_DEPLOYMENT,
        });
        // THEN
        expect((0, util_2.flatten)(stderrMock.mock.calls)).not.toEqual(expect.arrayContaining([
            expect.stringMatching(/Could not assume/),
            expect.stringMatching(/please upgrade to bootstrap version/),
        ]));
        expect(mockCloudExecutable.sdkProvider.sdk.ssm).not.toHaveBeenCalled();
        expect(mockForEnvironment.mock.calls.length).toEqual(2);
        expect(mockForEnvironment.mock.calls[0][2]).toEqual({
            assumeRoleArn: undefined,
            assumeRoleExternalId: undefined,
        });
    });
});
describe('bootstrap', () => {
    test('accepts qualifier from context', async () => {
        // GIVEN
        const toolkit = defaultToolkitSetup();
        const configuration = new settings_1.Configuration();
        configuration.context.set('@aws-cdk/core:bootstrapQualifier', 'abcde');
        // WHEN
        await toolkit.bootstrap(['aws://56789/south-pole'], bootstrapper, {
            parameters: {
                qualifier: configuration.context.get('@aws-cdk/core:bootstrapQualifier'),
            },
        });
        // THEN
        expect(bootstrapper.bootstrapEnvironment).toHaveBeenCalledWith(expect.anything(), expect.anything(), {
            parameters: {
                qualifier: 'abcde',
            },
        });
    });
});
describe('deploy', () => {
    test('fails when no valid stack names are given', async () => {
        // GIVEN
        const toolkit = defaultToolkitSetup();
        // WHEN
        await expect(() => toolkit.deploy({
            selector: { patterns: ['Test-Stack-D'] },
            hotswap: common_1.HotswapMode.FULL_DEPLOYMENT,
        })).rejects.toThrow('No stacks match the name(s) Test-Stack-D');
    });
    describe('with hotswap deployment', () => {
        test("passes through the 'hotswap' option to CloudFormationDeployments.deployStack()", async () => {
            // GIVEN
            const mockCfnDeployments = (0, util_1.instanceMockFrom)(deployments_1.Deployments);
            mockCfnDeployments.deployStack.mockReturnValue(Promise.resolve({
                type: 'did-deploy-stack',
                noOp: false,
                outputs: {},
                stackArn: 'stackArn',
                stackArtifact: (0, util_1.instanceMockFrom)(cxapi.CloudFormationStackArtifact),
            }));
            const cdkToolkit = new cdk_toolkit_1.CdkToolkit({
                cloudExecutable,
                configuration: cloudExecutable.configuration,
                sdkProvider: cloudExecutable.sdkProvider,
                deployments: mockCfnDeployments,
            });
            // WHEN
            await cdkToolkit.deploy({
                selector: { patterns: ['Test-Stack-A-Display-Name'] },
                requireApproval: diff_1.RequireApproval.Never,
                hotswap: common_1.HotswapMode.FALL_BACK,
            });
            // THEN
            expect(mockCfnDeployments.deployStack).toHaveBeenCalledWith(expect.objectContaining({
                hotswap: common_1.HotswapMode.FALL_BACK,
            }));
        });
    });
    describe('makes correct CloudFormation calls', () => {
        test('without options', async () => {
            // GIVEN
            const toolkit = defaultToolkitSetup();
            // WHEN
            await toolkit.deploy({
                selector: { patterns: ['Test-Stack-A', 'Test-Stack-B'] },
                hotswap: common_1.HotswapMode.FULL_DEPLOYMENT,
            });
        });
        test('with stacks all stacks specified as double wildcard', async () => {
            // GIVEN
            const toolkit = defaultToolkitSetup();
            // WHEN
            await toolkit.deploy({
                selector: { patterns: ['**'] },
                hotswap: common_1.HotswapMode.FULL_DEPLOYMENT,
            });
        });
        test('with one stack specified', async () => {
            // GIVEN
            const toolkit = defaultToolkitSetup();
            // WHEN
            await toolkit.deploy({
                selector: { patterns: ['Test-Stack-A-Display-Name'] },
                hotswap: common_1.HotswapMode.FULL_DEPLOYMENT,
            });
        });
        test('with stacks all stacks specified as wildcard', async () => {
            // GIVEN
            const toolkit = defaultToolkitSetup();
            // WHEN
            await toolkit.deploy({
                selector: { patterns: ['*'] },
                hotswap: common_1.HotswapMode.FULL_DEPLOYMENT,
            });
        });
        describe('sns notification arns', () => {
            beforeEach(() => {
                cloudExecutable = new util_1.MockCloudExecutable({
                    stacks: [
                        MockStack.MOCK_STACK_A,
                        MockStack.MOCK_STACK_B,
                        MockStack.MOCK_STACK_WITH_NOTIFICATION_ARNS,
                        MockStack.MOCK_STACK_WITH_BAD_NOTIFICATION_ARNS,
                    ],
                });
            });
            test('with sns notification arns as options', async () => {
                // GIVEN
                const notificationArns = [
                    'arn:aws:sns:us-east-2:444455556666:MyTopic',
                    'arn:aws:sns:eu-west-1:111155556666:my-great-topic',
                ];
                const toolkit = new cdk_toolkit_1.CdkToolkit({
                    cloudExecutable,
                    configuration: cloudExecutable.configuration,
                    sdkProvider: cloudExecutable.sdkProvider,
                    deployments: new FakeCloudFormation({
                        'Test-Stack-A': { Foo: 'Bar' },
                    }, notificationArns),
                });
                // WHEN
                await toolkit.deploy({
                    // Stacks should be selected by their hierarchical ID, which is their displayName, not by the stack ID.
                    selector: { patterns: ['Test-Stack-A-Display-Name'] },
                    notificationArns,
                    hotswap: common_1.HotswapMode.FULL_DEPLOYMENT,
                });
            });
            test('fail with incorrect sns notification arns as options', async () => {
                // GIVEN
                const notificationArns = ['arn:::cfn-my-cool-topic'];
                const toolkit = new cdk_toolkit_1.CdkToolkit({
                    cloudExecutable,
                    configuration: cloudExecutable.configuration,
                    sdkProvider: cloudExecutable.sdkProvider,
                    deployments: new FakeCloudFormation({
                        'Test-Stack-A': { Foo: 'Bar' },
                    }, notificationArns),
                });
                // WHEN
                await expect(() => toolkit.deploy({
                    // Stacks should be selected by their hierarchical ID, which is their displayName, not by the stack ID.
                    selector: { patterns: ['Test-Stack-A-Display-Name'] },
                    notificationArns,
                    hotswap: common_1.HotswapMode.FULL_DEPLOYMENT,
                })).rejects.toThrow('Notification arn arn:::cfn-my-cool-topic is not a valid arn for an SNS topic');
            });
            test('with sns notification arns in the executable', async () => {
                // GIVEN
                const expectedNotificationArns = [
                    'arn:aws:sns:bermuda-triangle-1337:123456789012:MyTopic',
                ];
                const toolkit = new cdk_toolkit_1.CdkToolkit({
                    cloudExecutable,
                    configuration: cloudExecutable.configuration,
                    sdkProvider: cloudExecutable.sdkProvider,
                    deployments: new FakeCloudFormation({
                        'Test-Stack-Notification-Arns': { Foo: 'Bar' },
                    }, expectedNotificationArns),
                });
                // WHEN
                await toolkit.deploy({
                    selector: { patterns: ['Test-Stack-Notification-Arns'] },
                    hotswap: common_1.HotswapMode.FULL_DEPLOYMENT,
                });
            });
            test('fail with incorrect sns notification arns in the executable', async () => {
                // GIVEN
                const toolkit = new cdk_toolkit_1.CdkToolkit({
                    cloudExecutable,
                    configuration: cloudExecutable.configuration,
                    sdkProvider: cloudExecutable.sdkProvider,
                    deployments: new FakeCloudFormation({
                        'Test-Stack-Bad-Notification-Arns': { Foo: 'Bar' },
                    }),
                });
                // WHEN
                await expect(() => toolkit.deploy({
                    selector: { patterns: ['Test-Stack-Bad-Notification-Arns'] },
                    hotswap: common_1.HotswapMode.FULL_DEPLOYMENT,
                })).rejects.toThrow('Notification arn arn:1337:123456789012:sns:bad is not a valid arn for an SNS topic');
            });
            test('with sns notification arns in the executable and as options', async () => {
                // GIVEN
                const notificationArns = [
                    'arn:aws:sns:us-east-2:444455556666:MyTopic',
                    'arn:aws:sns:eu-west-1:111155556666:my-great-topic',
                ];
                const expectedNotificationArns = notificationArns.concat(['arn:aws:sns:bermuda-triangle-1337:123456789012:MyTopic']);
                const toolkit = new cdk_toolkit_1.CdkToolkit({
                    cloudExecutable,
                    configuration: cloudExecutable.configuration,
                    sdkProvider: cloudExecutable.sdkProvider,
                    deployments: new FakeCloudFormation({
                        'Test-Stack-Notification-Arns': { Foo: 'Bar' },
                    }, expectedNotificationArns),
                });
                // WHEN
                await toolkit.deploy({
                    selector: { patterns: ['Test-Stack-Notification-Arns'] },
                    notificationArns,
                    hotswap: common_1.HotswapMode.FULL_DEPLOYMENT,
                });
            });
            test('fail with incorrect sns notification arns in the executable and incorrect sns notification arns as options', async () => {
                // GIVEN
                const notificationArns = ['arn:::cfn-my-cool-topic'];
                const toolkit = new cdk_toolkit_1.CdkToolkit({
                    cloudExecutable,
                    configuration: cloudExecutable.configuration,
                    sdkProvider: cloudExecutable.sdkProvider,
                    deployments: new FakeCloudFormation({
                        'Test-Stack-Bad-Notification-Arns': { Foo: 'Bar' },
                    }, notificationArns),
                });
                // WHEN
                await expect(() => toolkit.deploy({
                    selector: { patterns: ['Test-Stack-Bad-Notification-Arns'] },
                    notificationArns,
                    hotswap: common_1.HotswapMode.FULL_DEPLOYMENT,
                })).rejects.toThrow('Notification arn arn:::cfn-my-cool-topic is not a valid arn for an SNS topic');
            });
            test('fail with incorrect sns notification arns in the executable and correct sns notification arns as options', async () => {
                // GIVEN
                const notificationArns = ['arn:aws:sns:bermuda-triangle-1337:123456789012:MyTopic'];
                const toolkit = new cdk_toolkit_1.CdkToolkit({
                    cloudExecutable,
                    configuration: cloudExecutable.configuration,
                    sdkProvider: cloudExecutable.sdkProvider,
                    deployments: new FakeCloudFormation({
                        'Test-Stack-Bad-Notification-Arns': { Foo: 'Bar' },
                    }, notificationArns),
                });
                // WHEN
                await expect(() => toolkit.deploy({
                    selector: { patterns: ['Test-Stack-Bad-Notification-Arns'] },
                    notificationArns,
                    hotswap: common_1.HotswapMode.FULL_DEPLOYMENT,
                })).rejects.toThrow('Notification arn arn:1337:123456789012:sns:bad is not a valid arn for an SNS topic');
            });
            test('fail with correct sns notification arns in the executable and incorrect sns notification arns as options', async () => {
                // GIVEN
                const notificationArns = ['arn:::cfn-my-cool-topic'];
                const toolkit = new cdk_toolkit_1.CdkToolkit({
                    cloudExecutable,
                    configuration: cloudExecutable.configuration,
                    sdkProvider: cloudExecutable.sdkProvider,
                    deployments: new FakeCloudFormation({
                        'Test-Stack-Notification-Arns': { Foo: 'Bar' },
                    }, notificationArns),
                });
                // WHEN
                await expect(() => toolkit.deploy({
                    selector: { patterns: ['Test-Stack-Notification-Arns'] },
                    notificationArns,
                    hotswap: common_1.HotswapMode.FULL_DEPLOYMENT,
                })).rejects.toThrow('Notification arn arn:::cfn-my-cool-topic is not a valid arn for an SNS topic');
            });
        });
    });
    test('globless bootstrap uses environment without question', async () => {
        // GIVEN
        const toolkit = defaultToolkitSetup();
        // WHEN
        await toolkit.bootstrap(['aws://56789/south-pole'], bootstrapper, {});
        // THEN
        expect(bootstrapper.bootstrapEnvironment).toHaveBeenCalledWith({
            account: '56789',
            region: 'south-pole',
            name: 'aws://56789/south-pole',
        }, expect.anything(), expect.anything());
        expect(bootstrapper.bootstrapEnvironment).toHaveBeenCalledTimes(1);
    });
    test('globby bootstrap uses whats in the stacks', async () => {
        // GIVEN
        const toolkit = defaultToolkitSetup();
        cloudExecutable.configuration.settings.set(['app'], 'something');
        // WHEN
        await toolkit.bootstrap(['aws://*/bermuda-triangle-1'], bootstrapper, {});
        // THEN
        expect(bootstrapper.bootstrapEnvironment).toHaveBeenCalledWith({
            account: '123456789012',
            region: 'bermuda-triangle-1',
            name: 'aws://123456789012/bermuda-triangle-1',
        }, expect.anything(), expect.anything());
        expect(bootstrapper.bootstrapEnvironment).toHaveBeenCalledTimes(1);
    });
    test('bootstrap can be invoked without the --app argument', async () => {
        // GIVEN
        cloudExecutable.configuration.settings.clear();
        const mockSynthesize = jest.fn();
        cloudExecutable.synthesize = mockSynthesize;
        const toolkit = defaultToolkitSetup();
        // WHEN
        await toolkit.bootstrap(['aws://123456789012/west-pole'], bootstrapper, {});
        // THEN
        expect(bootstrapper.bootstrapEnvironment).toHaveBeenCalledWith({
            account: '123456789012',
            region: 'west-pole',
            name: 'aws://123456789012/west-pole',
        }, expect.anything(), expect.anything());
        expect(bootstrapper.bootstrapEnvironment).toHaveBeenCalledTimes(1);
        expect(cloudExecutable.hasApp).toEqual(false);
        expect(mockSynthesize).not.toHaveBeenCalled();
    });
});
describe('destroy', () => {
    test('destroy correct stack', async () => {
        const toolkit = defaultToolkitSetup();
        expect(() => {
            return toolkit.destroy({
                selector: { patterns: ['Test-Stack-A/Test-Stack-C'] },
                exclusively: true,
                force: true,
                fromDeploy: true,
            });
        }).resolves;
    });
});
describe('watch', () => {
    test("fails when no 'watch' settings are found", async () => {
        const toolkit = defaultToolkitSetup();
        await expect(() => {
            return toolkit.watch({
                selector: { patterns: [] },
                hotswap: common_1.HotswapMode.HOTSWAP_ONLY,
            });
        }).rejects.toThrow("Cannot use the 'watch' command without specifying at least one directory to monitor. " +
            'Make sure to add a "watch" key to your cdk.json');
    });
    test('observes only the root directory by default', async () => {
        cloudExecutable.configuration.settings.set(['watch'], {});
        const toolkit = defaultToolkitSetup();
        await toolkit.watch({
            selector: { patterns: [] },
            hotswap: common_1.HotswapMode.HOTSWAP_ONLY,
        });
        const includeArgs = fakeChokidarWatch.includeArgs;
        expect(includeArgs.length).toBe(1);
    });
    test("allows providing a single string in 'watch.include'", async () => {
        cloudExecutable.configuration.settings.set(['watch'], {
            include: 'my-dir',
        });
        const toolkit = defaultToolkitSetup();
        await toolkit.watch({
            selector: { patterns: [] },
            hotswap: common_1.HotswapMode.HOTSWAP_ONLY,
        });
        expect(fakeChokidarWatch.includeArgs).toStrictEqual(['my-dir']);
    });
    test("allows providing an array of strings in 'watch.include'", async () => {
        cloudExecutable.configuration.settings.set(['watch'], {
            include: ['my-dir1', '**/my-dir2/*'],
        });
        const toolkit = defaultToolkitSetup();
        await toolkit.watch({
            selector: { patterns: [] },
            hotswap: common_1.HotswapMode.HOTSWAP_ONLY,
        });
        expect(fakeChokidarWatch.includeArgs).toStrictEqual(['my-dir1', '**/my-dir2/*']);
    });
    test('ignores the output dir, dot files, dot directories, and node_modules by default', async () => {
        cloudExecutable.configuration.settings.set(['watch'], {});
        cloudExecutable.configuration.settings.set(['output'], 'cdk.out');
        const toolkit = defaultToolkitSetup();
        await toolkit.watch({
            selector: { patterns: [] },
            hotswap: common_1.HotswapMode.HOTSWAP_ONLY,
        });
        expect(fakeChokidarWatch.excludeArgs).toStrictEqual([
            'cdk.out/**',
            '**/.*',
            '**/.*/**',
            '**/node_modules/**',
        ]);
    });
    test("allows providing a single string in 'watch.exclude'", async () => {
        cloudExecutable.configuration.settings.set(['watch'], {
            exclude: 'my-dir',
        });
        const toolkit = defaultToolkitSetup();
        await toolkit.watch({
            selector: { patterns: [] },
            hotswap: common_1.HotswapMode.HOTSWAP_ONLY,
        });
        const excludeArgs = fakeChokidarWatch.excludeArgs;
        expect(excludeArgs.length).toBe(5);
        expect(excludeArgs[0]).toBe('my-dir');
    });
    test("allows providing an array of strings in 'watch.exclude'", async () => {
        cloudExecutable.configuration.settings.set(['watch'], {
            exclude: ['my-dir1', '**/my-dir2'],
        });
        const toolkit = defaultToolkitSetup();
        await toolkit.watch({
            selector: { patterns: [] },
            hotswap: common_1.HotswapMode.HOTSWAP_ONLY,
        });
        const excludeArgs = fakeChokidarWatch.excludeArgs;
        expect(excludeArgs.length).toBe(6);
        expect(excludeArgs[0]).toBe('my-dir1');
        expect(excludeArgs[1]).toBe('**/my-dir2');
    });
    test('allows watching with deploy concurrency', async () => {
        cloudExecutable.configuration.settings.set(['watch'], {});
        const toolkit = defaultToolkitSetup();
        const cdkDeployMock = jest.fn();
        toolkit.deploy = cdkDeployMock;
        await toolkit.watch({
            selector: { patterns: [] },
            concurrency: 3,
            hotswap: common_1.HotswapMode.HOTSWAP_ONLY,
        });
        fakeChokidarWatcherOn.readyCallback();
        expect(cdkDeployMock).toBeCalledWith(expect.objectContaining({ concurrency: 3 }));
    });
    describe.each([common_1.HotswapMode.FALL_BACK, common_1.HotswapMode.HOTSWAP_ONLY])('%p mode', (hotswapMode) => {
        test('passes through the correct hotswap mode to deployStack()', async () => {
            cloudExecutable.configuration.settings.set(['watch'], {});
            const toolkit = defaultToolkitSetup();
            const cdkDeployMock = jest.fn();
            toolkit.deploy = cdkDeployMock;
            await toolkit.watch({ selector: { patterns: [] }, hotswap: hotswapMode });
            fakeChokidarWatcherOn.readyCallback();
            expect(cdkDeployMock).toBeCalledWith(expect.objectContaining({ hotswap: hotswapMode }));
        });
    });
    test('respects HotswapMode.HOTSWAP_ONLY', async () => {
        cloudExecutable.configuration.settings.set(['watch'], {});
        const toolkit = defaultToolkitSetup();
        const cdkDeployMock = jest.fn();
        toolkit.deploy = cdkDeployMock;
        await toolkit.watch({ selector: { patterns: [] }, hotswap: common_1.HotswapMode.HOTSWAP_ONLY });
        fakeChokidarWatcherOn.readyCallback();
        expect(cdkDeployMock).toBeCalledWith(expect.objectContaining({ hotswap: common_1.HotswapMode.HOTSWAP_ONLY }));
    });
    test('respects HotswapMode.FALL_BACK', async () => {
        cloudExecutable.configuration.settings.set(['watch'], {});
        const toolkit = defaultToolkitSetup();
        const cdkDeployMock = jest.fn();
        toolkit.deploy = cdkDeployMock;
        await toolkit.watch({ selector: { patterns: [] }, hotswap: common_1.HotswapMode.FALL_BACK });
        fakeChokidarWatcherOn.readyCallback();
        expect(cdkDeployMock).toBeCalledWith(expect.objectContaining({ hotswap: common_1.HotswapMode.FALL_BACK }));
    });
    test('respects HotswapMode.FULL_DEPLOYMENT', async () => {
        cloudExecutable.configuration.settings.set(['watch'], {});
        const toolkit = defaultToolkitSetup();
        const cdkDeployMock = jest.fn();
        toolkit.deploy = cdkDeployMock;
        await toolkit.watch({ selector: { patterns: [] }, hotswap: common_1.HotswapMode.FULL_DEPLOYMENT });
        fakeChokidarWatcherOn.readyCallback();
        expect(cdkDeployMock).toBeCalledWith(expect.objectContaining({ hotswap: common_1.HotswapMode.FULL_DEPLOYMENT }));
    });
    describe('with file change events', () => {
        let toolkit;
        let cdkDeployMock;
        beforeEach(async () => {
            cloudExecutable.configuration.settings.set(['watch'], {});
            toolkit = defaultToolkitSetup();
            cdkDeployMock = jest.fn();
            toolkit.deploy = cdkDeployMock;
            await toolkit.watch({
                selector: { patterns: [] },
                hotswap: common_1.HotswapMode.HOTSWAP_ONLY,
            });
        });
        test("does not trigger a 'deploy' before the 'ready' event has fired", async () => {
            await fakeChokidarWatcherOn.fileEventCallback('add', 'my-file');
            expect(cdkDeployMock).not.toHaveBeenCalled();
        });
        describe("when the 'ready' event has already fired", () => {
            beforeEach(() => {
                // The ready callback triggers a deployment so each test
                // that uses this function will see 'cdkDeployMock' called
                // an additional time.
                fakeChokidarWatcherOn.readyCallback();
            });
            test("an initial 'deploy' is triggered, without any file changes", async () => {
                expect(cdkDeployMock).toHaveBeenCalledTimes(1);
            });
            test("does trigger a 'deploy' for a file change", async () => {
                await fakeChokidarWatcherOn.fileEventCallback('add', 'my-file');
                expect(cdkDeployMock).toHaveBeenCalledTimes(2);
            });
            test("triggers a 'deploy' twice for two file changes", async () => {
                // eslint-disable-next-line @cdklabs/promiseall-no-unbounded-parallelism
                await Promise.all([
                    fakeChokidarWatcherOn.fileEventCallback('add', 'my-file1'),
                    fakeChokidarWatcherOn.fileEventCallback('change', 'my-file2'),
                ]);
                expect(cdkDeployMock).toHaveBeenCalledTimes(3);
            });
            test("batches file changes that happen during 'deploy'", async () => {
                // eslint-disable-next-line @cdklabs/promiseall-no-unbounded-parallelism
                await Promise.all([
                    fakeChokidarWatcherOn.fileEventCallback('add', 'my-file1'),
                    fakeChokidarWatcherOn.fileEventCallback('change', 'my-file2'),
                    fakeChokidarWatcherOn.fileEventCallback('unlink', 'my-file3'),
                    fakeChokidarWatcherOn.fileEventCallback('add', 'my-file4'),
                ]);
                expect(cdkDeployMock).toHaveBeenCalledTimes(3);
            });
        });
    });
});
describe('synth', () => {
    test('successful synth outputs hierarchical stack ids', async () => {
        const toolkit = defaultToolkitSetup();
        await toolkit.synth([], false, false);
        // Separate tests as colorizing hampers detection
        expect(stderrMock.mock.calls[1][0]).toMatch('Test-Stack-A-Display-Name');
        expect(stderrMock.mock.calls[1][0]).toMatch('Test-Stack-B');
    });
    test('with no stdout option', async () => {
        // GIVE
        const toolkit = defaultToolkitSetup();
        // THEN
        await toolkit.synth(['Test-Stack-A-Display-Name'], false, true);
        expect(mockData.mock.calls.length).toEqual(0);
    });
    describe('migrate', () => {
        const testResourcePath = [__dirname, 'commands', 'test-resources'];
        const templatePath = [...testResourcePath, 'templates'];
        const sqsTemplatePath = path.join(...templatePath, 'sqs-template.json');
        const autoscalingTemplatePath = path.join(...templatePath, 'autoscaling-template.yml');
        const s3TemplatePath = path.join(...templatePath, 's3-template.json');
        test('migrate fails when both --from-path and --from-stack are provided', async () => {
            const toolkit = defaultToolkitSetup();
            await expect(() => toolkit.migrate({
                stackName: 'no-source',
                fromPath: './here/template.yml',
                fromStack: true,
            })).rejects.toThrow('Only one of `--from-path` or `--from-stack` may be provided.');
            expect(stderrMock.mock.calls[1][0]).toContain(' ❌  Migrate failed for `no-source`: Only one of `--from-path` or `--from-stack` may be provided.');
        });
        test('migrate fails when --from-path is invalid', async () => {
            const toolkit = defaultToolkitSetup();
            await expect(() => toolkit.migrate({
                stackName: 'bad-local-source',
                fromPath: './here/template.yml',
            })).rejects.toThrow('\'./here/template.yml\' is not a valid path.');
            expect(stderrMock.mock.calls[1][0]).toContain(' ❌  Migrate failed for `bad-local-source`: \'./here/template.yml\' is not a valid path.');
        });
        test('migrate fails when --from-stack is used and stack does not exist in account', async () => {
            const mockSdkProvider = new mock_sdk_1.MockSdkProvider();
            mockSdkProvider.stubCloudFormation({
                describeStacks(_request) {
                    throw new Error('Stack does not exist in this environment');
                },
            });
            const mockCloudExecutable = new util_1.MockCloudExecutable({
                stacks: [],
            });
            const cdkToolkit = new cdk_toolkit_1.CdkToolkit({
                cloudExecutable: mockCloudExecutable,
                deployments: new deployments_1.Deployments({ sdkProvider: mockSdkProvider }),
                sdkProvider: mockSdkProvider,
                configuration: mockCloudExecutable.configuration,
            });
            await expect(() => cdkToolkit.migrate({
                stackName: 'bad-cloudformation-source',
                fromStack: true,
            })).rejects.toThrowError('Stack does not exist in this environment');
            expect(stderrMock.mock.calls[1][0]).toContain(' ❌  Migrate failed for `bad-cloudformation-source`: Stack does not exist in this environment');
        });
        test('migrate fails when stack cannot be generated', async () => {
            const toolkit = defaultToolkitSetup();
            await expect(() => toolkit.migrate({
                stackName: 'cannot-generate-template',
                fromPath: path.join(__dirname, 'commands', 'test-resources', 'templates', 'sqs-template.json'),
                language: 'rust',
            })).rejects.toThrowError('CannotGenerateTemplateStack could not be generated because rust is not a supported language');
            expect(stderrMock.mock.calls[1][0]).toContain(' ❌  Migrate failed for `cannot-generate-template`: CannotGenerateTemplateStack could not be generated because rust is not a supported language');
        });
        cliTest('migrate succeeds for valid template from local path when no language is provided', async (workDir) => {
            const toolkit = defaultToolkitSetup();
            await toolkit.migrate({
                stackName: 'SQSTypeScript',
                fromPath: sqsTemplatePath,
                outputPath: workDir,
            });
            // Packages created for typescript
            expect(fs.pathExistsSync(path.join(workDir, 'SQSTypeScript', 'package.json'))).toBeTruthy();
            expect(fs.pathExistsSync(path.join(workDir, 'SQSTypeScript', 'bin', 'sqs_type_script.ts'))).toBeTruthy();
            expect(fs.pathExistsSync(path.join(workDir, 'SQSTypeScript', 'lib', 'sqs_type_script-stack.ts'))).toBeTruthy();
        });
        cliTest('migrate succeeds for valid template from local path when language is provided', async (workDir) => {
            const toolkit = defaultToolkitSetup();
            await toolkit.migrate({
                stackName: 'S3Python',
                fromPath: s3TemplatePath,
                outputPath: workDir,
                language: 'python',
            });
            // Packages created for typescript
            expect(fs.pathExistsSync(path.join(workDir, 'S3Python', 'requirements.txt'))).toBeTruthy();
            expect(fs.pathExistsSync(path.join(workDir, 'S3Python', 'app.py'))).toBeTruthy();
            expect(fs.pathExistsSync(path.join(workDir, 'S3Python', 's3_python', 's3_python_stack.py'))).toBeTruthy();
        });
        cliTest('migrate call is idempotent', async (workDir) => {
            const toolkit = defaultToolkitSetup();
            await toolkit.migrate({
                stackName: 'AutoscalingCSharp',
                fromPath: autoscalingTemplatePath,
                outputPath: workDir,
                language: 'csharp',
            });
            // Packages created for typescript
            expect(fs.pathExistsSync(path.join(workDir, 'AutoscalingCSharp', 'src', 'AutoscalingCSharp.sln'))).toBeTruthy();
            expect(fs.pathExistsSync(path.join(workDir, 'AutoscalingCSharp', 'src', 'AutoscalingCSharp', 'Program.cs'))).toBeTruthy();
            expect(fs.pathExistsSync(path.join(workDir, 'AutoscalingCSharp', 'src', 'AutoscalingCSharp', 'AutoscalingCSharpStack.cs'))).toBeTruthy();
            // One more time
            await toolkit.migrate({
                stackName: 'AutoscalingCSharp',
                fromPath: autoscalingTemplatePath,
                outputPath: workDir,
                language: 'csharp',
            });
            // Packages created for typescript
            expect(fs.pathExistsSync(path.join(workDir, 'AutoscalingCSharp', 'src', 'AutoscalingCSharp.sln'))).toBeTruthy();
            expect(fs.pathExistsSync(path.join(workDir, 'AutoscalingCSharp', 'src', 'AutoscalingCSharp', 'Program.cs'))).toBeTruthy();
            expect(fs.pathExistsSync(path.join(workDir, 'AutoscalingCSharp', 'src', 'AutoscalingCSharp', 'AutoscalingCSharpStack.cs'))).toBeTruthy();
        });
    });
    describe('stack with error and flagged for validation', () => {
        beforeEach(() => {
            cloudExecutable = new util_1.MockCloudExecutable({
                stacks: [
                    MockStack.MOCK_STACK_A,
                    MockStack.MOCK_STACK_B,
                ],
                nestedAssemblies: [{
                        stacks: [
                            { properties: { validateOnSynth: true }, ...MockStack.MOCK_STACK_WITH_ERROR },
                        ],
                    }],
            });
        });
        test('causes synth to fail if autoValidate=true', async () => {
            const toolkit = defaultToolkitSetup();
            const autoValidate = true;
            await expect(toolkit.synth([], false, true, autoValidate)).rejects.toBeDefined();
        });
        test('causes synth to succeed if autoValidate=false', async () => {
            const toolkit = defaultToolkitSetup();
            const autoValidate = false;
            await toolkit.synth([], false, true, autoValidate);
            expect(mockData.mock.calls.length).toEqual(0);
        });
    });
    test('stack has error and was explicitly selected', async () => {
        cloudExecutable = new util_1.MockCloudExecutable({
            stacks: [
                MockStack.MOCK_STACK_A,
                MockStack.MOCK_STACK_B,
            ],
            nestedAssemblies: [{
                    stacks: [
                        { properties: { validateOnSynth: false }, ...MockStack.MOCK_STACK_WITH_ERROR },
                    ],
                }],
        });
        const toolkit = defaultToolkitSetup();
        await expect(toolkit.synth(['Test-Stack-A/witherrors'], false, true)).rejects.toBeDefined();
    });
    test('stack has error, is not flagged for validation and was not explicitly selected', async () => {
        cloudExecutable = new util_1.MockCloudExecutable({
            stacks: [
                MockStack.MOCK_STACK_A,
                MockStack.MOCK_STACK_B,
            ],
            nestedAssemblies: [{
                    stacks: [
                        { properties: { validateOnSynth: false }, ...MockStack.MOCK_STACK_WITH_ERROR },
                    ],
                }],
        });
        const toolkit = defaultToolkitSetup();
        await toolkit.synth([], false, true);
    });
    test('stack has dependency and was explicitly selected', async () => {
        cloudExecutable = new util_1.MockCloudExecutable({
            stacks: [
                MockStack.MOCK_STACK_C,
                MockStack.MOCK_STACK_D,
            ],
        });
        const toolkit = defaultToolkitSetup();
        await toolkit.synth([MockStack.MOCK_STACK_D.stackName], true, false);
        expect(mockData.mock.calls.length).toEqual(1);
        expect(mockData.mock.calls[0][0]).toBeDefined();
    });
    test('rollback uses deployment role', async () => {
        cloudExecutable = new util_1.MockCloudExecutable({
            stacks: [
                MockStack.MOCK_STACK_C,
            ],
        });
        const mockedRollback = jest.spyOn(deployments_1.Deployments.prototype, 'rollbackStack').mockResolvedValue({
            success: true,
        });
        const toolkit = new cdk_toolkit_1.CdkToolkit({
            cloudExecutable,
            configuration: cloudExecutable.configuration,
            sdkProvider: cloudExecutable.sdkProvider,
            deployments: new deployments_1.Deployments({ sdkProvider: new mock_sdk_1.MockSdkProvider() }),
        });
        await toolkit.rollback({
            selector: { patterns: [] },
        });
        expect(mockedRollback).toHaveBeenCalled();
    });
    test.each([
        [{ type: 'failpaused-need-rollback-first', reason: 'replacement' }, false],
        [{ type: 'failpaused-need-rollback-first', reason: 'replacement' }, true],
        [{ type: 'failpaused-need-rollback-first', reason: 'not-norollback' }, false],
        [{ type: 'replacement-requires-norollback' }, false],
        [{ type: 'replacement-requires-norollback' }, true],
    ])('no-rollback deployment that cant proceed will be called with rollback on retry: %p (using force: %p)', async (firstResult, useForce) => {
        cloudExecutable = new util_1.MockCloudExecutable({
            stacks: [
                MockStack.MOCK_STACK_C,
            ],
        });
        const deployments = new deployments_1.Deployments({ sdkProvider: new mock_sdk_1.MockSdkProvider() });
        // Rollback might be called -- just don't do nothing.
        const mockRollbackStack = jest.spyOn(deployments, 'rollbackStack').mockResolvedValue({});
        const mockedDeployStack = jest
            .spyOn(deployments, 'deployStack')
            .mockResolvedValueOnce(firstResult)
            .mockResolvedValueOnce({
            type: 'did-deploy-stack',
            noOp: false,
            outputs: {},
            stackArn: 'stack:arn',
        });
        const mockedConfirm = jest.spyOn(promptly, 'confirm').mockResolvedValue(true);
        const toolkit = new cdk_toolkit_1.CdkToolkit({
            cloudExecutable,
            configuration: cloudExecutable.configuration,
            sdkProvider: cloudExecutable.sdkProvider,
            deployments,
        });
        await toolkit.deploy({
            selector: { patterns: [] },
            hotswap: common_1.HotswapMode.FULL_DEPLOYMENT,
            rollback: false,
            requireApproval: diff_1.RequireApproval.Never,
            force: useForce,
        });
        if (firstResult.type === 'failpaused-need-rollback-first') {
            expect(mockRollbackStack).toHaveBeenCalled();
        }
        if (!useForce) {
            // Questions will have been asked only if --force is not specified
            if (firstResult.type === 'failpaused-need-rollback-first') {
                expect(mockedConfirm).toHaveBeenCalledWith(expect.stringContaining('Roll back first and then proceed with deployment'));
            }
            else {
                expect(mockedConfirm).toHaveBeenCalledWith(expect.stringContaining('Perform a regular deployment'));
            }
        }
        expect(mockedDeployStack).toHaveBeenNthCalledWith(1, expect.objectContaining({ rollback: false }));
        expect(mockedDeployStack).toHaveBeenNthCalledWith(2, expect.objectContaining({ rollback: true }));
    });
});
class MockStack {
}
MockStack.MOCK_STACK_A = {
    stackName: 'Test-Stack-A',
    template: { Resources: { TemplateName: 'Test-Stack-A' } },
    env: 'aws://123456789012/bermuda-triangle-1',
    metadata: {
        '/Test-Stack-A': [
            {
                type: cxschema.ArtifactMetadataEntryType.STACK_TAGS,
                data: [
                    { key: 'Foo', value: 'Bar' },
                ],
            },
        ],
    },
    displayName: 'Test-Stack-A-Display-Name',
};
MockStack.MOCK_STACK_B = {
    stackName: 'Test-Stack-B',
    template: { Resources: { TemplateName: 'Test-Stack-B' } },
    env: 'aws://123456789012/bermuda-triangle-1',
    metadata: {
        '/Test-Stack-B': [
            {
                type: cxschema.ArtifactMetadataEntryType.STACK_TAGS,
                data: [
                    { key: 'Baz', value: 'Zinga!' },
                ],
            },
        ],
    },
};
MockStack.MOCK_STACK_C = {
    stackName: 'Test-Stack-C',
    template: { Resources: { TemplateName: 'Test-Stack-C' } },
    env: 'aws://123456789012/bermuda-triangle-1',
    metadata: {
        '/Test-Stack-C': [
            {
                type: cxschema.ArtifactMetadataEntryType.STACK_TAGS,
                data: [
                    { key: 'Baz', value: 'Zinga!' },
                ],
            },
        ],
    },
    displayName: 'Test-Stack-A/Test-Stack-C',
};
MockStack.MOCK_STACK_D = {
    stackName: 'Test-Stack-D',
    template: { Resources: { TemplateName: 'Test-Stack-D' } },
    env: 'aws://123456789012/bermuda-triangle-1',
    metadata: {
        '/Test-Stack-D': [
            {
                type: cxschema.ArtifactMetadataEntryType.STACK_TAGS,
                data: [
                    { key: 'Baz', value: 'Zinga!' },
                ],
            },
        ],
    },
    depends: [MockStack.MOCK_STACK_C.stackName],
};
MockStack.MOCK_STACK_WITH_ERROR = {
    stackName: 'witherrors',
    env: 'aws://123456789012/bermuda-triangle-1',
    template: { resource: 'errorresource' },
    metadata: {
        '/resource': [
            {
                type: cxschema.ArtifactMetadataEntryType.ERROR,
                data: 'this is an error',
            },
        ],
    },
    displayName: 'Test-Stack-A/witherrors',
};
MockStack.MOCK_STACK_WITH_ASSET = {
    stackName: 'Test-Stack-Asset',
    template: { Resources: { TemplateName: 'Test-Stack-Asset' } },
    env: 'aws://123456789012/bermuda-triangle-1',
    assetManifest: {
        version: cloud_assembly_schema_1.Manifest.version(),
        files: {
            xyz: {
                source: {
                    path: path.resolve(__dirname, '..', 'LICENSE'),
                },
                destinations: {},
            },
        },
    },
};
MockStack.MOCK_STACK_WITH_NOTIFICATION_ARNS = {
    stackName: 'Test-Stack-Notification-Arns',
    notificationArns: ['arn:aws:sns:bermuda-triangle-1337:123456789012:MyTopic'],
    template: { Resources: { TemplateName: 'Test-Stack-Notification-Arns' } },
    env: 'aws://123456789012/bermuda-triangle-1337',
    metadata: {
        '/Test-Stack-Notification-Arns': [
            {
                type: cxschema.ArtifactMetadataEntryType.STACK_TAGS,
                data: [
                    { key: 'Foo', value: 'Bar' },
                ],
            },
        ],
    },
};
MockStack.MOCK_STACK_WITH_BAD_NOTIFICATION_ARNS = {
    stackName: 'Test-Stack-Bad-Notification-Arns',
    notificationArns: ['arn:1337:123456789012:sns:bad'],
    template: { Resources: { TemplateName: 'Test-Stack-Bad-Notification-Arns' } },
    env: 'aws://123456789012/bermuda-triangle-1337',
    metadata: {
        '/Test-Stack-Bad-Notification-Arns': [
            {
                type: cxschema.ArtifactMetadataEntryType.STACK_TAGS,
                data: [
                    { key: 'Foo', value: 'Bar' },
                ],
            },
        ],
    },
};
class FakeCloudFormation extends deployments_1.Deployments {
    constructor(expectedTags = {}, expectedNotificationArns) {
        super({ sdkProvider: new mock_sdk_1.MockSdkProvider() });
        this.expectedTags = {};
        for (const [stackName, tags] of Object.entries(expectedTags)) {
            this.expectedTags[stackName] =
                Object.entries(tags).map(([Key, Value]) => ({ Key, Value }))
                    .sort((l, r) => l.Key.localeCompare(r.Key));
        }
        this.expectedNotificationArns = expectedNotificationArns ?? [];
    }
    deployStack(options) {
        expect([
            MockStack.MOCK_STACK_A.stackName,
            MockStack.MOCK_STACK_B.stackName,
            MockStack.MOCK_STACK_C.stackName,
            // MockStack.MOCK_STACK_D deliberately omitted.
            MockStack.MOCK_STACK_WITH_ASSET.stackName,
            MockStack.MOCK_STACK_WITH_ERROR.stackName,
            MockStack.MOCK_STACK_WITH_NOTIFICATION_ARNS.stackName,
            MockStack.MOCK_STACK_WITH_BAD_NOTIFICATION_ARNS.stackName,
        ]).toContain(options.stack.stackName);
        if (this.expectedTags[options.stack.stackName]) {
            expect(options.tags).toEqual(this.expectedTags[options.stack.stackName]);
        }
        expect(options.notificationArns).toEqual(this.expectedNotificationArns);
        return Promise.resolve({
            type: 'did-deploy-stack',
            stackArn: `arn:aws:cloudformation:::stack/${options.stack.stackName}/MockedOut`,
            noOp: false,
            outputs: { StackName: options.stack.stackName },
            stackArtifact: options.stack,
        });
    }
    rollbackStack(_options) {
        return Promise.resolve({
            success: true,
        });
    }
    destroyStack(options) {
        expect(options.stack).toBeDefined();
        return Promise.resolve();
    }
    readCurrentTemplate(stack) {
        switch (stack.stackName) {
            case MockStack.MOCK_STACK_A.stackName:
                return Promise.resolve({});
            case MockStack.MOCK_STACK_B.stackName:
                return Promise.resolve({});
            case MockStack.MOCK_STACK_C.stackName:
                return Promise.resolve({});
            case MockStack.MOCK_STACK_WITH_ASSET.stackName:
                return Promise.resolve({});
            case MockStack.MOCK_STACK_WITH_NOTIFICATION_ARNS.stackName:
                return Promise.resolve({});
            case MockStack.MOCK_STACK_WITH_BAD_NOTIFICATION_ARNS.stackName:
                return Promise.resolve({});
            default:
                throw new Error(`not an expected mock stack: ${stack.stackName}`);
        }
    }
}
function cliTest(name, handler) {
    test(name, () => withTempDir(handler));
}
async function withTempDir(cb) {
    const tmpDir = await fs.mkdtemp(path.join(os.tmpdir(), 'aws-cdk-test'));
    try {
        await cb(tmpDir);
    }
    finally {
        await fs.remove(tmpDir);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2RrLXRvb2xraXQudGVzdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImNkay10b29sa2l0LnRlc3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSw0REFBNEQ7QUFDNUQsTUFBTSxxQkFBcUIsR0FBRyxJQUFJLENBQUMsRUFBRSxFQUFFLENBQUM7QUFDeEMsTUFBTSxtQkFBbUIsR0FBRztJQUMxQixFQUFFLEVBQUUscUJBQXFCO0NBQzFCLENBQUM7QUFDRixNQUFNLHFCQUFxQixHQUFHO0lBQzVCLElBQUksYUFBYTtRQUNmLE1BQU0sQ0FBQyxxQkFBcUIsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDLHNCQUFzQixDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQzFFLGdHQUFnRztRQUNoRyxpRUFBaUU7UUFDakUsaUVBQWlFO1FBQ2pFLE1BQU0sU0FBUyxHQUFHLHFCQUFxQixDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDdEQsMkRBQTJEO1FBQzNELHlCQUF5QjtRQUN6QixNQUFNLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQ25DLHNDQUFzQztRQUN0QyxPQUFPLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUN0QixDQUFDO0lBRUQsSUFBSSxpQkFBaUI7UUFDbkIsTUFBTSxDQUFDLHFCQUFxQixDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUMsc0JBQXNCLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDMUUsTUFBTSxVQUFVLEdBQUcscUJBQXFCLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUN2RCwrREFBK0Q7UUFDL0QseUJBQXlCO1FBQ3pCLE1BQU0sQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FB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WUFDN0IsS0FBSyxTQUFTLENBQUMscUJBQXFCLENBQUMsU0FBUztnQkFDNUMsT0FBTyxPQUFPLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1lBQzdCLEtBQUssU0FBUyxDQUFDLGlDQUFpQyxDQUFDLFNBQVM7Z0JBQ3hELE9BQU8sT0FBTyxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQztZQUM3QixLQUFLLFNBQVMsQ0FBQyxxQ0FBcUMsQ0FBQyxTQUFTO2dCQUM1RCxPQUFPLE9BQU8sQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLENBQUM7WUFDN0I7Z0JBQ0UsTUFBTSxJQUFJLEtBQUssQ0FBQywrQkFBK0IsS0FBSyxDQUFDLFNBQVMsRUFBRSxDQUFDLENBQUM7UUFDdEUsQ0FBQztJQUNILENBQUM7Q0FDRjtBQUVELFNBQVMsT0FBTyxDQUFDLElBQVksRUFBRSxPQUE2QztJQUMxRSxJQUFJLENBQUMsSUFBSSxFQUFFLEdBQUcsRUFBRSxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO0FBQ3pDLENBQUM7QUFFRCxLQUFLLFVBQVUsV0FBVyxDQUFDLEVBQXdDO0lBQ2pFLE1BQU0sTUFBTSxHQUFHLE1BQU0sRUFBRSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxNQUFNLEVBQUUsRUFBRSxjQUFjLENBQUMsQ0FBQyxDQUFDO0lBQ3hFLElBQUksQ0FBQztRQUNILE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQ25CLENBQUM7WUFBUyxDQUFDO1FBQ1QsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQzFCLENBQUM7QUFDSCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gV2UgbmVlZCB0byBtb2NrIHRoZSBjaG9raWRhciBsaWJyYXJ5LCB1c2VkIGJ5ICdjZGsgd2F0Y2gnXG5jb25zdCBtb2NrQ2hva2lkYXJXYXRjaGVyT24gPSBqZXN0LmZuKCk7XG5jb25zdCBmYWtlQ2hva2lkYXJXYXRjaGVyID0ge1xuICBvbjogbW9ja0Nob2tpZGFyV2F0Y2hlck9uLFxufTtcbmNvbnN0IGZha2VDaG9raWRhcldhdGNoZXJPbiA9IHtcbiAgZ2V0IHJlYWR5Q2FsbGJhY2soKTogKCkgPT4gdm9pZCB7XG4gICAgZXhwZWN0KG1vY2tDaG9raWRhcldhdGNoZXJPbi5tb2NrLmNhbGxzLmxlbmd0aCkudG9CZUdyZWF0ZXJUaGFuT3JFcXVhbCgxKTtcbiAgICAvLyBUaGUgY2FsbCB0byB0aGUgZmlyc3QgJ3dhdGNoZXIub24oKScgaW4gdGhlIHByb2R1Y3Rpb24gY29kZSBpcyB0aGUgb25lIHdlIGFjdHVhbGx5IHdhbnQgaGVyZS5cbiAgICAvLyBUaGlzIGlzIGEgcHJldHR5IGZyYWdpbGUsIGJ1dCBhdCBsZWFzdCB3aXRoIHRoaXMgaGVscGVyIGNsYXNzLFxuICAgIC8vIHdlIHdvdWxkIGhhdmUgdG8gY2hhbmdlIGl0IG9ubHkgaW4gb25lIHBsYWNlIGlmIGl0IGV2ZXIgYnJlYWtzXG4gICAgY29uc3QgZmlyc3RDYWxsID0gbW9ja0Nob2tpZGFyV2F0Y2hlck9uLm1vY2suY2FsbHNbMF07XG4gICAgLy8gbGV0J3MgbWFrZSBzdXJlIHRoZSBmaXJzdCBhcmd1bWVudCBpcyB0aGUgJ3JlYWR5JyBldmVudCxcbiAgICAvLyBqdXN0IHRvIGJlIGRvdWJsZSBzYWZlXG4gICAgZXhwZWN0KGZpcnN0Q2FsbFswXSkudG9CZSgncmVhZHknKTtcbiAgICAvLyB0aGUgc2Vjb25kIGFyZ3VtZW50IGlzIHRoZSBjYWxsYmFja1xuICAgIHJldHVybiBmaXJzdENhbGxbMV07XG4gIH0sXG5cbiAgZ2V0IGZpbGVFdmVudENhbGxiYWNrKCk6IChldmVudDogJ2FkZCcgfCAnYWRkRGlyJyB8ICdjaGFuZ2UnIHwgJ3VubGluaycgfCAndW5saW5rRGlyJywgcGF0aDogc3RyaW5nKSA9PiBQcm9taXNlPHZvaWQ+IHtcbiAgICBleHBlY3QobW9ja0Nob2tpZGFyV2F0Y2hlck9uLm1vY2suY2FsbHMubGVuZ3RoKS50b0JlR3JlYXRlclRoYW5PckVxdWFsKDIpO1xuICAgIGNvbnN0IHNlY29uZENhbGwgPSBtb2NrQ2hva2lkYXJXYXRjaGVyT24ubW9jay5jYWxsc1sxXTtcbiAgICAvLyBsZXQncyBtYWtlIHN1cmUgdGhlIGZpcnN0IGFyZ3VtZW50IGlzIG5vdCB0aGUgJ3JlYWR5JyBldmVudCxcbiAgICAvLyBqdXN0IHRvIGJlIGRvdWJsZSBzYWZlXG4gICAgZXhwZWN0KHNlY29uZENhbGxbMF0pLm5vdC50b0JlKCdyZWFkeScpO1xuICAgIC8vIHRoZSBzZWNvbmQgYXJndW1lbnQgaXMgdGhlIGNhbGxiYWNrXG4gICAgcmV0dXJuIHNlY29uZENhbGxbMV07XG4gIH0sXG59O1xuXG5jb25zdCBtb2NrQ2hva2lkYXJXYXRjaCA9IGplc3QuZm4oKTtcbmplc3QubW9jaygnY2hva2lkYXInLCAoKSA9PiAoe1xuICB3YXRjaDogbW9ja0Nob2tpZGFyV2F0Y2gsXG59KSk7XG5jb25zdCBmYWtlQ2hva2lkYXJXYXRjaCA9IHtcbiAgZ2V0IGluY2x1ZGVBcmdzKCk6IHN0cmluZ1tdIHtcbiAgICBleHBlY3QobW9ja0Nob2tpZGFyV2F0Y2gubW9jay5jYWxscy5sZW5ndGgpLnRvQmUoMSk7XG4gICAgLy8gdGhlIGluY2x1ZGUgYXJncyBhcmUgdGhlIGZpcnN0IHBhcmFtZXRlciB0byB0aGUgJ3dhdGNoKCknIGNhbGxcbiAgICByZXR1cm4gbW9ja0Nob2tpZGFyV2F0Y2gubW9jay5jYWxsc1swXVswXTtcbiAgfSxcblxuICBnZXQgZXhjbHVkZUFyZ3MoKTogc3RyaW5nW10ge1xuICAgIGV4cGVjdChtb2NrQ2hva2lkYXJXYXRjaC5tb2NrLmNhbGxzLmxlbmd0aCkudG9CZSgxKTtcbiAgICAvLyB0aGUgaWdub3JlIGFyZ3MgYXJlIGEgcHJvcGVydHkgb2YgdGhlIHNlY29uZCBwYXJhbWV0ZXIgdG8gdGhlICd3YXRjaCgpJyBjYWxsXG4gICAgY29uc3QgY2hva2lkYXJXYXRjaE9wdHMgPSBtb2NrQ2hva2lkYXJXYXRjaC5tb2NrLmNhbGxzWzBdWzFdO1xuICAgIHJldHVybiBjaG9raWRhcldhdGNoT3B0cy5pZ25vcmVkO1xuICB9LFxufTtcblxuY29uc3QgbW9ja0RhdGEgPSBqZXN0LmZuKCk7XG5qZXN0Lm1vY2soJy4uL2xpYi9sb2dnaW5nJywgKCkgPT4gKHtcbiAgLi4uamVzdC5yZXF1aXJlQWN0dWFsKCcuLi9saWIvbG9nZ2luZycpLFxuICBkYXRhOiBtb2NrRGF0YSxcbn0pKTtcbmplc3Quc2V0VGltZW91dCgzMF8wMDApO1xuXG5pbXBvcnQgKiBhcyBvcyBmcm9tICdvcyc7XG5pbXBvcnQgKiBhcyBwYXRoIGZyb20gJ3BhdGgnO1xuaW1wb3J0ICogYXMgY3hzY2hlbWEgZnJvbSAnQGF3cy1jZGsvY2xvdWQtYXNzZW1ibHktc2NoZW1hJztcbmltcG9ydCB7IE1hbmlmZXN0IH0gZnJvbSAnQGF3cy1jZGsvY2xvdWQtYXNzZW1ibHktc2NoZW1hJztcbmltcG9ydCAqIGFzIGN4YXBpIGZyb20gJ0Bhd3MtY2RrL2N4LWFwaSc7XG5pbXBvcnQgKiBhcyBmcyBmcm9tICdmcy1leHRyYSc7XG5pbXBvcnQgKiBhcyBwcm9tcHRseSBmcm9tICdwcm9tcHRseSc7XG5pbXBvcnQgeyBpbnN0YW5jZU1vY2tGcm9tLCBNb2NrQ2xvdWRFeGVjdXRhYmxlLCBUZXN0U3RhY2tBcnRpZmFjdCB9IGZyb20gJy4vdXRpbCc7XG5pbXBvcnQgeyBNb2NrU2RrUHJvdmlkZXIgfSBmcm9tICcuL3V0aWwvbW9jay1zZGsnO1xuaW1wb3J0IHsgQm9vdHN0cmFwcGVyIH0gZnJvbSAnLi4vbGliL2FwaS9ib290c3RyYXAnO1xuaW1wb3J0IHsgRGVwbG95U3RhY2tSZXN1bHQsIFN1Y2Nlc3NmdWxEZXBsb3lTdGFja1Jlc3VsdCB9IGZyb20gJy4uL2xpYi9hcGkvZGVwbG95LXN0YWNrJztcbmltcG9ydCB7IERlcGxveW1lbnRzLCBEZXBsb3lTdGFja09wdGlvbnMsIERlc3Ryb3lTdGFja09wdGlvbnMsIFJvbGxiYWNrU3RhY2tPcHRpb25zLCBSb2xsYmFja1N0YWNrUmVzdWx0IH0gZnJvbSAnLi4vbGliL2FwaS9kZXBsb3ltZW50cyc7XG5pbXBvcnQgeyBIb3Rzd2FwTW9kZSB9IGZyb20gJy4uL2xpYi9hcGkvaG90c3dhcC9jb21tb24nO1xuaW1wb3J0IHsgVGVtcGxhdGUgfSBmcm9tICcuLi9saWIvYXBpL3V0aWwvY2xvdWRmb3JtYXRpb24nO1xuaW1wb3J0IHsgQ2RrVG9vbGtpdCwgbWFya1Rlc3RpbmcsIFRhZyB9IGZyb20gJy4uL2xpYi9jZGstdG9vbGtpdCc7XG5pbXBvcnQgeyBSZXF1aXJlQXBwcm92YWwgfSBmcm9tICcuLi9saWIvZGlmZic7XG5pbXBvcnQgeyBDb25maWd1cmF0aW9uIH0gZnJvbSAnLi4vbGliL3NldHRpbmdzJztcbmltcG9ydCB7IGZsYXR0ZW4gfSBmcm9tICcuLi9saWIvdXRpbCc7XG5cbm1hcmtUZXN0aW5nKCk7XG5cbnByb2Nlc3MuZW52LkNYQVBJX0RJU0FCTEVfU0VMRUNUX0JZX0lEID0gJzEnO1xuXG5sZXQgY2xvdWRFeGVjdXRhYmxlOiBNb2NrQ2xvdWRFeGVjdXRhYmxlO1xubGV0IGJvb3RzdHJhcHBlcjogamVzdC5Nb2NrZWQ8Qm9vdHN0cmFwcGVyPjtcbmxldCBzdGRlcnJNb2NrOiBqZXN0LlNweUluc3RhbmNlO1xuYmVmb3JlRWFjaCgoKSA9PiB7XG4gIGplc3QucmVzZXRBbGxNb2NrcygpO1xuXG4gIG1vY2tDaG9raWRhcldhdGNoLm1vY2tSZXR1cm5WYWx1ZShmYWtlQ2hva2lkYXJXYXRjaGVyKTtcbiAgLy8gb24oKSBpbiBjaG9raWRhcidzIFdhdGNoZXIgcmV0dXJucyAndGhpcydcbiAgbW9ja0Nob2tpZGFyV2F0Y2hlck9uLm1vY2tSZXR1cm5WYWx1ZShmYWtlQ2hva2lkYXJXYXRjaGVyKTtcblxuICBib290c3RyYXBwZXIgPSBpbnN0YW5jZU1vY2tGcm9tKEJvb3RzdHJhcHBlcik7XG4gIGJvb3RzdHJhcHBlci5ib290c3RyYXBFbnZpcm9ubWVudC5tb2NrUmVzb2x2ZWRWYWx1ZSh7IG5vT3A6IGZhbHNlLCBvdXRwdXRzOiB7fSB9IGFzIGFueSk7XG5cbiAgY2xvdWRFeGVjdXRhYmxlID0gbmV3IE1vY2tDbG91ZEV4ZWN1dGFibGUoe1xuICAgIHN0YWNrczogW1xuICAgICAgTW9ja1N0YWNrLk1PQ0tfU1RBQ0tfQSxcbiAgICAgIE1vY2tTdGFjay5NT0NLX1NUQUNLX0IsXG4gICAgXSxcbiAgICBuZXN0ZWRBc3NlbWJsaWVzOiBbe1xuICAgICAgc3RhY2tzOiBbTW9ja1N0YWNrLk1PQ0tfU1RBQ0tfQ10sXG4gICAgfV0sXG4gIH0pO1xuXG4gIHN0ZGVyck1vY2sgPSBqZXN0LnNweU9uKHByb2Nlc3Muc3RkZXJyLCAnd3JpdGUnKS5tb2NrSW1wbGVtZW50YXRpb24oKCkgPT4geyByZXR1cm4gdHJ1ZTsgfSk7XG59KTtcblxuZnVuY3Rpb24gZGVmYXVsdFRvb2xraXRTZXR1cCgpIHtcbiAgcmV0dXJuIG5ldyBDZGtUb29sa2l0KHtcbiAgICBjbG91ZEV4ZWN1dGFibGUsXG4gICAgY29uZmlndXJhdGlvbjogY2xvdWRFeGVjdXRhYmxlLmNvbmZpZ3VyYXRpb24sXG4gICAgc2RrUHJvdmlkZXI6IGNsb3VkRXhlY3V0YWJsZS5zZGtQcm92aWRlcixcbiAgICBkZXBsb3ltZW50czogbmV3IEZha2VDbG91ZEZvcm1hdGlvbih7XG4gICAgICAnVGVzdC1TdGFjay1BJzogeyBGb286ICdCYXInIH0sXG4gICAgICAnVGVzdC1TdGFjay1CJzogeyBCYXo6ICdaaW5nYSEnIH0sXG4gICAgICAnVGVzdC1TdGFjay1DJzogeyBCYXo6ICdaaW5nYSEnIH0sXG4gICAgfSksXG4gIH0pO1xufVxuXG5kZXNjcmliZSgncmVhZEN1cnJlbnRUZW1wbGF0ZScsICgpID0+IHtcbiAgbGV0IHRlbXBsYXRlOiBhbnk7XG4gIGxldCBtb2NrRm9yRW52aXJvbm1lbnQgPSBqZXN0LmZuKCk7XG4gIGxldCBtb2NrQ2xvdWRFeGVjdXRhYmxlOiBNb2NrQ2xvdWRFeGVjdXRhYmxlO1xuICBiZWZvcmVFYWNoKCgpID0+IHtcbiAgICB0ZW1wbGF0ZSA9IHtcbiAgICAgIFJlc291cmNlczoge1xuICAgICAgICBGdW5jOiB7XG4gICAgICAgICAgVHlwZTogJ0FXUzo6TGFtYmRhOjpGdW5jdGlvbicsXG4gICAgICAgICAgUHJvcGVydGllczoge1xuICAgICAgICAgICAgS2V5OiAnVmFsdWUnLFxuICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgICB9LFxuICAgIH07XG4gICAgbW9ja0Nsb3VkRXhlY3V0YWJsZSA9IG5ldyBNb2NrQ2xvdWRFeGVjdXRhYmxlKHtcbiAgICAgIHN0YWNrczogW1xuICAgICAgICB7XG4gICAgICAgICAgc3RhY2tOYW1lOiAnVGVzdC1TdGFjay1DJyxcbiAgICAgICAgICB0ZW1wbGF0ZSxcbiAgICAgICAgICBwcm9wZXJ0aWVzOiB7XG4gICAgICAgICAgICBhc3N1bWVSb2xlQXJuOiAnYmxvb3A6JHtBV1M6OlJlZ2lvbn06JHtBV1M6OkFjY291bnRJZH0nLFxuICAgICAgICAgICAgbG9va3VwUm9sZToge1xuICAgICAgICAgICAgICBhcm46ICdibG9vcC1sb29rdXA6JHtBV1M6OlJlZ2lvbn06JHtBV1M6OkFjY291bnRJZH0nLFxuICAgICAgICAgICAgICByZXF1aXJlc0Jvb3RzdHJhcFN0YWNrVmVyc2lvbjogNSxcbiAgICAgICAgICAgICAgYm9vdHN0cmFwU3RhY2tWZXJzaW9uU3NtUGFyYW1ldGVyOiAnL2Jvb3RzdHJhcC9wYXJhbWV0ZXInLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgc3RhY2tOYW1lOiAnVGVzdC1TdGFjay1BJyxcbiAgICAgICAgICB0ZW1wbGF0ZSxcbiAgICAgICAgICBwcm9wZXJ0aWVzOiB7XG4gICAgICAgICAgICBhc3N1bWVSb2xlQXJuOiAnYmxvb3A6JHtBV1M6OlJlZ2lvbn06JHtBV1M6OkFjY291bnRJZH0nLFxuICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgICBdLFxuICAgIH0pO1xuICAgIG1vY2tGb3JFbnZpcm9ubWVudCA9IGplc3QuZm4oKS5tb2NrSW1wbGVtZW50YXRpb24oKCkgPT4ge1xuICAgICAgcmV0dXJuIHsgc2RrOiBtb2NrQ2xvdWRFeGVjdXRhYmxlLnNka1Byb3ZpZGVyLnNkaywgZGlkQXNzdW1lUm9sZTogdHJ1ZSB9O1xuICAgIH0pO1xuICAgIG1vY2tDbG91ZEV4ZWN1dGFibGUuc2RrUHJvdmlkZXIuZm9yRW52aXJvbm1lbnQgPSBtb2NrRm9yRW52aXJvbm1lbnQ7XG4gICAgbW9ja0Nsb3VkRXhlY3V0YWJsZS5zZGtQcm92aWRlci5zdHViQ2xvdWRGb3JtYXRpb24oe1xuICAgICAgZ2V0VGVtcGxhdGUoKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgVGVtcGxhdGVCb2R5OiBKU09OLnN0cmluZ2lmeSh0ZW1wbGF0ZSksXG4gICAgICAgIH07XG4gICAgICB9LFxuICAgICAgZGVzY3JpYmVTdGFja3MoKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgU3RhY2tzOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIFN0YWNrTmFtZTogJ1Rlc3QtU3RhY2stQycsXG4gICAgICAgICAgICAgIFN0YWNrU3RhdHVzOiAnQ1JFQVRFX0NPTVBMRVRFJyxcbiAgICAgICAgICAgICAgQ3JlYXRpb25UaW1lOiBuZXcgRGF0ZSgpLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgU3RhY2tOYW1lOiAnVGVzdC1TdGFjay1BJyxcbiAgICAgICAgICAgICAgU3RhY2tTdGF0dXM6ICdDUkVBVEVfQ09NUExFVEUnLFxuICAgICAgICAgICAgICBDcmVhdGlvblRpbWU6IG5ldyBEYXRlKCksXG4gICAgICAgICAgICB9LFxuICAgICAgICAgIF0sXG4gICAgICAgIH07XG4gICAgICB9LFxuICAgIH0pO1xuICB9KTtcblxuICB0ZXN0KCdsb29rdXAgcm9sZSBpcyB1c2VkJywgYXN5bmMgKCkgPT4ge1xuICAgIC8vIEdJVkVOXG4gICAgbGV0IHJlcXVlc3RlZFBhcmFtZXRlck5hbWU6IHN0cmluZztcbiAgICBtb2NrQ2xvdWRFeGVjdXRhYmxlLnNka1Byb3ZpZGVyLnN0dWJTU00oe1xuICAgICAgZ2V0UGFyYW1ldGVyKHJlcXVlc3QpIHtcbiAgICAgICAgcmVxdWVzdGVkUGFyYW1ldGVyTmFtZSA9IHJlcXVlc3QuTmFtZTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBQYXJhbWV0ZXI6IHtcbiAgICAgICAgICAgIFZhbHVlOiAnNicsXG4gICAgICAgICAgfSxcbiAgICAgICAgfTtcbiAgICAgIH0sXG4gICAgfSk7XG4gICAgY29uc3QgY2RrVG9vbGtpdCA9IG5ldyBDZGtUb29sa2l0KHtcbiAgICAgIGNsb3VkRXhlY3V0YWJsZTogbW9ja0Nsb3VkRXhlY3V0YWJsZSxcbiAgICAgIGNvbmZpZ3VyYXRpb246IG1vY2tDbG91ZEV4ZWN1dGFibGUuY29uZmlndXJhdGlvbixcbiAgICAgIHNka1Byb3ZpZGVyOiBtb2NrQ2xvdWRFeGVjdXRhYmxlLnNka1Byb3ZpZGVyLFxuICAgICAgZGVwbG95bWVudHM6IG5ldyBEZXBsb3ltZW50cyh7IHNka1Byb3ZpZGVyOiBtb2NrQ2xvdWRFeGVjdXRhYmxlLnNka1Byb3ZpZGVyIH0pLFxuICAgIH0pO1xuXG4gICAgLy8gV0hFTlxuICAgIGF3YWl0IGNka1Rvb2xraXQuZGVwbG95KHtcbiAgICAgIHNlbGVjdG9yOiB7IHBhdHRlcm5zOiBbJ1Rlc3QtU3RhY2stQyddIH0sXG4gICAgICBob3Rzd2FwOiBIb3Rzd2FwTW9kZS5GVUxMX0RFUExPWU1FTlQsXG4gICAgfSk7XG5cbiAgICAvLyBUSEVOXG4gICAgZXhwZWN0KHJlcXVlc3RlZFBhcmFtZXRlck5hbWUhKS50b0VxdWFsKCcvYm9vdHN0cmFwL3BhcmFtZXRlcicpO1xuICAgIGV4cGVjdChtb2NrRm9yRW52aXJvbm1lbnQubW9jay5jYWxscy5sZW5ndGgpLnRvRXF1YWwoMik7XG4gICAgZXhwZWN0KG1vY2tGb3JFbnZpcm9ubWVudC5tb2NrLmNhbGxzWzBdWzJdKS50b0VxdWFsKHtcbiAgICAgIGFzc3VtZVJvbGVBcm46ICdibG9vcC1sb29rdXA6aGVyZToxMjM0NTY3ODkwMTInLFxuICAgIH0pO1xuICB9KTtcblxuICB0ZXN0KCdmYWxsYmFjayB0byBkZXBsb3kgcm9sZSBpZiBib290c3RyYXAgc3RhY2sgdmVyc2lvbiBpcyBub3QgdmFsaWQnLCBhc3luYyAoKSA9PiB7XG4gICAgLy8gR0lWRU5cbiAgICBsZXQgcmVxdWVzdGVkUGFyYW1ldGVyTmFtZTogc3RyaW5nO1xuICAgIG1vY2tDbG91ZEV4ZWN1dGFibGUuc2RrUHJvdmlkZXIuc3R1YlNTTSh7XG4gICAgICBnZXRQYXJhbWV0ZXIocmVxdWVzdCkge1xuICAgICAgICByZXF1ZXN0ZWRQYXJhbWV0ZXJOYW1lID0gcmVxdWVzdC5OYW1lO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIFBhcmFtZXRlcjoge1xuICAgICAgICAgICAgVmFsdWU6ICcxJyxcbiAgICAgICAgICB9LFxuICAgICAgICB9O1xuICAgICAgfSxcbiAgICB9KTtcbiAgICBjb25zdCBjZGtUb29sa2l0ID0gbmV3IENka1Rvb2xraXQoe1xuICAgICAgY2xvdWRFeGVjdXRhYmxlOiBtb2NrQ2xvdWRFeGVjdXRhYmxlLFxuICAgICAgY29uZmlndXJhdGlvbjogbW9ja0Nsb3VkRXhlY3V0YWJsZS5jb25maWd1cmF0aW9uLFxuICAgICAgc2RrUHJvdmlkZXI6IG1vY2tDbG91ZEV4ZWN1dGFibGUuc2RrUHJvdmlkZXIsXG4gICAgICBkZXBsb3ltZW50czogbmV3IERlcGxveW1lbnRzKHsgc2RrUHJvdmlkZXI6IG1vY2tDbG91ZEV4ZWN1dGFibGUuc2RrUHJvdmlkZXIgfSksXG4gICAgfSk7XG5cbiAgICAvLyBXSEVOXG4gICAgYXdhaXQgY2RrVG9vbGtpdC5kZXBsb3koe1xuICAgICAgc2VsZWN0b3I6IHsgcGF0dGVybnM6IFsnVGVzdC1TdGFjay1DJ10gfSxcbiAgICAgIGhvdHN3YXA6IEhvdHN3YXBNb2RlLkZVTExfREVQTE9ZTUVOVCxcbiAgICB9KTtcblxuICAgIC8vIFRIRU5cbiAgICBleHBlY3QoZmxhdHRlbihzdGRlcnJNb2NrLm1vY2suY2FsbHMpKS50b0VxdWFsKGV4cGVjdC5hcnJheUNvbnRhaW5pbmcoW1xuICAgICAgZXhwZWN0LnN0cmluZ0NvbnRhaW5pbmcoXCJCb290c3RyYXAgc3RhY2sgdmVyc2lvbiAnNScgaXMgcmVxdWlyZWQsIGZvdW5kIHZlcnNpb24gJzEnLiBUbyBnZXQgcmlkIG9mIHRoaXMgZXJyb3IsIHBsZWFzZSB1cGdyYWRlIHRvIGJvb3RzdHJhcCB2ZXJzaW9uID49IDVcIiksXG4gICAgXSkpO1xuICAgIGV4cGVjdChyZXF1ZXN0ZWRQYXJhbWV0ZXJOYW1lISkudG9FcXVhbCgnL2Jvb3RzdHJhcC9wYXJhbWV0ZXInKTtcbiAgICBleHBlY3QobW9ja0ZvckVudmlyb25tZW50Lm1vY2suY2FsbHMubGVuZ3RoKS50b0VxdWFsKDMpO1xuICAgIGV4cGVjdChtb2NrRm9yRW52aXJvbm1lbnQubW9jay5jYWxsc1swXVsyXSkudG9FcXVhbCh7XG4gICAgICBhc3N1bWVSb2xlQXJuOiAnYmxvb3AtbG9va3VwOmhlcmU6MTIzNDU2Nzg5MDEyJyxcbiAgICB9KTtcbiAgICBleHBlY3QobW9ja0ZvckVudmlyb25tZW50Lm1vY2suY2FsbHNbMV1bMl0pLnRvRXF1YWwoe1xuICAgICAgYXNzdW1lUm9sZUFybjogJ2Jsb29wOmhlcmU6MTIzNDU2Nzg5MDEyJyxcbiAgICB9KTtcbiAgfSk7XG5cbiAgdGVzdCgnZmFsbGJhY2sgdG8gZGVwbG95IHJvbGUgaWYgYm9vdHN0cmFwIHZlcnNpb24gcGFyYW1ldGVyIG5vdCBmb3VuZCcsIGFzeW5jICgpID0+IHtcbiAgICAvLyBHSVZFTlxuICAgIG1vY2tDbG91ZEV4ZWN1dGFibGUuc2RrUHJvdmlkZXIuc3R1YlNTTSh7XG4gICAgICBnZXRQYXJhbWV0ZXIoKSB7XG4gICAgICAgIGNvbnN0IGU6IGFueSA9IG5ldyBFcnJvcignbm90IGZvdW5kJyk7XG4gICAgICAgIGUuY29kZSA9IGUubmFtZSA9ICdQYXJhbWV0ZXJOb3RGb3VuZCc7XG4gICAgICAgIHRocm93IGU7XG4gICAgICB9LFxuICAgIH0pO1xuICAgIGNvbnN0IGNka1Rvb2xraXQgPSBuZXcgQ2RrVG9vbGtpdCh7XG4gICAgICBjbG91ZEV4ZWN1dGFibGU6IG1vY2tDbG91ZEV4ZWN1dGFibGUsXG4gICAgICBjb25maWd1cmF0aW9uOiBtb2NrQ2xvdWRFeGVjdXRhYmxlLmNvbmZpZ3VyYXRpb24sXG4gICAgICBzZGtQcm92aWRlcjogbW9ja0Nsb3VkRXhlY3V0YWJsZS5zZGtQcm92aWRlcixcbiAgICAgIGRlcGxveW1lbnRzOiBuZXcgRGVwbG95bWVudHMoeyBzZGtQcm92aWRlcjogbW9ja0Nsb3VkRXhlY3V0YWJsZS5zZGtQcm92aWRlciB9KSxcbiAgICB9KTtcblxuICAgIC8vIFdIRU5cbiAgICBhd2FpdCBjZGtUb29sa2l0LmRlcGxveSh7XG4gICAgICBzZWxlY3RvcjogeyBwYXR0ZXJuczogWydUZXN0LVN0YWNrLUMnXSB9LFxuICAgICAgaG90c3dhcDogSG90c3dhcE1vZGUuRlVMTF9ERVBMT1lNRU5ULFxuICAgIH0pO1xuXG4gICAgLy8gVEhFTlxuICAgIGV4cGVjdChmbGF0dGVuKHN0ZGVyck1vY2subW9jay5jYWxscykpLnRvRXF1YWwoZXhwZWN0LmFycmF5Q29udGFpbmluZyhbXG4gICAgICBleHBlY3Quc3RyaW5nTWF0Y2hpbmcoL1NTTSBwYXJhbWV0ZXIuKm5vdCBmb3VuZC4vKSxcbiAgICBdKSk7XG4gICAgZXhwZWN0KG1vY2tGb3JFbnZpcm9ubWVudC5tb2NrLmNhbGxzLmxlbmd0aCkudG9FcXVhbCgzKTtcbiAgICBleHBlY3QobW9ja0ZvckVudmlyb25tZW50Lm1vY2suY2FsbHNbMF1bMl0pLnRvRXF1YWwoe1xuICAgICAgYXNzdW1lUm9sZUFybjogJ2Jsb29wLWxvb2t1cDpoZXJlOjEyMzQ1Njc4OTAxMicsXG4gICAgfSk7XG4gICAgZXhwZWN0KG1vY2tGb3JFbnZpcm9ubWVudC5tb2NrLmNhbGxzWzFdWzJdKS50b0VxdWFsKHtcbiAgICAgIGFzc3VtZVJvbGVBcm46ICdibG9vcDpoZXJlOjEyMzQ1Njc4OTAxMicsXG4gICAgfSk7XG4gIH0pO1xuXG4gIHRlc3QoJ2ZhbGxiYWNrIHRvIGRlcGxveSByb2xlIGlmIGZvckVudmlyb25tZW50IHRocm93cycsIGFzeW5jICgpID0+IHtcbiAgICAvLyBHSVZFTlxuICAgIC8vIHRocm93IGVycm9yIGZpcnN0IGZvciB0aGUgJ3ByZXBhcmVTZGtXaXRoTG9va3VwUm9sZUZvcicgY2FsbCBhbmQgc3VjY2VlZCBmb3IgdGhlIHJlc3RcbiAgICBtb2NrRm9yRW52aXJvbm1lbnQgPSBqZXN0LmZuKCkubW9ja0ltcGxlbWVudGF0aW9uT25jZSgoKSA9PiB7IHRocm93IG5ldyBFcnJvcignVGhlRXJyb3JUaGF0R2V0c1Rocm93bicpOyB9KVxuICAgICAgLm1vY2tJbXBsZW1lbnRhdGlvbigoKSA9PiB7IHJldHVybiB7IHNkazogbW9ja0Nsb3VkRXhlY3V0YWJsZS5zZGtQcm92aWRlci5zZGssIGRpZEFzc3VtZVJvbGU6IHRydWUgfTsgfSk7XG4gICAgbW9ja0Nsb3VkRXhlY3V0YWJsZS5zZGtQcm92aWRlci5mb3JFbnZpcm9ubWVudCA9IG1vY2tGb3JFbnZpcm9ubWVudDtcbiAgICBtb2NrQ2xvdWRFeGVjdXRhYmxlLnNka1Byb3ZpZGVyLnN0dWJTU00oe1xuICAgICAgZ2V0UGFyYW1ldGVyKCkge1xuICAgICAgICByZXR1cm4ge307XG4gICAgICB9LFxuICAgIH0pO1xuICAgIGNvbnN0IGNka1Rvb2xraXQgPSBuZXcgQ2RrVG9vbGtpdCh7XG4gICAgICBjbG91ZEV4ZWN1dGFibGU6IG1vY2tDbG91ZEV4ZWN1dGFibGUsXG4gICAgICBjb25maWd1cmF0aW9uOiBtb2NrQ2xvdWRFeGVjdXRhYmxlLmNvbmZpZ3VyYXRpb24sXG4gICAgICBzZGtQcm92aWRlcjogbW9ja0Nsb3VkRXhlY3V0YWJsZS5zZGtQcm92aWRlcixcbiAgICAgIGRlcGxveW1lbnRzOiBuZXcgRGVwbG95bWVudHMoeyBzZGtQcm92aWRlcjogbW9ja0Nsb3VkRXhlY3V0YWJsZS5zZGtQcm92aWRlciB9KSxcbiAgICB9KTtcblxuICAgIC8vIFdIRU5cbiAgICBhd2FpdCBjZGtUb29sa2l0LmRlcGxveSh7XG4gICAgICBzZWxlY3RvcjogeyBwYXR0ZXJuczogWydUZXN0LVN0YWNrLUMnXSB9LFxuICAgICAgaG90c3dhcDogSG90c3dhcE1vZGUuRlVMTF9ERVBMT1lNRU5ULFxuICAgIH0pO1xuXG4gICAgLy8gVEhFTlxuICAgIGV4cGVjdChtb2NrQ2xvdWRFeGVjdXRhYmxlLnNka1Byb3ZpZGVyLnNkay5zc20pLm5vdC50b0hhdmVCZWVuQ2FsbGVkKCk7XG4gICAgZXhwZWN0KGZsYXR0ZW4oc3RkZXJyTW9jay5tb2NrLmNhbGxzKSkudG9FcXVhbChleHBlY3QuYXJyYXlDb250YWluaW5nKFtcbiAgICAgIGV4cGVjdC5zdHJpbmdNYXRjaGluZygvVGhlRXJyb3JUaGF0R2V0c1Rocm93bi8pLFxuICAgIF0pKTtcbiAgICBleHBlY3QobW9ja0ZvckVudmlyb25tZW50Lm1vY2suY2FsbHMubGVuZ3RoKS50b0VxdWFsKDMpO1xuICAgIGV4cGVjdChtb2NrRm9yRW52aXJvbm1lbnQubW9jay5jYWxsc1swXVsyXSkudG9FcXVhbCh7XG4gICAgICBhc3N1bWVSb2xlQXJuOiAnYmxvb3AtbG9va3VwOmhlcmU6MTIzNDU2Nzg5MDEyJyxcbiAgICB9KTtcbiAgICBleHBlY3QobW9ja0ZvckVudmlyb25tZW50Lm1vY2suY2FsbHNbMV1bMl0pLnRvRXF1YWwoe1xuICAgICAgYXNzdW1lUm9sZUFybjogJ2Jsb29wOmhlcmU6MTIzNDU2Nzg5MDEyJyxcbiAgICB9KTtcbiAgfSk7XG5cbiAgdGVzdCgnZG9udCBsb29rdXAgYm9vdHN0cmFwIHZlcnNpb24gcGFyYW1ldGVyIGlmIGRlZmF1bHQgY3JlZGVudGlhbHMgYXJlIHVzZWQnLCBhc3luYyAoKSA9PiB7XG4gICAgLy8gR0lWRU5cbiAgICBtb2NrRm9yRW52aXJvbm1lbnQgPSBqZXN0LmZuKCkubW9ja0ltcGxlbWVudGF0aW9uKCgpID0+IHsgcmV0dXJuIHsgc2RrOiBtb2NrQ2xvdWRFeGVjdXRhYmxlLnNka1Byb3ZpZGVyLnNkaywgZGlkQXNzdW1lUm9sZTogZmFsc2UgfTsgfSk7XG4gICAgbW9ja0Nsb3VkRXhlY3V0YWJsZS5zZGtQcm92aWRlci5mb3JFbnZpcm9ubWVudCA9IG1vY2tGb3JFbnZpcm9ubWVudDtcbiAgICBjb25zdCBjZGtUb29sa2l0ID0gbmV3IENka1Rvb2xraXQoe1xuICAgICAgY2xvdWRFeGVjdXRhYmxlOiBtb2NrQ2xvdWRFeGVjdXRhYmxlLFxuICAgICAgY29uZmlndXJhdGlvbjogbW9ja0Nsb3VkRXhlY3V0YWJsZS5jb25maWd1cmF0aW9uLFxuICAgICAgc2RrUHJvdmlkZXI6IG1vY2tDbG91ZEV4ZWN1dGFibGUuc2RrUHJvdmlkZXIsXG4gICAgICBkZXBsb3ltZW50czogbmV3IERlcGxveW1lbnRzKHsgc2RrUHJvdmlkZXI6IG1vY2tDbG91ZEV4ZWN1dGFibGUuc2RrUHJvdmlkZXIgfSksXG4gICAgfSk7XG4gICAgbW9ja0Nsb3VkRXhlY3V0YWJsZS5zZGtQcm92aWRlci5zdHViU1NNKHtcbiAgICAgIGdldFBhcmFtZXRlcigpIHtcbiAgICAgICAgcmV0dXJuIHt9O1xuICAgICAgfSxcbiAgICB9KTtcblxuICAgIC8vIFdIRU5cbiAgICBhd2FpdCBjZGtUb29sa2l0LmRlcGxveSh7XG4gICAgICBzZWxlY3RvcjogeyBwYXR0ZXJuczogWydUZXN0LVN0YWNrLUMnXSB9LFxuICAgICAgaG90c3dhcDogSG90c3dhcE1vZGUuRlVMTF9ERVBMT1lNRU5ULFxuICAgIH0pO1xuXG4gICAgLy8gVEhFTlxuICAgIGV4cGVjdChmbGF0dGVuKHN0ZGVyck1vY2subW9jay5jYWxscykpLnRvRXF1YWwoZXhwZWN0LmFycmF5Q29udGFpbmluZyhbXG4gICAgICBleHBlY3Quc3RyaW5nTWF0Y2hpbmcoL0xvb2t1cCByb2xlLip3YXMgbm90IGFzc3VtZWQuIFByb2NlZWRpbmcgd2l0aCBkZWZhdWx0IGNyZWRlbnRpYWxzLi8pLFxuICAgIF0pKTtcbiAgICBleHBlY3QobW9ja0Nsb3VkRXhlY3V0YWJsZS5zZGtQcm92aWRlci5zZGsuc3NtKS5ub3QudG9IYXZlQmVlbkNhbGxlZCgpO1xuICAgIGV4cGVjdChtb2NrRm9yRW52aXJvbm1lbnQubW9jay5jYWxsc1swXVsyXSkudG9FcXVhbCh7XG4gICAgICBhc3N1bWVSb2xlQXJuOiAnYmxvb3AtbG9va3VwOmhlcmU6MTIzNDU2Nzg5MDEyJyxcbiAgICB9KTtcbiAgICBleHBlY3QobW9ja0ZvckVudmlyb25tZW50Lm1vY2suY2FsbHNbMV1bMl0pLnRvRXF1YWwoe1xuICAgICAgYXNzdW1lUm9sZUFybjogJ2Jsb29wOmhlcmU6MTIzNDU2Nzg5MDEyJyxcbiAgICB9KTtcbiAgfSk7XG5cbiAgdGVzdCgnZG8gbm90IHByaW50IHdhcm5pbmdzIGlmIGxvb2t1cCByb2xlIG5vdCBwcm92aWRlZCBpbiBzdGFjayBhcnRpZmFjdCcsIGFzeW5jICgpID0+IHtcbiAgICAvLyBHSVZFTlxuICAgIG1vY2tDbG91ZEV4ZWN1dGFibGUuc2RrUHJvdmlkZXIuc3R1YlNTTSh7XG4gICAgICBnZXRQYXJhbWV0ZXIoKSB7XG4gICAgICAgIHJldHVybiB7fTtcbiAgICAgIH0sXG4gICAgfSk7XG4gICAgY29uc3QgY2RrVG9vbGtpdCA9IG5ldyBDZGtUb29sa2l0KHtcbiAgICAgIGNsb3VkRXhlY3V0YWJsZTogbW9ja0Nsb3VkRXhlY3V0YWJsZSxcbiAgICAgIGNvbmZpZ3VyYXRpb246IG1vY2tDbG91ZEV4ZWN1dGFibGUuY29uZmlndXJhdGlvbixcbiAgICAgIHNka1Byb3ZpZGVyOiBtb2NrQ2xvdWRFeGVjdXRhYmxlLnNka1Byb3ZpZGVyLFxuICAgICAgZGVwbG95bWVudHM6IG5ldyBEZXBsb3ltZW50cyh7IHNka1Byb3ZpZGVyOiBtb2NrQ2xvdWRFeGVjdXRhYmxlLnNka1Byb3ZpZGVyIH0pLFxuICAgIH0pO1xuXG4gICAgLy8gV0hFTlxuICAgIGF3YWl0IGNka1Rvb2xraXQuZGVwbG95KHtcbiAgICAgIHNlbGVjdG9yOiB7IHBhdHRlcm5zOiBbJ1Rlc3QtU3RhY2stQSddIH0sXG4gICAgICBob3Rzd2FwOiBIb3Rzd2FwTW9kZS5GVUxMX0RFUExPWU1FTlQsXG4gICAgfSk7XG5cbiAgICAvLyBUSEVOXG4gICAgZXhwZWN0KGZsYXR0ZW4oc3RkZXJyTW9jay5tb2NrLmNhbGxzKSkubm90LnRvRXF1YWwoZXhwZWN0LmFycmF5Q29udGFpbmluZyhbXG4gICAgICBleHBlY3Quc3RyaW5nTWF0Y2hpbmcoL0NvdWxkIG5vdCBhc3N1bWUvKSxcbiAgICAgIGV4cGVjdC5zdHJpbmdNYXRjaGluZygvcGxlYXNlIHVwZ3JhZGUgdG8gYm9vdHN0cmFwIHZlcnNpb24vKSxcbiAgICBdKSk7XG4gICAgZXhwZWN0KG1vY2tDbG91ZEV4ZWN1dGFibGUuc2RrUHJvdmlkZXIuc2RrLnNzbSkubm90LnRvSGF2ZUJlZW5DYWxsZWQoKTtcbiAgICBleHBlY3QobW9ja0ZvckVudmlyb25tZW50Lm1vY2suY2FsbHMubGVuZ3RoKS50b0VxdWFsKDIpO1xuICAgIGV4cGVjdChtb2NrRm9yRW52aXJvbm1lbnQubW9jay5jYWxsc1swXVsyXSkudG9FcXVhbCh7XG4gICAgICBhc3N1bWVSb2xlQXJuOiB1bmRlZmluZWQsXG4gICAgICBhc3N1bWVSb2xlRXh0ZXJuYWxJZDogdW5kZWZpbmVkLFxuICAgIH0pO1xuICB9KTtcbn0pO1xuXG5kZXNjcmliZSgnYm9vdHN0cmFwJywgKCkgPT4ge1xuICB0ZXN0KCdhY2NlcHRzIHF1YWxpZmllciBmcm9tIGNvbnRleHQnLCBhc3luYyAoKSA9PiB7XG4gICAgLy8gR0lWRU5cbiAgICBjb25zdCB0b29sa2l0ID0gZGVmYXVsdFRvb2xraXRTZXR1cCgpO1xuICAgIGNvbnN0IGNvbmZpZ3VyYXRpb24gPSBuZXcgQ29uZmlndXJhdGlvbigpO1xuICAgIGNvbmZpZ3VyYXRpb24uY29udGV4dC5zZXQoJ0Bhd3MtY2RrL2NvcmU6Ym9vdHN0cmFwUXVhbGlmaWVyJywgJ2FiY2RlJyk7XG5cbiAgICAvLyBXSEVOXG4gICAgYXdhaXQgdG9vbGtpdC5ib290c3RyYXAoWydhd3M6Ly81Njc4OS9zb3V0aC1wb2xlJ10sIGJvb3RzdHJhcHBlciwge1xuICAgICAgcGFyYW1ldGVyczoge1xuICAgICAgICBxdWFsaWZpZXI6IGNvbmZpZ3VyYXRpb24uY29udGV4dC5nZXQoJ0Bhd3MtY2RrL2NvcmU6Ym9vdHN0cmFwUXVhbGlmaWVyJyksXG4gICAgICB9LFxuICAgIH0pO1xuXG4gICAgLy8gVEhFTlxuICAgIGV4cGVjdChib290c3RyYXBwZXIuYm9vdHN0cmFwRW52aXJvbm1lbnQpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKGV4cGVjdC5hbnl0aGluZygpLCBleHBlY3QuYW55dGhpbmcoKSwge1xuICAgICAgcGFyYW1ldGVyczoge1xuICAgICAgICBxdWFsaWZpZXI6ICdhYmNkZScsXG4gICAgICB9LFxuICAgIH0pO1xuICB9KTtcbn0pO1xuXG5kZXNjcmliZSgnZGVwbG95JywgKCkgPT4ge1xuICB0ZXN0KCdmYWlscyB3aGVuIG5vIHZhbGlkIHN0YWNrIG5hbWVzIGFyZSBnaXZlbicsIGFzeW5jICgpID0+IHtcbiAgICAvLyBHSVZFTlxuICAgIGNvbnN0IHRvb2xraXQgPSBkZWZhdWx0VG9vbGtpdFNldHVwKCk7XG5cbiAgICAvLyBXSEVOXG4gICAgYXdhaXQgZXhwZWN0KCgpID0+IHRvb2xraXQuZGVwbG95KHtcbiAgICAgIHNlbGVjdG9yOiB7IHBhdHRlcm5zOiBbJ1Rlc3QtU3RhY2stRCddIH0sXG4gICAgICBob3Rzd2FwOiBIb3Rzd2FwTW9kZS5GVUxMX0RFUExPWU1FTlQsXG4gICAgfSkpLnJlamVjdHMudG9UaHJvdygnTm8gc3RhY2tzIG1hdGNoIHRoZSBuYW1lKHMpIFRlc3QtU3RhY2stRCcpO1xuICB9KTtcblxuICBkZXNjcmliZSgnd2l0aCBob3Rzd2FwIGRlcGxveW1lbnQnLCAoKSA9PiB7XG4gICAgdGVzdChcInBhc3NlcyB0aHJvdWdoIHRoZSAnaG90c3dhcCcgb3B0aW9uIHRvIENsb3VkRm9ybWF0aW9uRGVwbG95bWVudHMuZGVwbG95U3RhY2soKVwiLCBhc3luYyAoKSA9PiB7XG4gICAgICAvLyBHSVZFTlxuICAgICAgY29uc3QgbW9ja0NmbkRlcGxveW1lbnRzID0gaW5zdGFuY2VNb2NrRnJvbShEZXBsb3ltZW50cyk7XG4gICAgICBtb2NrQ2ZuRGVwbG95bWVudHMuZGVwbG95U3RhY2subW9ja1JldHVyblZhbHVlKFByb21pc2UucmVzb2x2ZSh7XG4gICAgICAgIHR5cGU6ICdkaWQtZGVwbG95LXN0YWNrJyxcbiAgICAgICAgbm9PcDogZmFsc2UsXG4gICAgICAgIG91dHB1dHM6IHt9LFxuICAgICAgICBzdGFja0FybjogJ3N0YWNrQXJuJyxcbiAgICAgICAgc3RhY2tBcnRpZmFjdDogaW5zdGFuY2VNb2NrRnJvbShjeGFwaS5DbG91ZEZvcm1hdGlvblN0YWNrQXJ0aWZhY3QpLFxuICAgICAgfSkpO1xuICAgICAgY29uc3QgY2RrVG9vbGtpdCA9IG5ldyBDZGtUb29sa2l0KHtcbiAgICAgICAgY2xvdWRFeGVjdXRhYmxlLFxuICAgICAgICBjb25maWd1cmF0aW9uOiBjbG91ZEV4ZWN1dGFibGUuY29uZmlndXJhdGlvbixcbiAgICAgICAgc2RrUHJvdmlkZXI6IGNsb3VkRXhlY3V0YWJsZS5zZGtQcm92aWRlcixcbiAgICAgICAgZGVwbG95bWVudHM6IG1vY2tDZm5EZXBsb3ltZW50cyxcbiAgICAgIH0pO1xuXG4gICAgICAvLyBXSEVOXG4gICAgICBhd2FpdCBjZGtUb29sa2l0LmRlcGxveSh7XG4gICAgICAgIHNlbGVjdG9yOiB7IHBhdHRlcm5zOiBbJ1Rlc3QtU3RhY2stQS1EaXNwbGF5LU5hbWUnXSB9LFxuICAgICAgICByZXF1aXJlQXBwcm92YWw6IFJlcXVpcmVBcHByb3ZhbC5OZXZlcixcbiAgICAgICAgaG90c3dhcDogSG90c3dhcE1vZGUuRkFMTF9CQUNLLFxuICAgICAgfSk7XG5cbiAgICAgIC8vIFRIRU5cbiAgICAgIGV4cGVjdChtb2NrQ2ZuRGVwbG95bWVudHMuZGVwbG95U3RhY2spLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKGV4cGVjdC5vYmplY3RDb250YWluaW5nKHtcbiAgICAgICAgaG90c3dhcDogSG90c3dhcE1vZGUuRkFMTF9CQUNLLFxuICAgICAgfSkpO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgnbWFrZXMgY29ycmVjdCBDbG91ZEZvcm1hdGlvbiBjYWxscycsICgpID0+IHtcbiAgICB0ZXN0KCd3aXRob3V0IG9wdGlvbnMnLCBhc3luYyAoKSA9PiB7XG4gICAgICAvLyBHSVZFTlxuICAgICAgY29uc3QgdG9vbGtpdCA9IGRlZmF1bHRUb29sa2l0U2V0dXAoKTtcblxuICAgICAgLy8gV0hFTlxuICAgICAgYXdhaXQgdG9vbGtpdC5kZXBsb3koe1xuICAgICAgICBzZWxlY3RvcjogeyBwYXR0ZXJuczogWydUZXN0LVN0YWNrLUEnLCAnVGVzdC1TdGFjay1CJ10gfSxcbiAgICAgICAgaG90c3dhcDogSG90c3dhcE1vZGUuRlVMTF9ERVBMT1lNRU5ULFxuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICB0ZXN0KCd3aXRoIHN0YWNrcyBhbGwgc3RhY2tzIHNwZWNpZmllZCBhcyBkb3VibGUgd2lsZGNhcmQnLCBhc3luYyAoKSA9PiB7XG4gICAgICAvLyBHSVZFTlxuICAgICAgY29uc3QgdG9vbGtpdCA9IGRlZmF1bHRUb29sa2l0U2V0dXAoKTtcblxuICAgICAgLy8gV0hFTlxuICAgICAgYXdhaXQgdG9vbGtpdC5kZXBsb3koe1xuICAgICAgICBzZWxlY3RvcjogeyBwYXR0ZXJuczogWycqKiddIH0sXG4gICAgICAgIGhvdHN3YXA6IEhvdHN3YXBNb2RlLkZVTExfREVQTE9ZTUVOVCxcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgdGVzdCgnd2l0aCBvbmUgc3RhY2sgc3BlY2lmaWVkJywgYXN5bmMgKCkgPT4ge1xuICAgICAgLy8gR0lWRU5cbiAgICAgIGNvbnN0IHRvb2xraXQgPSBkZWZhdWx0VG9vbGtpdFNldHVwKCk7XG5cbiAgICAgIC8vIFdIRU5cbiAgICAgIGF3YWl0IHRvb2xraXQuZGVwbG95KHtcbiAgICAgICAgc2VsZWN0b3I6IHsgcGF0dGVybnM6IFsnVGVzdC1TdGFjay1BLURpc3BsYXktTmFtZSddIH0sXG4gICAgICAgIGhvdHN3YXA6IEhvdHN3YXBNb2RlLkZVTExfREVQTE9ZTUVOVCxcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgdGVzdCgnd2l0aCBzdGFja3MgYWxsIHN0YWNrcyBzcGVjaWZpZWQgYXMgd2lsZGNhcmQnLCBhc3luYyAoKSA9PiB7XG4gICAgICAvLyBHSVZFTlxuICAgICAgY29uc3QgdG9vbGtpdCA9IGRlZmF1bHRUb29sa2l0U2V0dXAoKTtcblxuICAgICAgLy8gV0hFTlxuICAgICAgYXdhaXQgdG9vbGtpdC5kZXBsb3koe1xuICAgICAgICBzZWxlY3RvcjogeyBwYXR0ZXJuczogWycqJ10gfSxcbiAgICAgICAgaG90c3dhcDogSG90c3dhcE1vZGUuRlVMTF9ERVBMT1lNRU5ULFxuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBkZXNjcmliZSgnc25zIG5vdGlmaWNhdGlvbiBhcm5zJywgKCkgPT4ge1xuICAgICAgYmVmb3JlRWFjaCgoKSA9PiB7XG4gICAgICAgIGNsb3VkRXhlY3V0YWJsZSA9IG5ldyBNb2NrQ2xvdWRFeGVjdXRhYmxlKHtcbiAgICAgICAgICBzdGFja3M6IFtcbiAgICAgICAgICAgIE1vY2tTdGFjay5NT0NLX1NUQUNLX0EsXG4gICAgICAgICAgICBNb2NrU3RhY2suTU9DS19TVEFDS19CLFxuICAgICAgICAgICAgTW9ja1N0YWNrLk1PQ0tfU1RBQ0tfV0lUSF9OT1RJRklDQVRJT05fQVJOUyxcbiAgICAgICAgICAgIE1vY2tTdGFjay5NT0NLX1NUQUNLX1dJVEhfQkFEX05PVElGSUNBVElPTl9BUk5TLFxuICAgICAgICAgIF0sXG4gICAgICAgIH0pO1xuICAgICAgfSk7XG5cbiAgICAgIHRlc3QoJ3dpdGggc25zIG5vdGlmaWNhdGlvbiBhcm5zIGFzIG9wdGlvbnMnLCBhc3luYyAoKSA9PiB7XG4gICAgICAgIC8vIEdJVkVOXG4gICAgICAgIGNvbnN0IG5vdGlmaWNhdGlvbkFybnMgPSBbXG4gICAgICAgICAgJ2Fybjphd3M6c25zOnVzLWVhc3QtMjo0NDQ0NTU1NTY2NjY6TXlUb3BpYycsXG4gICAgICAgICAgJ2Fybjphd3M6c25zOmV1LXdlc3QtMToxMTExNTU1NTY2NjY6bXktZ3JlYXQtdG9waWMnLFxuICAgICAgICBdO1xuICAgICAgICBjb25zdCB0b29sa2l0ID0gbmV3IENka1Rvb2xraXQoe1xuICAgICAgICAgIGNsb3VkRXhlY3V0YWJsZSxcbiAgICAgICAgICBjb25maWd1cmF0aW9uOiBjbG91ZEV4ZWN1dGFibGUuY29uZmlndXJhdGlvbixcbiAgICAgICAgICBzZGtQcm92aWRlcjogY2xvdWRFeGVjdXRhYmxlLnNka1Byb3ZpZGVyLFxuICAgICAgICAgIGRlcGxveW1lbnRzOiBuZXcgRmFrZUNsb3VkRm9ybWF0aW9uKHtcbiAgICAgICAgICAgICdUZXN0LVN0YWNrLUEnOiB7IEZvbzogJ0JhcicgfSxcbiAgICAgICAgICB9LCBub3RpZmljYXRpb25Bcm5zKSxcbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gV0hFTlxuICAgICAgICBhd2FpdCB0b29sa2l0LmRlcGxveSh7XG4gICAgICAgICAgLy8gU3RhY2tzIHNob3VsZCBiZSBzZWxlY3RlZCBieSB0aGVpciBoaWVyYXJjaGljYWwgSUQsIHdoaWNoIGlzIHRoZWlyIGRpc3BsYXlOYW1lLCBub3QgYnkgdGhlIHN0YWNrIElELlxuICAgICAgICAgIHNlbGVjdG9yOiB7IHBhdHRlcm5zOiBbJ1Rlc3QtU3RhY2stQS1EaXNwbGF5LU5hbWUnXSB9LFxuICAgICAgICAgIG5vdGlmaWNhdGlvbkFybnMsXG4gICAgICAgICAgaG90c3dhcDogSG90c3dhcE1vZGUuRlVMTF9ERVBMT1lNRU5ULFxuICAgICAgICB9KTtcbiAgICAgIH0pO1xuXG4gICAgICB0ZXN0KCdmYWlsIHdpdGggaW5jb3JyZWN0IHNucyBub3RpZmljYXRpb24gYXJucyBhcyBvcHRpb25zJywgYXN5bmMgKCkgPT4ge1xuICAgICAgICAvLyBHSVZFTlxuICAgICAgICBjb25zdCBub3RpZmljYXRpb25Bcm5zID0gWydhcm46OjpjZm4tbXktY29vbC10b3BpYyddO1xuICAgICAgICBjb25zdCB0b29sa2l0ID0gbmV3IENka1Rvb2xraXQoe1xuICAgICAgICAgIGNsb3VkRXhlY3V0YWJsZSxcbiAgICAgICAgICBjb25maWd1cmF0aW9uOiBjbG91ZEV4ZWN1dGFibGUuY29uZmlndXJhdGlvbixcbiAgICAgICAgICBzZGtQcm92aWRlcjogY2xvdWRFeGVjdXRhYmxlLnNka1Byb3ZpZGVyLFxuICAgICAgICAgIGRlcGxveW1lbnRzOiBuZXcgRmFrZUNsb3VkRm9ybWF0aW9uKHtcbiAgICAgICAgICAgICdUZXN0LVN0YWNrLUEnOiB7IEZvbzogJ0JhcicgfSxcbiAgICAgICAgICB9LCBub3RpZmljYXRpb25Bcm5zKSxcbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gV0hFTlxuICAgICAgICBhd2FpdCBleHBlY3QoKCkgPT5cbiAgICAgICAgICB0b29sa2l0LmRlcGxveSh7XG4gICAgICAgICAgICAvLyBTdGFja3Mgc2hvdWxkIGJlIHNlbGVjdGVkIGJ5IHRoZWlyIGhpZXJhcmNoaWNhbCBJRCwgd2hpY2ggaXMgdGhlaXIgZGlzcGxheU5hbWUsIG5vdCBieSB0aGUgc3RhY2sgSUQuXG4gICAgICAgICAgICBzZWxlY3RvcjogeyBwYXR0ZXJuczogWydUZXN0LVN0YWNrLUEtRGlzcGxheS1OYW1lJ10gfSxcbiAgICAgICAgICAgIG5vdGlmaWNhdGlvbkFybnMsXG4gICAgICAgICAgICBob3Rzd2FwOiBIb3Rzd2FwTW9kZS5GVUxMX0RFUExPWU1FTlQsXG4gICAgICAgICAgfSksXG4gICAgICAgICkucmVqZWN0cy50b1Rocm93KCdOb3RpZmljYXRpb24gYXJuIGFybjo6OmNmbi1teS1jb29sLXRvcGljIGlzIG5vdCBhIHZhbGlkIGFybiBmb3IgYW4gU05TIHRvcGljJyk7XG4gICAgICB9KTtcblxuICAgICAgdGVzdCgnd2l0aCBzbnMgbm90aWZpY2F0aW9uIGFybnMgaW4gdGhlIGV4ZWN1dGFibGUnLCBhc3luYyAoKSA9PiB7XG4gICAgICAgIC8vIEdJVkVOXG4gICAgICAgIGNvbnN0IGV4cGVjdGVkTm90aWZpY2F0aW9uQXJucyA9IFtcbiAgICAgICAgICAnYXJuOmF3czpzbnM6YmVybXVkYS10cmlhbmdsZS0xMzM3OjEyMzQ1Njc4OTAxMjpNeVRvcGljJyxcbiAgICAgICAgXTtcbiAgICAgICAgY29uc3QgdG9vbGtpdCA9IG5ldyBDZGtUb29sa2l0KHtcbiAgICAgICAgICBjbG91ZEV4ZWN1dGFibGUsXG4gICAgICAgICAgY29uZmlndXJhdGlvbjogY2xvdWRFeGVjdXRhYmxlLmNvbmZpZ3VyYXRpb24sXG4gICAgICAgICAgc2RrUHJvdmlkZXI6IGNsb3VkRXhlY3V0YWJsZS5zZGtQcm92aWRlcixcbiAgICAgICAgICBkZXBsb3ltZW50czogbmV3IEZha2VDbG91ZEZvcm1hdGlvbih7XG4gICAgICAgICAgICAnVGVzdC1TdGFjay1Ob3RpZmljYXRpb24tQXJucyc6IHsgRm9vOiAnQmFyJyB9LFxuICAgICAgICAgIH0sIGV4cGVjdGVkTm90aWZpY2F0aW9uQXJucyksXG4gICAgICAgIH0pO1xuXG4gICAgICAgIC8vIFdIRU5cbiAgICAgICAgYXdhaXQgdG9vbGtpdC5kZXBsb3koe1xuICAgICAgICAgIHNlbGVjdG9yOiB7IHBhdHRlcm5zOiBbJ1Rlc3QtU3RhY2stTm90aWZpY2F0aW9uLUFybnMnXSB9LFxuICAgICAgICAgIGhvdHN3YXA6IEhvdHN3YXBNb2RlLkZVTExfREVQTE9ZTUVOVCxcbiAgICAgICAgfSk7XG4gICAgICB9KTtcblxuICAgICAgdGVzdCgnZmFpbCB3aXRoIGluY29ycmVjdCBzbnMgbm90aWZpY2F0aW9uIGFybnMgaW4gdGhlIGV4ZWN1dGFibGUnLCBhc3luYyAoKSA9PiB7XG4gICAgICAgIC8vIEdJVkVOXG4gICAgICAgIGNvbnN0IHRvb2xraXQgPSBuZXcgQ2RrVG9vbGtpdCh7XG4gICAgICAgICAgY2xvdWRFeGVjdXRhYmxlLFxuICAgICAgICAgIGNvbmZpZ3VyYXRpb246IGNsb3VkRXhlY3V0YWJsZS5jb25maWd1cmF0aW9uLFxuICAgICAgICAgIHNka1Byb3ZpZGVyOiBjbG91ZEV4ZWN1dGFibGUuc2RrUHJvdmlkZXIsXG4gICAgICAgICAgZGVwbG95bWVudHM6IG5ldyBGYWtlQ2xvdWRGb3JtYXRpb24oe1xuICAgICAgICAgICAgJ1Rlc3QtU3RhY2stQmFkLU5vdGlmaWNhdGlvbi1Bcm5zJzogeyBGb286ICdCYXInIH0sXG4gICAgICAgICAgfSksXG4gICAgICAgIH0pO1xuXG4gICAgICAgIC8vIFdIRU5cbiAgICAgICAgYXdhaXQgZXhwZWN0KCgpID0+XG4gICAgICAgICAgdG9vbGtpdC5kZXBsb3koe1xuICAgICAgICAgICAgc2VsZWN0b3I6IHsgcGF0dGVybnM6IFsnVGVzdC1TdGFjay1CYWQtTm90aWZpY2F0aW9uLUFybnMnXSB9LFxuICAgICAgICAgICAgaG90c3dhcDogSG90c3dhcE1vZGUuRlVMTF9ERVBMT1lNRU5ULFxuICAgICAgICAgIH0pLFxuICAgICAgICApLnJlamVjdHMudG9UaHJvdygnTm90aWZpY2F0aW9uIGFybiBhcm46MTMzNzoxMjM0NTY3ODkwMTI6c25zOmJhZCBpcyBub3QgYSB2YWxpZCBhcm4gZm9yIGFuIFNOUyB0b3BpYycpO1xuICAgICAgfSk7XG5cbiAgICAgIHRlc3QoJ3dpdGggc25zIG5vdGlmaWNhdGlvbiBhcm5zIGluIHRoZSBleGVjdXRhYmxlIGFuZCBhcyBvcHRpb25zJywgYXN5bmMgKCkgPT4ge1xuICAgICAgICAvLyBHSVZFTlxuICAgICAgICBjb25zdCBub3RpZmljYXRpb25Bcm5zID0gW1xuICAgICAgICAgICdhcm46YXdzOnNuczp1cy1lYXN0LTI6NDQ0NDU1NTU2NjY2Ok15VG9waWMnLFxuICAgICAgICAgICdhcm46YXdzOnNuczpldS13ZXN0LTE6MTExMTU1NTU2NjY2Om15LWdyZWF0LXRvcGljJyxcbiAgICAgICAgXTtcblxuICAgICAgICBjb25zdCBleHBlY3RlZE5vdGlmaWNhdGlvbkFybnMgPSBub3RpZmljYXRpb25Bcm5zLmNvbmNhdChbJ2Fybjphd3M6c25zOmJlcm11ZGEtdHJpYW5nbGUtMTMzNzoxMjM0NTY3ODkwMTI6TXlUb3BpYyddKTtcbiAgICAgICAgY29uc3QgdG9vbGtpdCA9IG5ldyBDZGtUb29sa2l0KHtcbiAgICAgICAgICBjbG91ZEV4ZWN1dGFibGUsXG4gICAgICAgICAgY29uZmlndXJhdGlvbjogY2xvdWRFeGVjdXRhYmxlLmNvbmZpZ3VyYXRpb24sXG4gICAgICAgICAgc2RrUHJvdmlkZXI6IGNsb3VkRXhlY3V0YWJsZS5zZGtQcm92aWRlcixcbiAgICAgICAgICBkZXBsb3ltZW50czogbmV3IEZha2VDbG91ZEZvcm1hdGlvbih7XG4gICAgICAgICAgICAnVGVzdC1TdGFjay1Ob3RpZmljYXRpb24tQXJucyc6IHsgRm9vOiAnQmFyJyB9LFxuICAgICAgICAgIH0sIGV4cGVjdGVkTm90aWZpY2F0aW9uQXJucyksXG4gICAgICAgIH0pO1xuXG4gICAgICAgIC8vIFdIRU5cbiAgICAgICAgYXdhaXQgdG9vbGtpdC5kZXBsb3koe1xuICAgICAgICAgIHNlbGVjdG9yOiB7IHBhdHRlcm5zOiBbJ1Rlc3QtU3RhY2stTm90aWZpY2F0aW9uLUFybnMnXSB9LFxuICAgICAgICAgIG5vdGlmaWNhdGlvbkFybnMsXG4gICAgICAgICAgaG90c3dhcDogSG90c3dhcE1vZGUuRlVMTF9ERVBMT1lNRU5ULFxuICAgICAgICB9KTtcbiAgICAgIH0pO1xuXG4gICAgICB0ZXN0KCdmYWlsIHdpdGggaW5jb3JyZWN0IHNucyBub3RpZmljYXRpb24gYXJucyBpbiB0aGUgZXhlY3V0YWJsZSBhbmQgaW5jb3JyZWN0IHNucyBub3RpZmljYXRpb24gYXJucyBhcyBvcHRpb25zJywgYXN5bmMgKCkgPT4ge1xuICAgICAgICAvLyBHSVZFTlxuICAgICAgICBjb25zdCBub3RpZmljYXRpb25Bcm5zID0gWydhcm46OjpjZm4tbXktY29vbC10b3BpYyddO1xuICAgICAgICBjb25zdCB0b29sa2l0ID0gbmV3IENka1Rvb2xraXQoe1xuICAgICAgICAgIGNsb3VkRXhlY3V0YWJsZSxcbiAgICAgICAgICBjb25maWd1cmF0aW9uOiBjbG91ZEV4ZWN1dGFibGUuY29uZmlndXJhdGlvbixcbiAgICAgICAgICBzZGtQcm92aWRlcjogY2xvdWRFeGVjdXRhYmxlLnNka1Byb3ZpZGVyLFxuICAgICAgICAgIGRlcGxveW1lbnRzOiBuZXcgRmFrZUNsb3VkRm9ybWF0aW9uKHtcbiAgICAgICAgICAgICdUZXN0LVN0YWNrLUJhZC1Ob3RpZmljYXRpb24tQXJucyc6IHsgRm9vOiAnQmFyJyB9LFxuICAgICAgICAgIH0sIG5vdGlmaWNhdGlvbkFybnMpLFxuICAgICAgICB9KTtcblxuICAgICAgICAvLyBXSEVOXG4gICAgICAgIGF3YWl0IGV4cGVjdCgoKSA9PlxuICAgICAgICAgIHRvb2xraXQuZGVwbG95KHtcbiAgICAgICAgICAgIHNlbGVjdG9yOiB7IHBhdHRlcm5zOiBbJ1Rlc3QtU3RhY2stQmFkLU5vdGlmaWNhdGlvbi1Bcm5zJ10gfSxcbiAgICAgICAgICAgIG5vdGlmaWNhdGlvbkFybnMsXG4gICAgICAgICAgICBob3Rzd2FwOiBIb3Rzd2FwTW9kZS5GVUxMX0RFUExPWU1FTlQsXG4gICAgICAgICAgfSksXG4gICAgICAgICkucmVqZWN0cy50b1Rocm93KCdOb3RpZmljYXRpb24gYXJuIGFybjo6OmNmbi1teS1jb29sLXRvcGljIGlzIG5vdCBhIHZhbGlkIGFybiBmb3IgYW4gU05TIHRvcGljJyk7XG4gICAgICB9KTtcblxuICAgICAgdGVzdCgnZmFpbCB3aXRoIGluY29ycmVjdCBzbnMgbm90aWZpY2F0aW9uIGFybnMgaW4gdGhlIGV4ZWN1dGFibGUgYW5kIGNvcnJlY3Qgc25zIG5vdGlmaWNhdGlvbiBhcm5zIGFzIG9wdGlvbnMnLCBhc3luYyAoKSA9PiB7XG4gICAgICAgIC8vIEdJVkVOXG4gICAgICAgIGNvbnN0IG5vdGlmaWNhdGlvbkFybnMgPSBbJ2Fybjphd3M6c25zOmJlcm11ZGEtdHJpYW5nbGUtMTMzNzoxMjM0NTY3ODkwMTI6TXlUb3BpYyddO1xuICAgICAgICBjb25zdCB0b29sa2l0ID0gbmV3IENka1Rvb2xraXQoe1xuICAgICAgICAgIGNsb3VkRXhlY3V0YWJsZSxcbiAgICAgICAgICBjb25maWd1cmF0aW9uOiBjbG91ZEV4ZWN1dGFibGUuY29uZmlndXJhdGlvbixcbiAgICAgICAgICBzZGtQcm92aWRlcjogY2xvdWRFeGVjdXRhYmxlLnNka1Byb3ZpZGVyLFxuICAgICAgICAgIGRlcGxveW1lbnRzOiBuZXcgRmFrZUNsb3VkRm9ybWF0aW9uKHtcbiAgICAgICAgICAgICdUZXN0LVN0YWNrLUJhZC1Ob3RpZmljYXRpb24tQXJucyc6IHsgRm9vOiAnQmFyJyB9LFxuICAgICAgICAgIH0sIG5vdGlmaWNhdGlvbkFybnMpLFxuICAgICAgICB9KTtcblxuICAgICAgICAvLyBXSEVOXG4gICAgICAgIGF3YWl0IGV4cGVjdCgoKSA9PlxuICAgICAgICAgIHRvb2xraXQuZGVwbG95KHtcbiAgICAgICAgICAgIHNlbGVjdG9yOiB7IHBhdHRlcm5zOiBbJ1Rlc3QtU3RhY2stQmFkLU5vdGlmaWNhdGlvbi1Bcm5zJ10gfSxcbiAgICAgICAgICAgIG5vdGlmaWNhdGlvbkFybnMsXG4gICAgICAgICAgICBob3Rzd2FwOiBIb3Rzd2FwTW9kZS5GVUxMX0RFUExPWU1FTlQsXG4gICAgICAgICAgfSksXG4gICAgICAgICkucmVqZWN0cy50b1Rocm93KCdOb3RpZmljYXRpb24gYXJuIGFybjoxMzM3OjEyMzQ1Njc4OTAxMjpzbnM6YmFkIGlzIG5vdCBhIHZhbGlkIGFybiBmb3IgYW4gU05TIHRvcGljJyk7XG4gICAgICB9KTtcblxuICAgICAgdGVzdCgnZmFpbCB3aXRoIGNvcnJlY3Qgc25zIG5vdGlmaWNhdGlvbiBhcm5zIGluIHRoZSBleGVjdXRhYmxlIGFuZCBpbmNvcnJlY3Qgc25zIG5vdGlmaWNhdGlvbiBhcm5zIGFzIG9wdGlvbnMnLCBhc3luYyAoKSA9PiB7XG4gICAgICAgIC8vIEdJVkVOXG4gICAgICAgIGNvbnN0IG5vdGlmaWNhdGlvbkFybnMgPSBbJ2Fybjo6OmNmbi1teS1jb29sLXRvcGljJ107XG4gICAgICAgIGNvbnN0IHRvb2xraXQgPSBuZXcgQ2RrVG9vbGtpdCh7XG4gICAgICAgICAgY2xvdWRFeGVjdXRhYmxlLFxuICAgICAgICAgIGNvbmZpZ3VyYXRpb246IGNsb3VkRXhlY3V0YWJsZS5jb25maWd1cmF0aW9uLFxuICAgICAgICAgIHNka1Byb3ZpZGVyOiBjbG91ZEV4ZWN1dGFibGUuc2RrUHJvdmlkZXIsXG4gICAgICAgICAgZGVwbG95bWVudHM6IG5ldyBGYWtlQ2xvdWRGb3JtYXRpb24oe1xuICAgICAgICAgICAgJ1Rlc3QtU3RhY2stTm90aWZpY2F0aW9uLUFybnMnOiB7IEZvbzogJ0JhcicgfSxcbiAgICAgICAgICB9LCBub3RpZmljYXRpb25Bcm5zKSxcbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gV0hFTlxuICAgICAgICBhd2FpdCBleHBlY3QoKCkgPT5cbiAgICAgICAgICB0b29sa2l0LmRlcGxveSh7XG4gICAgICAgICAgICBzZWxlY3RvcjogeyBwYXR0ZXJuczogWydUZXN0LVN0YWNrLU5vdGlmaWNhdGlvbi1Bcm5zJ10gfSxcbiAgICAgICAgICAgIG5vdGlmaWNhdGlvbkFybnMsXG4gICAgICAgICAgICBob3Rzd2FwOiBIb3Rzd2FwTW9kZS5GVUxMX0RFUExPWU1FTlQsXG4gICAgICAgICAgfSksXG4gICAgICAgICkucmVqZWN0cy50b1Rocm93KCdOb3RpZmljYXRpb24gYXJuIGFybjo6OmNmbi1teS1jb29sLXRvcGljIGlzIG5vdCBhIHZhbGlkIGFybiBmb3IgYW4gU05TIHRvcGljJyk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgdGVzdCgnZ2xvYmxlc3MgYm9vdHN0cmFwIHVzZXMgZW52aXJvbm1lbnQgd2l0aG91dCBxdWVzdGlvbicsIGFzeW5jICgpID0+IHtcbiAgICAvLyBHSVZFTlxuICAgIGNvbnN0IHRvb2xraXQgPSBkZWZhdWx0VG9vbGtpdFNldHVwKCk7XG5cbiAgICAvLyBXSEVOXG4gICAgYXdhaXQgdG9vbGtpdC5ib290c3RyYXAoWydhd3M6Ly81Njc4OS9zb3V0aC1wb2xlJ10sIGJvb3RzdHJhcHBlciwge30pO1xuXG4gICAgLy8gVEhFTlxuICAgIGV4cGVjdChib290c3RyYXBwZXIuYm9vdHN0cmFwRW52aXJvbm1lbnQpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKHtcbiAgICAgIGFjY291bnQ6ICc1Njc4OScsXG4gICAgICByZWdpb246ICdzb3V0aC1wb2xlJyxcbiAgICAgIG5hbWU6ICdhd3M6Ly81Njc4OS9zb3V0aC1wb2xlJyxcbiAgICB9LCBleHBlY3QuYW55dGhpbmcoKSwgZXhwZWN0LmFueXRoaW5nKCkpO1xuICAgIGV4cGVjdChib290c3RyYXBwZXIuYm9vdHN0cmFwRW52aXJvbm1lbnQpLnRvSGF2ZUJlZW5DYWxsZWRUaW1lcygxKTtcbiAgfSk7XG5cbiAgdGVzdCgnZ2xvYmJ5IGJvb3RzdHJhcCB1c2VzIHdoYXRzIGluIHRoZSBzdGFja3MnLCBhc3luYyAoKSA9PiB7XG4gICAgLy8gR0lWRU5cbiAgICBjb25zdCB0b29sa2l0ID0gZGVmYXVsdFRvb2xraXRTZXR1cCgpO1xuICAgIGNsb3VkRXhlY3V0YWJsZS5jb25maWd1cmF0aW9uLnNldHRpbmdzLnNldChbJ2FwcCddLCAnc29tZXRoaW5nJyk7XG5cbiAgICAvLyBXSEVOXG4gICAgYXdhaXQgdG9vbGtpdC5ib290c3RyYXAoWydhd3M6Ly8qL2Jlcm11ZGEtdHJpYW5nbGUtMSddLCBib290c3RyYXBwZXIsIHt9KTtcblxuICAgIC8vIFRIRU5cbiAgICBleHBlY3QoYm9vdHN0cmFwcGVyLmJvb3RzdHJhcEVudmlyb25tZW50KS50b0hhdmVCZWVuQ2FsbGVkV2l0aCh7XG4gICAgICBhY2NvdW50OiAnMTIzNDU2Nzg5MDEyJyxcbiAgICAgIHJlZ2lvbjogJ2Jlcm11ZGEtdHJpYW5nbGUtMScsXG4gICAgICBuYW1lOiAnYXdzOi8vMTIzNDU2Nzg5MDEyL2Jlcm11ZGEtdHJpYW5nbGUtMScsXG4gICAgfSwgZXhwZWN0LmFueXRoaW5nKCksIGV4cGVjdC5hbnl0aGluZygpKTtcbiAgICBleHBlY3QoYm9vdHN0cmFwcGVyLmJvb3RzdHJhcEVudmlyb25tZW50KS50b0hhdmVCZWVuQ2FsbGVkVGltZXMoMSk7XG4gIH0pO1xuXG4gIHRlc3QoJ2Jvb3RzdHJhcCBjYW4gYmUgaW52b2tlZCB3aXRob3V0IHRoZSAtLWFwcCBhcmd1bWVudCcsIGFzeW5jICgpID0+IHtcbiAgICAvLyBHSVZFTlxuICAgIGNsb3VkRXhlY3V0YWJsZS5jb25maWd1cmF0aW9uLnNldHRpbmdzLmNsZWFyKCk7XG4gICAgY29uc3QgbW9ja1N5bnRoZXNpemUgPSBqZXN0LmZuKCk7XG4gICAgY2xvdWRFeGVjdXRhYmxlLnN5bnRoZXNpemUgPSBtb2NrU3ludGhlc2l6ZTtcblxuICAgIGNvbnN0IHRvb2xraXQgPSBkZWZhdWx0VG9vbGtpdFNldHVwKCk7XG5cbiAgICAvLyBXSEVOXG4gICAgYXdhaXQgdG9vbGtpdC5ib290c3RyYXAoWydhd3M6Ly8xMjM0NTY3ODkwMTIvd2VzdC1wb2xlJ10sIGJvb3RzdHJhcHBlciwge30pO1xuXG4gICAgLy8gVEhFTlxuICAgIGV4cGVjdChib290c3RyYXBwZXIuYm9vdHN0cmFwRW52aXJvbm1lbnQpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKHtcbiAgICAgIGFjY291bnQ6ICcxMjM0NTY3ODkwMTInLFxuICAgICAgcmVnaW9uOiAnd2VzdC1wb2xlJyxcbiAgICAgIG5hbWU6ICdhd3M6Ly8xMjM0NTY3ODkwMTIvd2VzdC1wb2xlJyxcbiAgICB9LCBleHBlY3QuYW55dGhpbmcoKSwgZXhwZWN0LmFueXRoaW5nKCkpO1xuICAgIGV4cGVjdChib290c3RyYXBwZXIuYm9vdHN0cmFwRW52aXJvbm1lbnQpLnRvSGF2ZUJlZW5DYWxsZWRUaW1lcygxKTtcblxuICAgIGV4cGVjdChjbG91ZEV4ZWN1dGFibGUuaGFzQXBwKS50b0VxdWFsKGZhbHNlKTtcbiAgICBleHBlY3QobW9ja1N5bnRoZXNpemUpLm5vdC50b0hhdmVCZWVuQ2FsbGVkKCk7XG4gIH0pO1xufSk7XG5cbmRlc2NyaWJlKCdkZXN0cm95JywgKCkgPT4ge1xuICB0ZXN0KCdkZXN0cm95IGNvcnJlY3Qgc3RhY2snLCBhc3luYyAoKSA9PiB7XG4gICAgY29uc3QgdG9vbGtpdCA9IGRlZmF1bHRUb29sa2l0U2V0dXAoKTtcblxuICAgIGV4cGVjdCgoKSA9PiB7XG4gICAgICByZXR1cm4gdG9vbGtpdC5kZXN0cm95KHtcbiAgICAgICAgc2VsZWN0b3I6IHsgcGF0dGVybnM6IFsnVGVzdC1TdGFjay1BL1Rlc3QtU3RhY2stQyddIH0sXG4gICAgICAgIGV4Y2x1c2l2ZWx5OiB0cnVlLFxuICAgICAgICBmb3JjZTogdHJ1ZSxcbiAgICAgICAgZnJvbURlcGxveTogdHJ1ZSxcbiAgICAgIH0pO1xuICAgIH0pLnJlc29sdmVzO1xuICB9KTtcbn0pO1xuXG5kZXNjcmliZSgnd2F0Y2gnLCAoKSA9PiB7XG4gIHRlc3QoXCJmYWlscyB3aGVuIG5vICd3YXRjaCcgc2V0dGluZ3MgYXJlIGZvdW5kXCIsIGFzeW5jICgpID0+IHtcbiAgICBjb25zdCB0b29sa2l0ID0gZGVmYXVsdFRvb2xraXRTZXR1cCgpO1xuXG4gICAgYXdhaXQgZXhwZWN0KCgpID0+IHtcbiAgICAgIHJldHVybiB0b29sa2l0LndhdGNoKHtcbiAgICAgICAgc2VsZWN0b3I6IHsgcGF0dGVybnM6IFtdIH0sXG4gICAgICAgIGhvdHN3YXA6IEhvdHN3YXBNb2RlLkhPVFNXQVBfT05MWSxcbiAgICAgIH0pO1xuICAgIH0pLnJlamVjdHMudG9UaHJvdyhcIkNhbm5vdCB1c2UgdGhlICd3YXRjaCcgY29tbWFuZCB3aXRob3V0IHNwZWNpZnlpbmcgYXQgbGVhc3Qgb25lIGRpcmVjdG9yeSB0byBtb25pdG9yLiBcIiArXG4gICAgICAnTWFrZSBzdXJlIHRvIGFkZCBhIFwid2F0Y2hcIiBrZXkgdG8geW91ciBjZGsuanNvbicpO1xuICB9KTtcblxuICB0ZXN0KCdvYnNlcnZlcyBvbmx5IHRoZSByb290IGRpcmVjdG9yeSBieSBkZWZhdWx0JywgYXN5bmMgKCkgPT4ge1xuICAgIGNsb3VkRXhlY3V0YWJsZS5jb25maWd1cmF0aW9uLnNldHRpbmdzLnNldChbJ3dhdGNoJ10sIHt9KTtcbiAgICBjb25zdCB0b29sa2l0ID0gZGVmYXVsdFRvb2xraXRTZXR1cCgpO1xuXG4gICAgYXdhaXQgdG9vbGtpdC53YXRjaCh7XG4gICAgICBzZWxlY3RvcjogeyBwYXR0ZXJuczogW10gfSxcbiAgICAgIGhvdHN3YXA6IEhvdHN3YXBNb2RlLkhPVFNXQVBfT05MWSxcbiAgICB9KTtcblxuICAgIGNvbnN0IGluY2x1ZGVBcmdzID0gZmFrZUNob2tpZGFyV2F0Y2guaW5jbHVkZUFyZ3M7XG4gICAgZXhwZWN0KGluY2x1ZGVBcmdzLmxlbmd0aCkudG9CZSgxKTtcbiAgfSk7XG5cbiAgdGVzdChcImFsbG93cyBwcm92aWRpbmcgYSBzaW5nbGUgc3RyaW5nIGluICd3YXRjaC5pbmNsdWRlJ1wiLCBhc3luYyAoKSA9PiB7XG4gICAgY2xvdWRFeGVjdXRhYmxlLmNvbmZpZ3VyYXRpb24uc2V0dGluZ3Muc2V0KFsnd2F0Y2gnXSwge1xuICAgICAgaW5jbHVkZTogJ215LWRpcicsXG4gICAgfSk7XG4gICAgY29uc3QgdG9vbGtpdCA9IGRlZmF1bHRUb29sa2l0U2V0dXAoKTtcblxuICAgIGF3YWl0IHRvb2xraXQud2F0Y2goe1xuICAgICAgc2VsZWN0b3I6IHsgcGF0dGVybnM6IFtdIH0sXG4gICAgICBob3Rzd2FwOiBIb3Rzd2FwTW9kZS5IT1RTV0FQX09OTFksXG4gICAgfSk7XG5cbiAgICBleHBlY3QoZmFrZUNob2tpZGFyV2F0Y2guaW5jbHVkZUFyZ3MpLnRvU3RyaWN0RXF1YWwoWydteS1kaXInXSk7XG4gIH0pO1xuXG4gIHRlc3QoXCJhbGxvd3MgcHJvdmlkaW5nIGFuIGFycmF5IG9mIHN0cmluZ3MgaW4gJ3dhdGNoLmluY2x1ZGUnXCIsIGFzeW5jICgpID0+IHtcbiAgICBjbG91ZEV4ZWN1dGFibGUuY29uZmlndXJhdGlvbi5zZXR0aW5ncy5zZXQoWyd3YXRjaCddLCB7XG4gICAgICBpbmNsdWRlOiBbJ215LWRpcjEnLCAnKiovbXktZGlyMi8qJ10sXG4gICAgfSk7XG4gICAgY29uc3QgdG9vbGtpdCA9IGRlZmF1bHRUb29sa2l0U2V0dXAoKTtcblxuICAgIGF3YWl0IHRvb2xraXQud2F0Y2goe1xuICAgICAgc2VsZWN0b3I6IHsgcGF0dGVybnM6IFtdIH0sXG4gICAgICBob3Rzd2FwOiBIb3Rzd2FwTW9kZS5IT1RTV0FQX09OTFksXG4gICAgfSk7XG5cbiAgICBleHBlY3QoZmFrZUNob2tpZGFyV2F0Y2guaW5jbHVkZUFyZ3MpLnRvU3RyaWN0RXF1YWwoWydteS1kaXIxJywgJyoqL215LWRpcjIvKiddKTtcbiAgfSk7XG5cbiAgdGVzdCgnaWdub3JlcyB0aGUgb3V0cHV0IGRpciwgZG90IGZpbGVzLCBkb3QgZGlyZWN0b3JpZXMsIGFuZCBub2RlX21vZHVsZXMgYnkgZGVmYXVsdCcsIGFzeW5jICgpID0+IHtcbiAgICBjbG91ZEV4ZWN1dGFibGUuY29uZmlndXJhdGlvbi5zZXR0aW5ncy5zZXQoWyd3YXRjaCddLCB7fSk7XG4gICAgY2xvdWRFeGVjdXRhYmxlLmNvbmZpZ3VyYXRpb24uc2V0dGluZ3Muc2V0KFsnb3V0cHV0J10sICdjZGsub3V0Jyk7XG4gICAgY29uc3QgdG9vbGtpdCA9IGRlZmF1bHRUb29sa2l0U2V0dXAoKTtcblxuICAgIGF3YWl0IHRvb2xraXQud2F0Y2goe1xuICAgICAgc2VsZWN0b3I6IHsgcGF0dGVybnM6IFtdIH0sXG4gICAgICBob3Rzd2FwOiBIb3Rzd2FwTW9kZS5IT1RTV0FQX09OTFksXG4gICAgfSk7XG5cbiAgICBleHBlY3QoZmFrZUNob2tpZGFyV2F0Y2guZXhjbHVkZUFyZ3MpLnRvU3RyaWN0RXF1YWwoW1xuICAgICAgJ2Nkay5vdXQvKionLFxuICAgICAgJyoqLy4qJyxcbiAgICAgICcqKi8uKi8qKicsXG4gICAgICAnKiovbm9kZV9tb2R1bGVzLyoqJyxcbiAgICBdKTtcbiAgfSk7XG5cbiAgdGVzdChcImFsbG93cyBwcm92aWRpbmcgYSBzaW5nbGUgc3RyaW5nIGluICd3YXRjaC5leGNsdWRlJ1wiLCBhc3luYyAoKSA9PiB7XG4gICAgY2xvdWRFeGVjdXRhYmxlLmNvbmZpZ3VyYXRpb24uc2V0dGluZ3Muc2V0KFsnd2F0Y2gnXSwge1xuICAgICAgZXhjbHVkZTogJ215LWRpcicsXG4gICAgfSk7XG4gICAgY29uc3QgdG9vbGtpdCA9IGRlZmF1bHRUb29sa2l0U2V0dXAoKTtcblxuICAgIGF3YWl0IHRvb2xraXQud2F0Y2goe1xuICAgICAgc2VsZWN0b3I6IHsgcGF0dGVybnM6IFtdIH0sXG4gICAgICBob3Rzd2FwOiBIb3Rzd2FwTW9kZS5IT1RTV0FQX09OTFksXG4gICAgfSk7XG5cbiAgICBjb25zdCBleGNsdWRlQXJncyA9IGZha2VDaG9raWRhcldhdGNoLmV4Y2x1ZGVBcmdzO1xuICAgIGV4cGVjdChleGNsdWRlQXJncy5sZW5ndGgpLnRvQmUoNSk7XG4gICAgZXhwZWN0KGV4Y2x1ZGVBcmdzWzBdKS50b0JlKCdteS1kaXInKTtcbiAgfSk7XG5cbiAgdGVzdChcImFsbG93cyBwcm92aWRpbmcgYW4gYXJyYXkgb2Ygc3RyaW5ncyBpbiAnd2F0Y2guZXhjbHVkZSdcIiwgYXN5bmMgKCkgPT4ge1xuICAgIGNsb3VkRXhlY3V0YWJsZS5jb25maWd1cmF0aW9uLnNldHRpbmdzLnNldChbJ3dhdGNoJ10sIHtcbiAgICAgIGV4Y2x1ZGU6IFsnbXktZGlyMScsICcqKi9teS1kaXIyJ10sXG4gICAgfSk7XG4gICAgY29uc3QgdG9vbGtpdCA9IGRlZmF1bHRUb29sa2l0U2V0dXAoKTtcblxuICAgIGF3YWl0IHRvb2xraXQud2F0Y2goe1xuICAgICAgc2VsZWN0b3I6IHsgcGF0dGVybnM6IFtdIH0sXG4gICAgICBob3Rzd2FwOiBIb3Rzd2FwTW9kZS5IT1RTV0FQX09OTFksXG4gICAgfSk7XG5cbiAgICBjb25zdCBleGNsdWRlQXJncyA9IGZha2VDaG9raWRhcldhdGNoLmV4Y2x1ZGVBcmdzO1xuICAgIGV4cGVjdChleGNsdWRlQXJncy5sZW5ndGgpLnRvQmUoNik7XG4gICAgZXhwZWN0KGV4Y2x1ZGVBcmdzWzBdKS50b0JlKCdteS1kaXIxJyk7XG4gICAgZXhwZWN0KGV4Y2x1ZGVBcmdzWzFdKS50b0JlKCcqKi9teS1kaXIyJyk7XG4gIH0pO1xuXG4gIHRlc3QoJ2FsbG93cyB3YXRjaGluZyB3aXRoIGRlcGxveSBjb25jdXJyZW5jeScsIGFzeW5jICgpID0+IHtcbiAgICBjbG91ZEV4ZWN1dGFibGUuY29uZmlndXJhdGlvbi5zZXR0aW5ncy5zZXQoWyd3YXRjaCddLCB7fSk7XG4gICAgY29uc3QgdG9vbGtpdCA9IGRlZmF1bHRUb29sa2l0U2V0dXAoKTtcbiAgICBjb25zdCBjZGtEZXBsb3lNb2NrID0gamVzdC5mbigpO1xuICAgIHRvb2xraXQuZGVwbG95ID0gY2RrRGVwbG95TW9jaztcblxuICAgIGF3YWl0IHRvb2xraXQud2F0Y2goe1xuICAgICAgc2VsZWN0b3I6IHsgcGF0dGVybnM6IFtdIH0sXG4gICAgICBjb25jdXJyZW5jeTogMyxcbiAgICAgIGhvdHN3YXA6IEhvdHN3YXBNb2RlLkhPVFNXQVBfT05MWSxcbiAgICB9KTtcbiAgICBmYWtlQ2hva2lkYXJXYXRjaGVyT24ucmVhZHlDYWxsYmFjaygpO1xuXG4gICAgZXhwZWN0KGNka0RlcGxveU1vY2spLnRvQmVDYWxsZWRXaXRoKGV4cGVjdC5vYmplY3RDb250YWluaW5nKHsgY29uY3VycmVuY3k6IDMgfSkpO1xuICB9KTtcblxuICBkZXNjcmliZS5lYWNoKFtIb3Rzd2FwTW9kZS5GQUxMX0JBQ0ssIEhvdHN3YXBNb2RlLkhPVFNXQVBfT05MWV0pKCclcCBtb2RlJywgKGhvdHN3YXBNb2RlKSA9PiB7XG4gICAgdGVzdCgncGFzc2VzIHRocm91Z2ggdGhlIGNvcnJlY3QgaG90c3dhcCBtb2RlIHRvIGRlcGxveVN0YWNrKCknLCBhc3luYyAoKSA9PiB7XG4gICAgICBjbG91ZEV4ZWN1dGFibGUuY29uZmlndXJhdGlvbi5zZXR0aW5ncy5zZXQoWyd3YXRjaCddLCB7fSk7XG4gICAgICBjb25zdCB0b29sa2l0ID0gZGVmYXVsdFRvb2xraXRTZXR1cCgpO1xuICAgICAgY29uc3QgY2RrRGVwbG95TW9jayA9IGplc3QuZm4oKTtcbiAgICAgIHRvb2xraXQuZGVwbG95ID0gY2RrRGVwbG95TW9jaztcblxuICAgICAgYXdhaXQgdG9vbGtpdC53YXRjaCh7IHNlbGVjdG9yOiB7IHBhdHRlcm5zOiBbXSB9LCBob3Rzd2FwOiBob3Rzd2FwTW9kZSB9KTtcbiAgICAgIGZha2VDaG9raWRhcldhdGNoZXJPbi5yZWFkeUNhbGxiYWNrKCk7XG5cbiAgICAgIGV4cGVjdChjZGtEZXBsb3lNb2NrKS50b0JlQ2FsbGVkV2l0aChleHBlY3Qub2JqZWN0Q29udGFpbmluZyh7IGhvdHN3YXA6IGhvdHN3YXBNb2RlIH0pKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgdGVzdCgncmVzcGVjdHMgSG90c3dhcE1vZGUuSE9UU1dBUF9PTkxZJywgYXN5bmMgKCkgPT4ge1xuICAgIGNsb3VkRXhlY3V0YWJsZS5jb25maWd1cmF0aW9uLnNldHRpbmdzLnNldChbJ3dhdGNoJ10sIHt9KTtcbiAgICBjb25zdCB0b29sa2l0ID0gZGVmYXVsdFRvb2xraXRTZXR1cCgpO1xuICAgIGNvbnN0IGNka0RlcGxveU1vY2sgPSBqZXN0LmZuKCk7XG4gICAgdG9vbGtpdC5kZXBsb3kgPSBjZGtEZXBsb3lNb2NrO1xuXG4gICAgYXdhaXQgdG9vbGtpdC53YXRjaCh7IHNlbGVjdG9yOiB7IHBhdHRlcm5zOiBbXSB9LCBob3Rzd2FwOiBIb3Rzd2FwTW9kZS5IT1RTV0FQX09OTFkgfSk7XG4gICAgZmFrZUNob2tpZGFyV2F0Y2hlck9uLnJlYWR5Q2FsbGJhY2soKTtcblxuICAgIGV4cGVjdChjZGtEZXBsb3lNb2NrKS50b0JlQ2FsbGVkV2l0aChleHBlY3Qub2JqZWN0Q29udGFpbmluZyh7IGhvdHN3YXA6IEhvdHN3YXBNb2RlLkhPVFNXQVBfT05MWSB9KSk7XG4gIH0pO1xuXG4gIHRlc3QoJ3Jlc3BlY3RzIEhvdHN3YXBNb2RlLkZBTExfQkFDSycsIGFzeW5jICgpID0+IHtcbiAgICBjbG91ZEV4ZWN1dGFibGUuY29uZmlndXJhdGlvbi5zZXR0aW5ncy5zZXQoWyd3YXRjaCddLCB7fSk7XG4gICAgY29uc3QgdG9vbGtpdCA9IGRlZmF1bHRUb29sa2l0U2V0dXAoKTtcbiAgICBjb25zdCBjZGtEZXBsb3lNb2NrID0gamVzdC5mbigpO1xuICAgIHRvb2xraXQuZGVwbG95ID0gY2RrRGVwbG95TW9jaztcblxuICAgIGF3YWl0IHRvb2xraXQud2F0Y2goeyBzZWxlY3RvcjogeyBwYXR0ZXJuczogW10gfSwgaG90c3dhcDogSG90c3dhcE1vZGUuRkFMTF9CQUNLIH0pO1xuICAgIGZha2VDaG9raWRhcldhdGNoZXJPbi5yZWFkeUNhbGxiYWNrKCk7XG5cbiAgICBleHBlY3QoY2RrRGVwbG95TW9jaykudG9CZUNhbGxlZFdpdGgoZXhwZWN0Lm9iamVjdENvbnRhaW5pbmcoeyBob3Rzd2FwOiBIb3Rzd2FwTW9kZS5GQUxMX0JBQ0sgfSkpO1xuICB9KTtcblxuICB0ZXN0KCdyZXNwZWN0cyBIb3Rzd2FwTW9kZS5GVUxMX0RFUExPWU1FTlQnLCBhc3luYyAoKSA9PiB7XG4gICAgY2xvdWRFeGVjdXRhYmxlLmNvbmZpZ3VyYXRpb24uc2V0dGluZ3Muc2V0KFsnd2F0Y2gnXSwge30pO1xuICAgIGNvbnN0IHRvb2xraXQgPSBkZWZhdWx0VG9vbGtpdFNldHVwKCk7XG4gICAgY29uc3QgY2RrRGVwbG95TW9jayA9IGplc3QuZm4oKTtcbiAgICB0b29sa2l0LmRlcGxveSA9IGNka0RlcGxveU1vY2s7XG5cbiAgICBhd2FpdCB0b29sa2l0LndhdGNoKHsgc2VsZWN0b3I6IHsgcGF0dGVybnM6IFtdIH0sIGhvdHN3YXA6IEhvdHN3YXBNb2RlLkZVTExfREVQTE9ZTUVOVCB9KTtcbiAgICBmYWtlQ2hva2lkYXJXYXRjaGVyT24ucmVhZHlDYWxsYmFjaygpO1xuXG4gICAgZXhwZWN0KGNka0RlcGxveU1vY2spLnRvQmVDYWxsZWRXaXRoKGV4cGVjdC5vYmplY3RDb250YWluaW5nKHsgaG90c3dhcDogSG90c3dhcE1vZGUuRlVMTF9ERVBMT1lNRU5UIH0pKTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ3dpdGggZmlsZSBjaGFuZ2UgZXZlbnRzJywgKCkgPT4ge1xuICAgIGxldCB0b29sa2l0OiBDZGtUb29sa2l0O1xuICAgIGxldCBjZGtEZXBsb3lNb2NrOiBqZXN0Lk1vY2s7XG5cbiAgICBiZWZvcmVFYWNoKGFzeW5jICgpID0+IHtcbiAgICAgIGNsb3VkRXhlY3V0YWJsZS5jb25maWd1cmF0aW9uLnNldHRpbmdzLnNldChbJ3dhdGNoJ10sIHt9KTtcbiAgICAgIHRvb2xraXQgPSBkZWZhdWx0VG9vbGtpdFNldHVwKCk7XG4gICAgICBjZGtEZXBsb3lNb2NrID0gamVzdC5mbigpO1xuICAgICAgdG9vbGtpdC5kZXBsb3kgPSBjZGtEZXBsb3lNb2NrO1xuICAgICAgYXdhaXQgdG9vbGtpdC53YXRjaCh7XG4gICAgICAgIHNlbGVjdG9yOiB7IHBhdHRlcm5zOiBbXSB9LFxuICAgICAgICBob3Rzd2FwOiBIb3Rzd2FwTW9kZS5IT1RTV0FQX09OTFksXG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIHRlc3QoXCJkb2VzIG5vdCB0cmlnZ2VyIGEgJ2RlcGxveScgYmVmb3JlIHRoZSAncmVhZHknIGV2ZW50IGhhcyBmaXJlZFwiLCBhc3luYyAoKSA9PiB7XG4gICAgICBhd2FpdCBmYWtlQ2hva2lkYXJXYXRjaGVyT24uZmlsZUV2ZW50Q2FsbGJhY2soJ2FkZCcsICdteS1maWxlJyk7XG5cbiAgICAgIGV4cGVjdChjZGtEZXBsb3lNb2NrKS5ub3QudG9IYXZlQmVlbkNhbGxlZCgpO1xuICAgIH0pO1xuXG4gICAgZGVzY3JpYmUoXCJ3aGVuIHRoZSAncmVhZHknIGV2ZW50IGhhcyBhbHJlYWR5IGZpcmVkXCIsICgpID0+IHtcbiAgICAgIGJlZm9yZUVhY2goKCkgPT4ge1xuICAgICAgICAvLyBUaGUgcmVhZHkgY2FsbGJhY2sgdHJpZ2dlcnMgYSBkZXBsb3ltZW50IHNvIGVhY2ggdGVzdFxuICAgICAgICAvLyB0aGF0IHVzZXMgdGhpcyBmdW5jdGlvbiB3aWxsIHNlZSAnY2RrRGVwbG95TW9jaycgY2FsbGVkXG4gICAgICAgIC8vIGFuIGFkZGl0aW9uYWwgdGltZS5cbiAgICAgICAgZmFrZUNob2tpZGFyV2F0Y2hlck9uLnJlYWR5Q2FsbGJhY2soKTtcbiAgICAgIH0pO1xuXG4gICAgICB0ZXN0KFwiYW4gaW5pdGlhbCAnZGVwbG95JyBpcyB0cmlnZ2VyZWQsIHdpdGhvdXQgYW55IGZpbGUgY2hhbmdlc1wiLCBhc3luYyAoKSA9PiB7XG4gICAgICAgIGV4cGVjdChjZGtEZXBsb3lNb2NrKS50b0hhdmVCZWVuQ2FsbGVkVGltZXMoMSk7XG4gICAgICB9KTtcblxuICAgICAgdGVzdChcImRvZXMgdHJpZ2dlciBhICdkZXBsb3knIGZvciBhIGZpbGUgY2hhbmdlXCIsIGFzeW5jICgpID0+IHtcbiAgICAgICAgYXdhaXQgZmFrZUNob2tpZGFyV2F0Y2hlck9uLmZpbGVFdmVudENhbGxiYWNrKCdhZGQnLCAnbXktZmlsZScpO1xuXG4gICAgICAgIGV4cGVjdChjZGtEZXBsb3lNb2NrKS50b0hhdmVCZWVuQ2FsbGVkVGltZXMoMik7XG4gICAgICB9KTtcblxuICAgICAgdGVzdChcInRyaWdnZXJzIGEgJ2RlcGxveScgdHdpY2UgZm9yIHR3byBmaWxlIGNoYW5nZXNcIiwgYXN5bmMgKCkgPT4ge1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQGNka2xhYnMvcHJvbWlzZWFsbC1uby11bmJvdW5kZWQtcGFyYWxsZWxpc21cbiAgICAgICAgYXdhaXQgUHJvbWlzZS5hbGwoW1xuICAgICAgICAgIGZha2VDaG9raWRhcldhdGNoZXJPbi5maWxlRXZlbnRDYWxsYmFjaygnYWRkJywgJ215LWZpbGUxJyksXG4gICAgICAgICAgZmFrZUNob2tpZGFyV2F0Y2hlck9uLmZpbGVFdmVudENhbGxiYWNrKCdjaGFuZ2UnLCAnbXktZmlsZTInKSxcbiAgICAgICAgXSk7XG5cbiAgICAgICAgZXhwZWN0KGNka0RlcGxveU1vY2spLnRvSGF2ZUJlZW5DYWxsZWRUaW1lcygzKTtcbiAgICAgIH0pO1xuXG4gICAgICB0ZXN0KFwiYmF0Y2hlcyBmaWxlIGNoYW5nZXMgdGhhdCBoYXBwZW4gZHVyaW5nICdkZXBsb3knXCIsIGFzeW5jICgpID0+IHtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEBjZGtsYWJzL3Byb21pc2VhbGwtbm8tdW5ib3VuZGVkLXBhcmFsbGVsaXNtXG4gICAgICAgIGF3YWl0IFByb21pc2UuYWxsKFtcbiAgICAgICAgICBmYWtlQ2hva2lkYXJXYXRjaGVyT24uZmlsZUV2ZW50Q2FsbGJhY2soJ2FkZCcsICdteS1maWxlMScpLFxuICAgICAgICAgIGZha2VDaG9raWRhcldhdGNoZXJPbi5maWxlRXZlbnRDYWxsYmFjaygnY2hhbmdlJywgJ215LWZpbGUyJyksXG4gICAgICAgICAgZmFrZUNob2tpZGFyV2F0Y2hlck9uLmZpbGVFdmVudENhbGxiYWNrKCd1bmxpbmsnLCAnbXktZmlsZTMnKSxcbiAgICAgICAgICBmYWtlQ2hva2lkYXJXYXRjaGVyT24uZmlsZUV2ZW50Q2FsbGJhY2soJ2FkZCcsICdteS1maWxlNCcpLFxuICAgICAgICBdKTtcblxuICAgICAgICBleHBlY3QoY2RrRGVwbG95TW9jaykudG9IYXZlQmVlbkNhbGxlZFRpbWVzKDMpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH0pO1xufSk7XG5cbmRlc2NyaWJlKCdzeW50aCcsICgpID0+IHtcbiAgdGVzdCgnc3VjY2Vzc2Z1bCBzeW50aCBvdXRwdXRzIGhpZXJhcmNoaWNhbCBzdGFjayBpZHMnLCBhc3luYyAoKSA9PiB7XG4gICAgY29uc3QgdG9vbGtpdCA9IGRlZmF1bHRUb29sa2l0U2V0dXAoKTtcbiAgICBhd2FpdCB0b29sa2l0LnN5bnRoKFtdLCBmYWxzZSwgZmFsc2UpO1xuXG4gICAgLy8gU2VwYXJhdGUgdGVzdHMgYXMgY29sb3JpemluZyBoYW1wZXJzIGRldGVjdGlvblxuICAgIGV4cGVjdChzdGRlcnJNb2NrLm1vY2suY2FsbHNbMV1bMF0pLnRvTWF0Y2goJ1Rlc3QtU3RhY2stQS1EaXNwbGF5LU5hbWUnKTtcbiAgICBleHBlY3Qoc3RkZXJyTW9jay5tb2NrLmNhbGxzWzFdWzBdKS50b01hdGNoKCdUZXN0LVN0YWNrLUInKTtcbiAgfSk7XG5cbiAgdGVzdCgnd2l0aCBubyBzdGRvdXQgb3B0aW9uJywgYXN5bmMgKCkgPT4ge1xuICAgIC8vIEdJVkVcbiAgICBjb25zdCB0b29sa2l0ID0gZGVmYXVsdFRvb2xraXRTZXR1cCgpO1xuXG4gICAgLy8gVEhFTlxuICAgIGF3YWl0IHRvb2xraXQuc3ludGgoWydUZXN0LVN0YWNrLUEtRGlzcGxheS1OYW1lJ10sIGZhbHNlLCB0cnVlKTtcbiAgICBleHBlY3QobW9ja0RhdGEubW9jay5jYWxscy5sZW5ndGgpLnRvRXF1YWwoMCk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdtaWdyYXRlJywgKCkgPT4ge1xuICAgIGNvbnN0IHRlc3RSZXNvdXJjZVBhdGggPSBbX19kaXJuYW1lLCAnY29tbWFuZHMnLCAndGVzdC1yZXNvdXJjZXMnXTtcbiAgICBjb25zdCB0ZW1wbGF0ZVBhdGggPSBbLi4udGVzdFJlc291cmNlUGF0aCwgJ3RlbXBsYXRlcyddO1xuICAgIGNvbnN0IHNxc1RlbXBsYXRlUGF0aCA9IHBhdGguam9pbiguLi50ZW1wbGF0ZVBhdGgsICdzcXMtdGVtcGxhdGUuanNvbicpO1xuICAgIGNvbnN0IGF1dG9zY2FsaW5nVGVtcGxhdGVQYXRoID0gcGF0aC5qb2luKC4uLnRlbXBsYXRlUGF0aCwgJ2F1dG9zY2FsaW5nLXRlbXBsYXRlLnltbCcpO1xuICAgIGNvbnN0IHMzVGVtcGxhdGVQYXRoID0gcGF0aC5qb2luKC4uLnRlbXBsYXRlUGF0aCwgJ3MzLXRlbXBsYXRlLmpzb24nKTtcblxuICAgIHRlc3QoJ21pZ3JhdGUgZmFpbHMgd2hlbiBib3RoIC0tZnJvbS1wYXRoIGFuZCAtLWZyb20tc3RhY2sgYXJlIHByb3ZpZGVkJywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgdG9vbGtpdCA9IGRlZmF1bHRUb29sa2l0U2V0dXAoKTtcbiAgICAgIGF3YWl0IGV4cGVjdCgoKSA9PiB0b29sa2l0Lm1pZ3JhdGUoe1xuICAgICAgICBzdGFja05hbWU6ICduby1zb3VyY2UnLFxuICAgICAgICBmcm9tUGF0aDogJy4vaGVyZS90ZW1wbGF0ZS55bWwnLFxuICAgICAgICBmcm9tU3RhY2s6IHRydWUsXG4gICAgICB9KSkucmVqZWN0cy50b1Rocm93KCdPbmx5IG9uZSBvZiBgLS1mcm9tLXBhdGhgIG9yIGAtLWZyb20tc3RhY2tgIG1heSBiZSBwcm92aWRlZC4nKTtcbiAgICAgIGV4cGVjdChzdGRlcnJNb2NrLm1vY2suY2FsbHNbMV1bMF0pLnRvQ29udGFpbignIOKdjCAgTWlncmF0ZSBmYWlsZWQgZm9yIGBuby1zb3VyY2VgOiBPbmx5IG9uZSBvZiBgLS1mcm9tLXBhdGhgIG9yIGAtLWZyb20tc3RhY2tgIG1heSBiZSBwcm92aWRlZC4nKTtcbiAgICB9KTtcblxuICAgIHRlc3QoJ21pZ3JhdGUgZmFpbHMgd2hlbiAtLWZyb20tcGF0aCBpcyBpbnZhbGlkJywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgdG9vbGtpdCA9IGRlZmF1bHRUb29sa2l0U2V0dXAoKTtcbiAgICAgIGF3YWl0IGV4cGVjdCgoKSA9PiB0b29sa2l0Lm1pZ3JhdGUoe1xuICAgICAgICBzdGFja05hbWU6ICdiYWQtbG9jYWwtc291cmNlJyxcbiAgICAgICAgZnJvbVBhdGg6ICcuL2hlcmUvdGVtcGxhdGUueW1sJyxcbiAgICAgIH0pKS5yZWplY3RzLnRvVGhyb3coJ1xcJy4vaGVyZS90ZW1wbGF0ZS55bWxcXCcgaXMgbm90IGEgdmFsaWQgcGF0aC4nKTtcbiAgICAgIGV4cGVjdChzdGRlcnJNb2NrLm1vY2suY2FsbHNbMV1bMF0pLnRvQ29udGFpbignIOKdjCAgTWlncmF0ZSBmYWlsZWQgZm9yIGBiYWQtbG9jYWwtc291cmNlYDogXFwnLi9oZXJlL3RlbXBsYXRlLnltbFxcJyBpcyBub3QgYSB2YWxpZCBwYXRoLicpO1xuICAgIH0pO1xuXG4gICAgdGVzdCgnbWlncmF0ZSBmYWlscyB3aGVuIC0tZnJvbS1zdGFjayBpcyB1c2VkIGFuZCBzdGFjayBkb2VzIG5vdCBleGlzdCBpbiBhY2NvdW50JywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgbW9ja1Nka1Byb3ZpZGVyID0gbmV3IE1vY2tTZGtQcm92aWRlcigpO1xuICAgICAgbW9ja1Nka1Byb3ZpZGVyLnN0dWJDbG91ZEZvcm1hdGlvbih7XG4gICAgICAgIGRlc2NyaWJlU3RhY2tzKF9yZXF1ZXN0KSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdTdGFjayBkb2VzIG5vdCBleGlzdCBpbiB0aGlzIGVudmlyb25tZW50Jyk7XG4gICAgICAgIH0sXG4gICAgICB9KTtcblxuICAgICAgY29uc3QgbW9ja0Nsb3VkRXhlY3V0YWJsZSA9IG5ldyBNb2NrQ2xvdWRFeGVjdXRhYmxlKHtcbiAgICAgICAgc3RhY2tzOiBbXSxcbiAgICAgIH0pO1xuXG4gICAgICBjb25zdCBjZGtUb29sa2l0ID0gbmV3IENka1Rvb2xraXQoe1xuICAgICAgICBjbG91ZEV4ZWN1dGFibGU6IG1vY2tDbG91ZEV4ZWN1dGFibGUsXG4gICAgICAgIGRlcGxveW1lbnRzOiBuZXcgRGVwbG95bWVudHMoeyBzZGtQcm92aWRlcjogbW9ja1Nka1Byb3ZpZGVyIH0pLFxuICAgICAgICBzZGtQcm92aWRlcjogbW9ja1Nka1Byb3ZpZGVyLFxuICAgICAgICBjb25maWd1cmF0aW9uOiBtb2NrQ2xvdWRFeGVjdXRhYmxlLmNvbmZpZ3VyYXRpb24sXG4gICAgICB9KTtcblxuICAgICAgYXdhaXQgZXhwZWN0KCgpID0+IGNka1Rvb2xraXQubWlncmF0ZSh7XG4gICAgICAgIHN0YWNrTmFtZTogJ2JhZC1jbG91ZGZvcm1hdGlvbi1zb3VyY2UnLFxuICAgICAgICBmcm9tU3RhY2s6IHRydWUsXG4gICAgICB9KSkucmVqZWN0cy50b1Rocm93RXJyb3IoJ1N0YWNrIGRvZXMgbm90IGV4aXN0IGluIHRoaXMgZW52aXJvbm1lbnQnKTtcbiAgICAgIGV4cGVjdChzdGRlcnJNb2NrLm1vY2suY2FsbHNbMV1bMF0pLnRvQ29udGFpbignIOKdjCAgTWlncmF0ZSBmYWlsZWQgZm9yIGBiYWQtY2xvdWRmb3JtYXRpb24tc291cmNlYDogU3RhY2sgZG9lcyBub3QgZXhpc3QgaW4gdGhpcyBlbnZpcm9ubWVudCcpO1xuICAgIH0pO1xuXG4gICAgdGVzdCgnbWlncmF0ZSBmYWlscyB3aGVuIHN0YWNrIGNhbm5vdCBiZSBnZW5lcmF0ZWQnLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCB0b29sa2l0ID0gZGVmYXVsdFRvb2xraXRTZXR1cCgpO1xuICAgICAgYXdhaXQgZXhwZWN0KCgpID0+IHRvb2xraXQubWlncmF0ZSh7XG4gICAgICAgIHN0YWNrTmFtZTogJ2Nhbm5vdC1nZW5lcmF0ZS10ZW1wbGF0ZScsXG4gICAgICAgIGZyb21QYXRoOiBwYXRoLmpvaW4oX19kaXJuYW1lLCAnY29tbWFuZHMnLCAndGVzdC1yZXNvdXJjZXMnLCAndGVtcGxhdGVzJywgJ3Nxcy10ZW1wbGF0ZS5qc29uJyksXG4gICAgICAgIGxhbmd1YWdlOiAncnVzdCcsXG4gICAgICB9KSkucmVqZWN0cy50b1Rocm93RXJyb3IoJ0Nhbm5vdEdlbmVyYXRlVGVtcGxhdGVTdGFjayBjb3VsZCBub3QgYmUgZ2VuZXJhdGVkIGJlY2F1c2UgcnVzdCBpcyBub3QgYSBzdXBwb3J0ZWQgbGFuZ3VhZ2UnKTtcbiAgICAgIGV4cGVjdChzdGRlcnJNb2NrLm1vY2suY2FsbHNbMV1bMF0pLnRvQ29udGFpbignIOKdjCAgTWlncmF0ZSBmYWlsZWQgZm9yIGBjYW5ub3QtZ2VuZXJhdGUtdGVtcGxhdGVgOiBDYW5ub3RHZW5lcmF0ZVRlbXBsYXRlU3RhY2sgY291bGQgbm90IGJlIGdlbmVyYXRlZCBiZWNhdXNlIHJ1c3QgaXMgbm90IGEgc3VwcG9ydGVkIGxhbmd1YWdlJyk7XG4gICAgfSk7XG5cbiAgICBjbGlUZXN0KCdtaWdyYXRlIHN1Y2NlZWRzIGZvciB2YWxpZCB0ZW1wbGF0ZSBmcm9tIGxvY2FsIHBhdGggd2hlbiBubyBsYW5ndWFnZSBpcyBwcm92aWRlZCcsIGFzeW5jICh3b3JrRGlyKSA9PiB7XG4gICAgICBjb25zdCB0b29sa2l0ID0gZGVmYXVsdFRvb2xraXRTZXR1cCgpO1xuICAgICAgYXdhaXQgdG9vbGtpdC5taWdyYXRlKHtcbiAgICAgICAgc3RhY2tOYW1lOiAnU1FTVHlwZVNjcmlwdCcsXG4gICAgICAgIGZyb21QYXRoOiBzcXNUZW1wbGF0ZVBhdGgsXG4gICAgICAgIG91dHB1dFBhdGg6IHdvcmtEaXIsXG4gICAgICB9KTtcblxuICAgICAgLy8gUGFja2FnZXMgY3JlYXRlZCBmb3IgdHlwZXNjcmlwdFxuICAgICAgZXhwZWN0KGZzLnBhdGhFeGlzdHNTeW5jKHBhdGguam9pbih3b3JrRGlyLCAnU1FTVHlwZVNjcmlwdCcsICdwYWNrYWdlLmpzb24nKSkpLnRvQmVUcnV0aHkoKTtcbiAgICAgIGV4cGVjdChmcy5wYXRoRXhpc3RzU3luYyhwYXRoLmpvaW4od29ya0RpciwgJ1NRU1R5cGVTY3JpcHQnLCAnYmluJywgJ3Nxc190eXBlX3NjcmlwdC50cycpKSkudG9CZVRydXRoeSgpO1xuICAgICAgZXhwZWN0KGZzLnBhdGhFeGlzdHNTeW5jKHBhdGguam9pbih3b3JrRGlyLCAnU1FTVHlwZVNjcmlwdCcsICdsaWInLCAnc3FzX3R5cGVfc2NyaXB0LXN0YWNrLnRzJykpKS50b0JlVHJ1dGh5KCk7XG4gICAgfSk7XG5cbiAgICBjbGlUZXN0KCdtaWdyYXRlIHN1Y2NlZWRzIGZvciB2YWxpZCB0ZW1wbGF0ZSBmcm9tIGxvY2FsIHBhdGggd2hlbiBsYW5ndWFnZSBpcyBwcm92aWRlZCcsIGFzeW5jICh3b3JrRGlyKSA9PiB7XG4gICAgICBjb25zdCB0b29sa2l0ID0gZGVmYXVsdFRvb2xraXRTZXR1cCgpO1xuICAgICAgYXdhaXQgdG9vbGtpdC5taWdyYXRlKHtcbiAgICAgICAgc3RhY2tOYW1lOiAnUzNQeXRob24nLFxuICAgICAgICBmcm9tUGF0aDogczNUZW1wbGF0ZVBhdGgsXG4gICAgICAgIG91dHB1dFBhdGg6IHdvcmtEaXIsXG4gICAgICAgIGxhbmd1YWdlOiAncHl0aG9uJyxcbiAgICAgIH0pO1xuXG4gICAgICAvLyBQYWNrYWdlcyBjcmVhdGVkIGZvciB0eXBlc2NyaXB0XG4gICAgICBleHBlY3QoZnMucGF0aEV4aXN0c1N5bmMocGF0aC5qb2luKHdvcmtEaXIsICdTM1B5dGhvbicsICdyZXF1aXJlbWVudHMudHh0JykpKS50b0JlVHJ1dGh5KCk7XG4gICAgICBleHBlY3QoZnMucGF0aEV4aXN0c1N5bmMocGF0aC5qb2luKHdvcmtEaXIsICdTM1B5dGhvbicsICdhcHAucHknKSkpLnRvQmVUcnV0aHkoKTtcbiAgICAgIGV4cGVjdChmcy5wYXRoRXhpc3RzU3luYyhwYXRoLmpvaW4od29ya0RpciwgJ1MzUHl0aG9uJywgJ3MzX3B5dGhvbicsICdzM19weXRob25fc3RhY2sucHknKSkpLnRvQmVUcnV0aHkoKTtcbiAgICB9KTtcblxuICAgIGNsaVRlc3QoJ21pZ3JhdGUgY2FsbCBpcyBpZGVtcG90ZW50JywgYXN5bmMgKHdvcmtEaXIpID0+IHtcbiAgICAgIGNvbnN0IHRvb2xraXQgPSBkZWZhdWx0VG9vbGtpdFNldHVwKCk7XG4gICAgICBhd2FpdCB0b29sa2l0Lm1pZ3JhdGUoe1xuICAgICAgICBzdGFja05hbWU6ICdBdXRvc2NhbGluZ0NTaGFycCcsXG4gICAgICAgIGZyb21QYXRoOiBhdXRvc2NhbGluZ1RlbXBsYXRlUGF0aCxcbiAgICAgICAgb3V0cHV0UGF0aDogd29ya0RpcixcbiAgICAgICAgbGFuZ3VhZ2U6ICdjc2hhcnAnLFxuICAgICAgfSk7XG5cbiAgICAgIC8vIFBhY2thZ2VzIGNyZWF0ZWQgZm9yIHR5cGVzY3JpcHRcbiAgICAgIGV4cGVjdChmcy5wYXRoRXhpc3RzU3luYyhwYXRoLmpvaW4od29ya0RpciwgJ0F1dG9zY2FsaW5nQ1NoYXJwJywgJ3NyYycsICdBdXRvc2NhbGluZ0NTaGFycC5zbG4nKSkpLnRvQmVUcnV0aHkoKTtcbiAgICAgIGV4cGVjdChmcy5wYXRoRXhpc3RzU3luYyhwYXRoLmpvaW4od29ya0RpciwgJ0F1dG9zY2FsaW5nQ1NoYXJwJywgJ3NyYycsICdBdXRvc2NhbGluZ0NTaGFycCcsICdQcm9ncmFtLmNzJykpKS50b0JlVHJ1dGh5KCk7XG4gICAgICBleHBlY3QoZnMucGF0aEV4aXN0c1N5bmMocGF0aC5qb2luKHdvcmtEaXIsICdBdXRvc2NhbGluZ0NTaGFycCcsICdzcmMnLCAnQXV0b3NjYWxpbmdDU2hhcnAnLCAnQXV0b3NjYWxpbmdDU2hhcnBTdGFjay5jcycpKSkudG9CZVRydXRoeSgpO1xuXG4gICAgICAvLyBPbmUgbW9yZSB0aW1lXG4gICAgICBhd2FpdCB0b29sa2l0Lm1pZ3JhdGUoe1xuICAgICAgICBzdGFja05hbWU6ICdBdXRvc2NhbGluZ0NTaGFycCcsXG4gICAgICAgIGZyb21QYXRoOiBhdXRvc2NhbGluZ1RlbXBsYXRlUGF0aCxcbiAgICAgICAgb3V0cHV0UGF0aDogd29ya0RpcixcbiAgICAgICAgbGFuZ3VhZ2U6ICdjc2hhcnAnLFxuICAgICAgfSk7XG5cbiAgICAgIC8vIFBhY2thZ2VzIGNyZWF0ZWQgZm9yIHR5cGVzY3JpcHRcbiAgICAgIGV4cGVjdChmcy5wYXRoRXhpc3RzU3luYyhwYXRoLmpvaW4od29ya0RpciwgJ0F1dG9zY2FsaW5nQ1NoYXJwJywgJ3NyYycsICdBdXRvc2NhbGluZ0NTaGFycC5zbG4nKSkpLnRvQmVUcnV0aHkoKTtcbiAgICAgIGV4cGVjdChmcy5wYXRoRXhpc3RzU3luYyhwYXRoLmpvaW4od29ya0RpciwgJ0F1dG9zY2FsaW5nQ1NoYXJwJywgJ3NyYycsICdBdXRvc2NhbGluZ0NTaGFycCcsICdQcm9ncmFtLmNzJykpKS50b0JlVHJ1dGh5KCk7XG4gICAgICBleHBlY3QoZnMucGF0aEV4aXN0c1N5bmMocGF0aC5qb2luKHdvcmtEaXIsICdBdXRvc2NhbGluZ0NTaGFycCcsICdzcmMnLCAnQXV0b3NjYWxpbmdDU2hhcnAnLCAnQXV0b3NjYWxpbmdDU2hhcnBTdGFjay5jcycpKSkudG9CZVRydXRoeSgpO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgnc3RhY2sgd2l0aCBlcnJvciBhbmQgZmxhZ2dlZCBmb3IgdmFsaWRhdGlvbicsICgpID0+IHtcbiAgICBiZWZvcmVFYWNoKCgpID0+IHtcbiAgICAgIGNsb3VkRXhlY3V0YWJsZSA9IG5ldyBNb2NrQ2xvdWRFeGVjdXRhYmxlKHtcbiAgICAgICAgc3RhY2tzOiBbXG4gICAgICAgICAgTW9ja1N0YWNrLk1PQ0tfU1RBQ0tfQSxcbiAgICAgICAgICBNb2NrU3RhY2suTU9DS19TVEFDS19CLFxuICAgICAgICBdLFxuICAgICAgICBuZXN0ZWRBc3NlbWJsaWVzOiBbe1xuICAgICAgICAgIHN0YWNrczogW1xuICAgICAgICAgICAgeyBwcm9wZXJ0aWVzOiB7IHZhbGlkYXRlT25TeW50aDogdHJ1ZSB9LCAuLi5Nb2NrU3RhY2suTU9DS19TVEFDS19XSVRIX0VSUk9SIH0sXG4gICAgICAgICAgXSxcbiAgICAgICAgfV0sXG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIHRlc3QoJ2NhdXNlcyBzeW50aCB0byBmYWlsIGlmIGF1dG9WYWxpZGF0ZT10cnVlJywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgdG9vbGtpdCA9IGRlZmF1bHRUb29sa2l0U2V0dXAoKTtcbiAgICAgIGNvbnN0IGF1dG9WYWxpZGF0ZSA9IHRydWU7XG4gICAgICBhd2FpdCBleHBlY3QodG9vbGtpdC5zeW50aChbXSwgZmFsc2UsIHRydWUsIGF1dG9WYWxpZGF0ZSkpLnJlamVjdHMudG9CZURlZmluZWQoKTtcbiAgICB9KTtcblxuICAgIHRlc3QoJ2NhdXNlcyBzeW50aCB0byBzdWNjZWVkIGlmIGF1dG9WYWxpZGF0ZT1mYWxzZScsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IHRvb2xraXQgPSBkZWZhdWx0VG9vbGtpdFNldHVwKCk7XG4gICAgICBjb25zdCBhdXRvVmFsaWRhdGUgPSBmYWxzZTtcbiAgICAgIGF3YWl0IHRvb2xraXQuc3ludGgoW10sIGZhbHNlLCB0cnVlLCBhdXRvVmFsaWRhdGUpO1xuICAgICAgZXhwZWN0KG1vY2tEYXRhLm1vY2suY2FsbHMubGVuZ3RoKS50b0VxdWFsKDApO1xuICAgIH0pO1xuICB9KTtcblxuICB0ZXN0KCdzdGFjayBoYXMgZXJyb3IgYW5kIHdhcyBleHBsaWNpdGx5IHNlbGVjdGVkJywgYXN5bmMgKCkgPT4ge1xuICAgIGNsb3VkRXhlY3V0YWJsZSA9IG5ldyBNb2NrQ2xvdWRFeGVjdXRhYmxlKHtcbiAgICAgIHN0YWNrczogW1xuICAgICAgICBNb2NrU3RhY2suTU9DS19TVEFDS19BLFxuICAgICAgICBNb2NrU3RhY2suTU9DS19TVEFDS19CLFxuICAgICAgXSxcbiAgICAgIG5lc3RlZEFzc2VtYmxpZXM6IFt7XG4gICAgICAgIHN0YWNrczogW1xuICAgICAgICAgIHsgcHJvcGVydGllczogeyB2YWxpZGF0ZU9uU3ludGg6IGZhbHNlIH0sIC4uLk1vY2tTdGFjay5NT0NLX1NUQUNLX1dJVEhfRVJST1IgfSxcbiAgICAgICAgXSxcbiAgICAgIH1dLFxuICAgIH0pO1xuXG4gICAgY29uc3QgdG9vbGtpdCA9IGRlZmF1bHRUb29sa2l0U2V0dXAoKTtcblxuICAgIGF3YWl0IGV4cGVjdCh0b29sa2l0LnN5bnRoKFsnVGVzdC1TdGFjay1BL3dpdGhlcnJvcnMnXSwgZmFsc2UsIHRydWUpKS5yZWplY3RzLnRvQmVEZWZpbmVkKCk7XG4gIH0pO1xuXG4gIHRlc3QoJ3N0YWNrIGhhcyBlcnJvciwgaXMgbm90IGZsYWdnZWQgZm9yIHZhbGlkYXRpb24gYW5kIHdhcyBub3QgZXhwbGljaXRseSBzZWxlY3RlZCcsIGFzeW5jICgpID0+IHtcbiAgICBjbG91ZEV4ZWN1dGFibGUgPSBuZXcgTW9ja0Nsb3VkRXhlY3V0YWJsZSh7XG4gICAgICBzdGFja3M6IFtcbiAgICAgICAgTW9ja1N0YWNrLk1PQ0tfU1RBQ0tfQSxcbiAgICAgICAgTW9ja1N0YWNrLk1PQ0tfU1RBQ0tfQixcbiAgICAgIF0sXG4gICAgICBuZXN0ZWRBc3NlbWJsaWVzOiBbe1xuICAgICAgICBzdGFja3M6IFtcbiAgICAgICAgICB7IHByb3BlcnRpZXM6IHsgdmFsaWRhdGVPblN5bnRoOiBmYWxzZSB9LCAuLi5Nb2NrU3RhY2suTU9DS19TVEFDS19XSVRIX0VSUk9SIH0sXG4gICAgICAgIF0sXG4gICAgICB9XSxcbiAgICB9KTtcblxuICAgIGNvbnN0IHRvb2xraXQgPSBkZWZhdWx0VG9vbGtpdFNldHVwKCk7XG5cbiAgICBhd2FpdCB0b29sa2l0LnN5bnRoKFtdLCBmYWxzZSwgdHJ1ZSk7XG4gIH0pO1xuXG4gIHRlc3QoJ3N0YWNrIGhhcyBkZXBlbmRlbmN5IGFuZCB3YXMgZXhwbGljaXRseSBzZWxlY3RlZCcsIGFzeW5jICgpID0+IHtcbiAgICBjbG91ZEV4ZWN1dGFibGUgPSBuZXcgTW9ja0Nsb3VkRXhlY3V0YWJsZSh7XG4gICAgICBzdGFja3M6IFtcbiAgICAgICAgTW9ja1N0YWNrLk1PQ0tfU1RBQ0tfQyxcbiAgICAgICAgTW9ja1N0YWNrLk1PQ0tfU1RBQ0tfRCxcbiAgICAgIF0sXG4gICAgfSk7XG5cbiAgICBjb25zdCB0b29sa2l0ID0gZGVmYXVsdFRvb2xraXRTZXR1cCgpO1xuXG4gICAgYXdhaXQgdG9vbGtpdC5zeW50aChbTW9ja1N0YWNrLk1PQ0tfU1RBQ0tfRC5zdGFja05hbWVdLCB0cnVlLCBmYWxzZSk7XG5cbiAgICBleHBlY3QobW9ja0RhdGEubW9jay5jYWxscy5sZW5ndGgpLnRvRXF1YWwoMSk7XG4gICAgZXhwZWN0KG1vY2tEYXRhLm1vY2suY2FsbHNbMF1bMF0pLnRvQmVEZWZpbmVkKCk7XG4gIH0pO1xuXG4gIHRlc3QoJ3JvbGxiYWNrIHVzZXMgZGVwbG95bWVudCByb2xlJywgYXN5bmMgKCkgPT4ge1xuICAgIGNsb3VkRXhlY3V0YWJsZSA9IG5ldyBNb2NrQ2xvdWRFeGVjdXRhYmxlKHtcbiAgICAgIHN0YWNrczogW1xuICAgICAgICBNb2NrU3RhY2suTU9DS19TVEFDS19DLFxuICAgICAgXSxcbiAgICB9KTtcblxuICAgIGNvbnN0IG1vY2tlZFJvbGxiYWNrID0gamVzdC5zcHlPbihEZXBsb3ltZW50cy5wcm90b3R5cGUsICdyb2xsYmFja1N0YWNrJykubW9ja1Jlc29sdmVkVmFsdWUoe1xuICAgICAgc3VjY2VzczogdHJ1ZSxcbiAgICB9KTtcblxuICAgIGNvbnN0IHRvb2xraXQgPSBuZXcgQ2RrVG9vbGtpdCh7XG4gICAgICBjbG91ZEV4ZWN1dGFibGUsXG4gICAgICBjb25maWd1cmF0aW9uOiBjbG91ZEV4ZWN1dGFibGUuY29uZmlndXJhdGlvbixcbiAgICAgIHNka1Byb3ZpZGVyOiBjbG91ZEV4ZWN1dGFibGUuc2RrUHJvdmlkZXIsXG4gICAgICBkZXBsb3ltZW50czogbmV3IERlcGxveW1lbnRzKHsgc2RrUHJvdmlkZXI6IG5ldyBNb2NrU2RrUHJvdmlkZXIoKSB9KSxcbiAgICB9KTtcblxuICAgIGF3YWl0IHRvb2xraXQucm9sbGJhY2soe1xuICAgICAgc2VsZWN0b3I6IHsgcGF0dGVybnM6IFtdIH0sXG4gICAgfSk7XG5cbiAgICBleHBlY3QobW9ja2VkUm9sbGJhY2spLnRvSGF2ZUJlZW5DYWxsZWQoKTtcbiAgfSk7XG5cbiAgdGVzdC5lYWNoKFtcbiAgICBbeyB0eXBlOiAnZmFpbHBhdXNlZC1uZWVkLXJvbGxiYWNrLWZpcnN0JywgcmVhc29uOiAncmVwbGFjZW1lbnQnIH0sIGZhbHNlXSxcbiAgICBbeyB0eXBlOiAnZmFpbHBhdXNlZC1uZWVkLXJvbGxiYWNrLWZpcnN0JywgcmVhc29uOiAncmVwbGFjZW1lbnQnIH0sIHRydWVdLFxuICAgIFt7IHR5cGU6ICdmYWlscGF1c2VkLW5lZWQtcm9sbGJhY2stZmlyc3QnLCByZWFzb246ICdub3Qtbm9yb2xsYmFjaycgfSwgZmFsc2VdLFxuICAgIFt7IHR5cGU6ICdyZXBsYWNlbWVudC1yZXF1aXJlcy1ub3JvbGxiYWNrJyB9LCBmYWxzZV0sXG4gICAgW3sgdHlwZTogJ3JlcGxhY2VtZW50LXJlcXVpcmVzLW5vcm9sbGJhY2snIH0sIHRydWVdLFxuICBdIHNhdGlzZmllcyBBcnJheTxbRGVwbG95U3RhY2tSZXN1bHQsIGJvb2xlYW5dPikoJ25vLXJvbGxiYWNrIGRlcGxveW1lbnQgdGhhdCBjYW50IHByb2NlZWQgd2lsbCBiZSBjYWxsZWQgd2l0aCByb2xsYmFjayBvbiByZXRyeTogJXAgKHVzaW5nIGZvcmNlOiAlcCknLCBhc3luYyAoZmlyc3RSZXN1bHQsIHVzZUZvcmNlKSA9PiB7XG4gICAgY2xvdWRFeGVjdXRhYmxlID0gbmV3IE1vY2tDbG91ZEV4ZWN1dGFibGUoe1xuICAgICAgc3RhY2tzOiBbXG4gICAgICAgIE1vY2tTdGFjay5NT0NLX1NUQUNLX0MsXG4gICAgICBdLFxuICAgIH0pO1xuXG4gICAgY29uc3QgZGVwbG95bWVudHMgPSBuZXcgRGVwbG95bWVudHMoeyBzZGtQcm92aWRlcjogbmV3IE1vY2tTZGtQcm92aWRlcigpIH0pO1xuXG4gICAgLy8gUm9sbGJhY2sgbWlnaHQgYmUgY2FsbGVkIC0tIGp1c3QgZG9uJ3QgZG8gbm90aGluZy5cbiAgICBjb25zdCBtb2NrUm9sbGJhY2tTdGFjayA9IGplc3Quc3B5T24oZGVwbG95bWVudHMsICdyb2xsYmFja1N0YWNrJykubW9ja1Jlc29sdmVkVmFsdWUoe30pO1xuXG4gICAgY29uc3QgbW9ja2VkRGVwbG95U3RhY2sgPSBqZXN0XG4gICAgICAuc3B5T24oZGVwbG95bWVudHMsICdkZXBsb3lTdGFjaycpXG4gICAgICAubW9ja1Jlc29sdmVkVmFsdWVPbmNlKGZpcnN0UmVzdWx0KVxuICAgICAgLm1vY2tSZXNvbHZlZFZhbHVlT25jZSh7XG4gICAgICAgIHR5cGU6ICdkaWQtZGVwbG95LXN0YWNrJyxcbiAgICAgICAgbm9PcDogZmFsc2UsXG4gICAgICAgIG91dHB1dHM6IHt9LFxuICAgICAgICBzdGFja0FybjogJ3N0YWNrOmFybicsXG4gICAgICB9KTtcblxuICAgIGNvbnN0IG1vY2tlZENvbmZpcm0gPSBqZXN0LnNweU9uKHByb21wdGx5LCAnY29uZmlybScpLm1vY2tSZXNvbHZlZFZhbHVlKHRydWUpO1xuXG4gICAgY29uc3QgdG9vbGtpdCA9IG5ldyBDZGtUb29sa2l0KHtcbiAgICAgIGNsb3VkRXhlY3V0YWJsZSxcbiAgICAgIGNvbmZpZ3VyYXRpb246IGNsb3VkRXhlY3V0YWJsZS5jb25maWd1cmF0aW9uLFxuICAgICAgc2RrUHJvdmlkZXI6IGNsb3VkRXhlY3V0YWJsZS5zZGtQcm92aWRlcixcbiAgICAgIGRlcGxveW1lbnRzLFxuICAgIH0pO1xuXG4gICAgYXdhaXQgdG9vbGtpdC5kZXBsb3koe1xuICAgICAgc2VsZWN0b3I6IHsgcGF0dGVybnM6IFtdIH0sXG4gICAgICBob3Rzd2FwOiBIb3Rzd2FwTW9kZS5GVUxMX0RFUExPWU1FTlQsXG4gICAgICByb2xsYmFjazogZmFsc2UsXG4gICAgICByZXF1aXJlQXBwcm92YWw6IFJlcXVpcmVBcHByb3ZhbC5OZXZlcixcbiAgICAgIGZvcmNlOiB1c2VGb3JjZSxcbiAgICB9KTtcblxuICAgIGlmIChmaXJzdFJlc3VsdC50eXBlID09PSAnZmFpbHBhdXNlZC1uZWVkLXJvbGxiYWNrLWZpcnN0Jykge1xuICAgICAgZXhwZWN0KG1vY2tSb2xsYmFja1N0YWNrKS50b0hhdmVCZWVuQ2FsbGVkKCk7XG4gICAgfVxuXG4gICAgaWYgKCF1c2VGb3JjZSkge1xuICAgICAgLy8gUXVlc3Rpb25zIHdpbGwgaGF2ZSBiZWVuIGFza2VkIG9ubHkgaWYgLS1mb3JjZSBpcyBub3Qgc3BlY2lmaWVkXG4gICAgICBpZiAoZmlyc3RSZXN1bHQudHlwZSA9PT0gJ2ZhaWxwYXVzZWQtbmVlZC1yb2xsYmFjay1maXJzdCcpIHtcbiAgICAgICAgZXhwZWN0KG1vY2tlZENvbmZpcm0pLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKGV4cGVjdC5zdHJpbmdDb250YWluaW5nKCdSb2xsIGJhY2sgZmlyc3QgYW5kIHRoZW4gcHJvY2VlZCB3aXRoIGRlcGxveW1lbnQnKSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBleHBlY3QobW9ja2VkQ29uZmlybSkudG9IYXZlQmVlbkNhbGxlZFdpdGgoZXhwZWN0LnN0cmluZ0NvbnRhaW5pbmcoJ1BlcmZvcm0gYSByZWd1bGFyIGRlcGxveW1lbnQnKSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgZXhwZWN0KG1vY2tlZERlcGxveVN0YWNrKS50b0hhdmVCZWVuTnRoQ2FsbGVkV2l0aCgxLCBleHBlY3Qub2JqZWN0Q29udGFpbmluZyh7IHJvbGxiYWNrOiBmYWxzZSB9KSk7XG4gICAgZXhwZWN0KG1vY2tlZERlcGxveVN0YWNrKS50b0hhdmVCZWVuTnRoQ2FsbGVkV2l0aCgyLCBleHBlY3Qub2JqZWN0Q29udGFpbmluZyh7IHJvbGxiYWNrOiB0cnVlIH0pKTtcbiAgfSk7XG59KTtcblxuY2xhc3MgTW9ja1N0YWNrIHtcbiAgcHVibGljIHN0YXRpYyByZWFkb25seSBNT0NLX1NUQUNLX0E6IFRlc3RTdGFja0FydGlmYWN0ID0ge1xuICAgIHN0YWNrTmFtZTogJ1Rlc3QtU3RhY2stQScsXG4gICAgdGVtcGxhdGU6IHsgUmVzb3VyY2VzOiB7IFRlbXBsYXRlTmFtZTogJ1Rlc3QtU3RhY2stQScgfSB9LFxuICAgIGVudjogJ2F3czovLzEyMzQ1Njc4OTAxMi9iZXJtdWRhLXRyaWFuZ2xlLTEnLFxuICAgIG1ldGFkYXRhOiB7XG4gICAgICAnL1Rlc3QtU3RhY2stQSc6IFtcbiAgICAgICAge1xuICAgICAgICAgIHR5cGU6IGN4c2NoZW1hLkFydGlmYWN0TWV0YWRhdGFFbnRyeVR5cGUuU1RBQ0tfVEFHUyxcbiAgICAgICAgICBkYXRhOiBbXG4gICAgICAgICAgICB7IGtleTogJ0ZvbycsIHZhbHVlOiAnQmFyJyB9LFxuICAgICAgICAgIF0sXG4gICAgICAgIH0sXG4gICAgICBdLFxuICAgIH0sXG4gICAgZGlzcGxheU5hbWU6ICdUZXN0LVN0YWNrLUEtRGlzcGxheS1OYW1lJyxcbiAgfTtcbiAgcHVibGljIHN0YXRpYyByZWFkb25seSBNT0NLX1NUQUNLX0I6IFRlc3RTdGFja0FydGlmYWN0ID0ge1xuICAgIHN0YWNrTmFtZTogJ1Rlc3QtU3RhY2stQicsXG4gICAgdGVtcGxhdGU6IHsgUmVzb3VyY2VzOiB7IFRlbXBsYXRlTmFtZTogJ1Rlc3QtU3RhY2stQicgfSB9LFxuICAgIGVudjogJ2F3czovLzEyMzQ1Njc4OTAxMi9iZXJtdWRhLXRyaWFuZ2xlLTEnLFxuICAgIG1ldGFkYXRhOiB7XG4gICAgICAnL1Rlc3QtU3RhY2stQic6IFtcbiAgICAgICAge1xuICAgICAgICAgIHR5cGU6IGN4c2NoZW1hLkFydGlmYWN0TWV0YWRhdGFFbnRyeVR5cGUuU1RBQ0tfVEFHUyxcbiAgICAgICAgICBkYXRhOiBbXG4gICAgICAgICAgICB7IGtleTogJ0JheicsIHZhbHVlOiAnWmluZ2EhJyB9LFxuICAgICAgICAgIF0sXG4gICAgICAgIH0sXG4gICAgICBdLFxuICAgIH0sXG4gIH07XG4gIHB1YmxpYyBzdGF0aWMgcmVhZG9ubHkgTU9DS19TVEFDS19DOiBUZXN0U3RhY2tBcnRpZmFjdCA9IHtcbiAgICBzdGFja05hbWU6ICdUZXN0LVN0YWNrLUMnLFxuICAgIHRlbXBsYXRlOiB7IFJlc291cmNlczogeyBUZW1wbGF0ZU5hbWU6ICdUZXN0LVN0YWNrLUMnIH0gfSxcbiAgICBlbnY6ICdhd3M6Ly8xMjM0NTY3ODkwMTIvYmVybXVkYS10cmlhbmdsZS0xJyxcbiAgICBtZXRhZGF0YToge1xuICAgICAgJy9UZXN0LVN0YWNrLUMnOiBbXG4gICAgICAgIHtcbiAgICAgICAgICB0eXBlOiBjeHNjaGVtYS5BcnRpZmFjdE1ldGFkYXRhRW50cnlUeXBlLlNUQUNLX1RBR1MsXG4gICAgICAgICAgZGF0YTogW1xuICAgICAgICAgICAgeyBrZXk6ICdCYXonLCB2YWx1ZTogJ1ppbmdhIScgfSxcbiAgICAgICAgICBdLFxuICAgICAgICB9LFxuICAgICAgXSxcbiAgICB9LFxuICAgIGRpc3BsYXlOYW1lOiAnVGVzdC1TdGFjay1BL1Rlc3QtU3RhY2stQycsXG4gIH07XG4gIHB1YmxpYyBzdGF0aWMgcmVhZG9ubHkgTU9DS19TVEFDS19EOiBUZXN0U3RhY2tBcnRpZmFjdCA9IHtcbiAgICBzdGFja05hbWU6ICdUZXN0LVN0YWNrLUQnLFxuICAgIHRlbXBsYXRlOiB7IFJlc291cmNlczogeyBUZW1wbGF0ZU5hbWU6ICdUZXN0LVN0YWNrLUQnIH0gfSxcbiAgICBlbnY6ICdhd3M6Ly8xMjM0NTY3ODkwMTIvYmVybXVkYS10cmlhbmdsZS0xJyxcbiAgICBtZXRhZGF0YToge1xuICAgICAgJy9UZXN0LVN0YWNrLUQnOiBbXG4gICAgICAgIHtcbiAgICAgICAgICB0eXBlOiBjeHNjaGVtYS5BcnRpZmFjdE1ldGFkYXRhRW50cnlUeXBlLlNUQUNLX1RBR1MsXG4gICAgICAgICAgZGF0YTogW1xuICAgICAgICAgICAgeyBrZXk6ICdCYXonLCB2YWx1ZTogJ1ppbmdhIScgfSxcbiAgICAgICAgICBdLFxuICAgICAgICB9LFxuICAgICAgXSxcbiAgICB9LFxuICAgIGRlcGVuZHM6IFtNb2NrU3RhY2suTU9DS19TVEFDS19DLnN0YWNrTmFtZV0sXG4gIH07XG5cbiAgcHVibGljIHN0YXRpYyByZWFkb25seSBNT0NLX1NUQUNLX1dJVEhfRVJST1I6IFRlc3RTdGFja0FydGlmYWN0ID0ge1xuICAgIHN0YWNrTmFtZTogJ3dpdGhlcnJvcnMnLFxuICAgIGVudjogJ2F3czovLzEyMzQ1Njc4OTAxMi9iZXJtdWRhLXRyaWFuZ2xlLTEnLFxuICAgIHRlbXBsYXRlOiB7IHJlc291cmNlOiAnZXJyb3JyZXNvdXJjZScgfSxcbiAgICBtZXRhZGF0YToge1xuICAgICAgJy9yZXNvdXJjZSc6IFtcbiAgICAgICAge1xuICAgICAgICAgIHR5cGU6IGN4c2NoZW1hLkFydGlmYWN0TWV0YWRhdGFFbnRyeVR5cGUuRVJST1IsXG4gICAgICAgICAgZGF0YTogJ3RoaXMgaXMgYW4gZXJyb3InLFxuICAgICAgICB9LFxuICAgICAgXSxcbiAgICB9LFxuICAgIGRpc3BsYXlOYW1lOiAnVGVzdC1TdGFjay1BL3dpdGhlcnJvcnMnLFxuICB9XG4gIHB1YmxpYyBzdGF0aWMgcmVhZG9ubHkgTU9DS19TVEFDS19XSVRIX0FTU0VUOiBUZXN0U3RhY2tBcnRpZmFjdCA9IHtcbiAgICBzdGFja05hbWU6ICdUZXN0LVN0YWNrLUFzc2V0JyxcbiAgICB0ZW1wbGF0ZTogeyBSZXNvdXJjZXM6IHsgVGVtcGxhdGVOYW1lOiAnVGVzdC1TdGFjay1Bc3NldCcgfSB9LFxuICAgIGVudjogJ2F3czovLzEyMzQ1Njc4OTAxMi9iZXJtdWRhLXRyaWFuZ2xlLTEnLFxuICAgIGFzc2V0TWFuaWZlc3Q6IHtcbiAgICAgIHZlcnNpb246IE1hbmlmZXN0LnZlcnNpb24oKSxcbiAgICAgIGZpbGVzOiB7XG4gICAgICAgIHh5ejoge1xuICAgICAgICAgIHNvdXJjZToge1xuICAgICAgICAgICAgcGF0aDogcGF0aC5yZXNvbHZlKF9fZGlybmFtZSwgJy4uJywgJ0xJQ0VOU0UnKSxcbiAgICAgICAgICB9LFxuICAgICAgICAgIGRlc3RpbmF0aW9uczoge1xuICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgICB9LFxuICAgIH0sXG4gIH1cbiAgcHVibGljIHN0YXRpYyByZWFkb25seSBNT0NLX1NUQUNLX1dJVEhfTk9USUZJQ0FUSU9OX0FSTlM6IFRlc3RTdGFja0FydGlmYWN0ID0ge1xuICAgIHN0YWNrTmFtZTogJ1Rlc3QtU3RhY2stTm90aWZpY2F0aW9uLUFybnMnLFxuICAgIG5vdGlmaWNhdGlvbkFybnM6IFsnYXJuOmF3czpzbnM6YmVybXVkYS10cmlhbmdsZS0xMzM3OjEyMzQ1Njc4OTAxMjpNeVRvcGljJ10sXG4gICAgdGVtcGxhdGU6IHsgUmVzb3VyY2VzOiB7IFRlbXBsYXRlTmFtZTogJ1Rlc3QtU3RhY2stTm90aWZpY2F0aW9uLUFybnMnIH0gfSxcbiAgICBlbnY6ICdhd3M6Ly8xMjM0NTY3ODkwMTIvYmVybXVkYS10cmlhbmdsZS0xMzM3JyxcbiAgICBtZXRhZGF0YToge1xuICAgICAgJy9UZXN0LVN0YWNrLU5vdGlmaWNhdGlvbi1Bcm5zJzogW1xuICAgICAgICB7XG4gICAgICAgICAgdHlwZTogY3hzY2hlbWEuQXJ0aWZhY3RNZXRhZGF0YUVudHJ5VHlwZS5TVEFDS19UQUdTLFxuICAgICAgICAgIGRhdGE6IFtcbiAgICAgICAgICAgIHsga2V5OiAnRm9vJywgdmFsdWU6ICdCYXInIH0sXG4gICAgICAgICAgXSxcbiAgICAgICAgfSxcbiAgICAgIF0sXG4gICAgfSxcbiAgfVxuXG4gIHB1YmxpYyBzdGF0aWMgcmVhZG9ubHkgTU9DS19TVEFDS19XSVRIX0JBRF9OT1RJRklDQVRJT05fQVJOUzogVGVzdFN0YWNrQXJ0aWZhY3QgPSB7XG4gICAgc3RhY2tOYW1lOiAnVGVzdC1TdGFjay1CYWQtTm90aWZpY2F0aW9uLUFybnMnLFxuICAgIG5vdGlmaWNhdGlvbkFybnM6IFsnYXJuOjEzMzc6MTIzNDU2Nzg5MDEyOnNuczpiYWQnXSxcbiAgICB0ZW1wbGF0ZTogeyBSZXNvdXJjZXM6IHsgVGVtcGxhdGVOYW1lOiAnVGVzdC1TdGFjay1CYWQtTm90aWZpY2F0aW9uLUFybnMnIH0gfSxcbiAgICBlbnY6ICdhd3M6Ly8xMjM0NTY3ODkwMTIvYmVybXVkYS10cmlhbmdsZS0xMzM3JyxcbiAgICBtZXRhZGF0YToge1xuICAgICAgJy9UZXN0LVN0YWNrLUJhZC1Ob3RpZmljYXRpb24tQXJucyc6IFtcbiAgICAgICAge1xuICAgICAgICAgIHR5cGU6IGN4c2NoZW1hLkFydGlmYWN0TWV0YWRhdGFFbnRyeVR5cGUuU1RBQ0tfVEFHUyxcbiAgICAgICAgICBkYXRhOiBbXG4gICAgICAgICAgICB7IGtleTogJ0ZvbycsIHZhbHVlOiAnQmFyJyB9LFxuICAgICAgICAgIF0sXG4gICAgICAgIH0sXG4gICAgICBdLFxuICAgIH0sXG4gIH1cbn1cblxuY2xhc3MgRmFrZUNsb3VkRm9ybWF0aW9uIGV4dGVuZHMgRGVwbG95bWVudHMge1xuICBwcml2YXRlIHJlYWRvbmx5IGV4cGVjdGVkVGFnczogeyBbc3RhY2tOYW1lOiBzdHJpbmddOiBUYWdbXSB9ID0ge307XG4gIHByaXZhdGUgcmVhZG9ubHkgZXhwZWN0ZWROb3RpZmljYXRpb25Bcm5zPzogc3RyaW5nW107XG5cbiAgY29uc3RydWN0b3IoXG4gICAgZXhwZWN0ZWRUYWdzOiB7IFtzdGFja05hbWU6IHN0cmluZ106IHsgW2tleTogc3RyaW5nXTogc3RyaW5nIH0gfSA9IHt9LFxuICAgIGV4cGVjdGVkTm90aWZpY2F0aW9uQXJucz86IHN0cmluZ1tdLFxuICApIHtcbiAgICBzdXBlcih7IHNka1Byb3ZpZGVyOiBuZXcgTW9ja1Nka1Byb3ZpZGVyKCkgfSk7XG5cbiAgICBmb3IgKGNvbnN0IFtzdGFja05hbWUsIHRhZ3NdIG9mIE9iamVjdC5lbnRyaWVzKGV4cGVjdGVkVGFncykpIHtcbiAgICAgIHRoaXMuZXhwZWN0ZWRUYWdzW3N0YWNrTmFtZV0gPVxuICAgICAgICBPYmplY3QuZW50cmllcyh0YWdzKS5tYXAoKFtLZXksIFZhbHVlXSkgPT4gKHsgS2V5LCBWYWx1ZSB9KSlcbiAgICAgICAgICAuc29ydCgobCwgcikgPT4gbC5LZXkubG9jYWxlQ29tcGFyZShyLktleSkpO1xuICAgIH1cbiAgICB0aGlzLmV4cGVjdGVkTm90aWZpY2F0aW9uQXJucyA9IGV4cGVjdGVkTm90aWZpY2F0aW9uQXJucyA/PyBbXTtcbiAgfVxuXG4gIHB1YmxpYyBkZXBsb3lTdGFjayhvcHRpb25zOiBEZXBsb3lTdGFja09wdGlvbnMpOiBQcm9taXNlPFN1Y2Nlc3NmdWxEZXBsb3lTdGFja1Jlc3VsdD4ge1xuICAgIGV4cGVjdChbXG4gICAgICBNb2NrU3RhY2suTU9DS19TVEFDS19BLnN0YWNrTmFtZSxcbiAgICAgIE1vY2tTdGFjay5NT0NLX1NUQUNLX0Iuc3RhY2tOYW1lLFxuICAgICAgTW9ja1N0YWNrLk1PQ0tfU1RBQ0tfQy5zdGFja05hbWUsXG4gICAgICAvLyBNb2NrU3RhY2suTU9DS19TVEFDS19EIGRlbGliZXJhdGVseSBvbWl0dGVkLlxuICAgICAgTW9ja1N0YWNrLk1PQ0tfU1RBQ0tfV0lUSF9BU1NFVC5zdGFja05hbWUsXG4gICAgICBNb2NrU3RhY2suTU9DS19TVEFDS19XSVRIX0VSUk9SLnN0YWNrTmFtZSxcbiAgICAgIE1vY2tTdGFjay5NT0NLX1NUQUNLX1dJVEhfTk9USUZJQ0FUSU9OX0FSTlMuc3RhY2tOYW1lLFxuICAgICAgTW9ja1N0YWNrLk1PQ0tfU1RBQ0tfV0lUSF9CQURfTk9USUZJQ0FUSU9OX0FSTlMuc3RhY2tOYW1lLFxuICAgIF0pLnRvQ29udGFpbihvcHRpb25zLnN0YWNrLnN0YWNrTmFtZSk7XG5cbiAgICBpZiAodGhpcy5leHBlY3RlZFRhZ3Nbb3B0aW9ucy5zdGFjay5zdGFja05hbWVdKSB7XG4gICAgICBleHBlY3Qob3B0aW9ucy50YWdzKS50b0VxdWFsKHRoaXMuZXhwZWN0ZWRUYWdzW29wdGlvbnMuc3RhY2suc3RhY2tOYW1lXSk7XG4gICAgfVxuXG4gICAgZXhwZWN0KG9wdGlvbnMubm90aWZpY2F0aW9uQXJucykudG9FcXVhbCh0aGlzLmV4cGVjdGVkTm90aWZpY2F0aW9uQXJucyk7XG4gICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh7XG4gICAgICB0eXBlOiAnZGlkLWRlcGxveS1zdGFjaycsXG4gICAgICBzdGFja0FybjogYGFybjphd3M6Y2xvdWRmb3JtYXRpb246OjpzdGFjay8ke29wdGlvbnMuc3RhY2suc3RhY2tOYW1lfS9Nb2NrZWRPdXRgLFxuICAgICAgbm9PcDogZmFsc2UsXG4gICAgICBvdXRwdXRzOiB7IFN0YWNrTmFtZTogb3B0aW9ucy5zdGFjay5zdGFja05hbWUgfSxcbiAgICAgIHN0YWNrQXJ0aWZhY3Q6IG9wdGlvbnMuc3RhY2ssXG4gICAgfSk7XG4gIH1cblxuICBwdWJsaWMgcm9sbGJhY2tTdGFjayhfb3B0aW9uczogUm9sbGJhY2tTdGFja09wdGlvbnMpOiBQcm9taXNlPFJvbGxiYWNrU3RhY2tSZXN1bHQ+IHtcbiAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHtcbiAgICAgIHN1Y2Nlc3M6IHRydWUsXG4gICAgfSk7XG4gIH1cblxuICBwdWJsaWMgZGVzdHJveVN0YWNrKG9wdGlvbnM6IERlc3Ryb3lTdGFja09wdGlvbnMpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICBleHBlY3Qob3B0aW9ucy5zdGFjaykudG9CZURlZmluZWQoKTtcbiAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7XG4gIH1cblxuICBwdWJsaWMgcmVhZEN1cnJlbnRUZW1wbGF0ZShzdGFjazogY3hhcGkuQ2xvdWRGb3JtYXRpb25TdGFja0FydGlmYWN0KTogUHJvbWlzZTxUZW1wbGF0ZT4ge1xuICAgIHN3aXRjaCAoc3RhY2suc3RhY2tOYW1lKSB7XG4gICAgICBjYXNlIE1vY2tTdGFjay5NT0NLX1NUQUNLX0Euc3RhY2tOYW1lOlxuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHt9KTtcbiAgICAgIGNhc2UgTW9ja1N0YWNrLk1PQ0tfU1RBQ0tfQi5zdGFja05hbWU6XG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoe30pO1xuICAgICAgY2FzZSBNb2NrU3RhY2suTU9DS19TVEFDS19DLnN0YWNrTmFtZTpcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh7fSk7XG4gICAgICBjYXNlIE1vY2tTdGFjay5NT0NLX1NUQUNLX1dJVEhfQVNTRVQuc3RhY2tOYW1lOlxuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHt9KTtcbiAgICAgIGNhc2UgTW9ja1N0YWNrLk1PQ0tfU1RBQ0tfV0lUSF9OT1RJRklDQVRJT05fQVJOUy5zdGFja05hbWU6XG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoe30pO1xuICAgICAgY2FzZSBNb2NrU3RhY2suTU9DS19TVEFDS19XSVRIX0JBRF9OT1RJRklDQVRJT05fQVJOUy5zdGFja05hbWU6XG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoe30pO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBub3QgYW4gZXhwZWN0ZWQgbW9jayBzdGFjazogJHtzdGFjay5zdGFja05hbWV9YCk7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGNsaVRlc3QobmFtZTogc3RyaW5nLCBoYW5kbGVyOiAoZGlyOiBzdHJpbmcpID0+IHZvaWQgfCBQcm9taXNlPGFueT4pOiB2b2lkIHtcbiAgdGVzdChuYW1lLCAoKSA9PiB3aXRoVGVtcERpcihoYW5kbGVyKSk7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIHdpdGhUZW1wRGlyKGNiOiAoZGlyOiBzdHJpbmcpID0+IHZvaWQgfCBQcm9taXNlPGFueT4pIHtcbiAgY29uc3QgdG1wRGlyID0gYXdhaXQgZnMubWtkdGVtcChwYXRoLmpvaW4ob3MudG1wZGlyKCksICdhd3MtY2RrLXRlc3QnKSk7XG4gIHRyeSB7XG4gICAgYXdhaXQgY2IodG1wRGlyKTtcbiAgfSBmaW5hbGx5IHtcbiAgICBhd2FpdCBmcy5yZW1vdmUodG1wRGlyKTtcbiAgfVxufVxuIl19